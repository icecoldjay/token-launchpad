{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/core/LaunchManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./TokenFactory.sol\";\nimport \"../extensions/LiquidityManager.sol\";\nimport \"../interfaces/IToken.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract LaunchManager {\n    TokenFactory public tokenFactory;\n    address payable public liquidityManagerAddress;\n\n    uint256 public launchFee;\n    address public feeCollector;\n\n    mapping(address => bytes32) public launchCommits;\n\n    // Base token parameters (common for both launch types)\n    struct TokenParams {\n        string name;\n        string symbol;\n        uint8 decimals;\n        uint256 totalSupply;\n        address[] initialHolders;\n        uint256[] initialAmounts;\n        bool enableAntiBot;\n    }\n\n    // Parameters for ETH pair liquidity\n    struct EthPairParams {\n        uint256 tokenAmount; // Amount of our token for liquidity\n        uint256 ethAmount; // Amount of ETH for liquidity\n        uint256 tokenAmountMin; // Min amount of our token for slippage\n        uint256 ethAmountMin; // Min amount of ETH for slippage\n        uint256 lockDuration; // How long to lock liquidity for\n    }\n\n    // Parameters for custom token pair liquidity\n    struct TokenPairParams {\n        address pairToken; // The token to pair with (USDC, USDT, etc.)\n        uint256 tokenAmount; // Amount of our token for liquidity\n        uint256 pairAmount; // Amount of pair token for liquidity\n        uint256 tokenAmountMin; // Min amount of our token for slippage\n        uint256 pairAmountMin; // Min amount of pair token for slippage\n        uint256 lockDuration; // How long to lock liquidity for\n    }\n\n    event LaunchCompleted(\n        address indexed tokenAddress,\n        uint256 indexed liquidityTokenId\n    );\n    event TokenDistributed(\n        address indexed token,\n        address indexed holder,\n        uint256 amount\n    );\n\n    constructor(\n        address _tokenFactory,\n        address payable _liquidityManager,\n        address _feeCollector,\n        uint256 _launchFee\n    ) {\n        tokenFactory = TokenFactory(_tokenFactory);\n        liquidityManagerAddress = _liquidityManager;\n        feeCollector = _feeCollector;\n        launchFee = _launchFee;\n    }\n\n    // Launch with ETH pair\n    function instantLaunchWithEth(\n        TokenParams calldata tokenParams,\n        EthPairParams calldata ethParams\n    ) external payable {\n        // Get the token creation fee\n        uint256 tokenCreationFee = tokenFactory.creationFee();\n\n        // Check if enough ETH was sent (fee + token creation fee + amount for liquidity)\n        require(\n            msg.value >= launchFee + tokenCreationFee + ethParams.ethAmount,\n            \"Insufficient ETH\"\n        );\n\n        // Deduct fee\n        (bool sent, ) = feeCollector.call{value: launchFee}(\"\");\n        require(sent, \"Fee transfer failed\");\n\n        // Create token - the token factory will mint all tokens to msg.sender and pre-approve\n        address tokenAddress = _createToken(tokenParams);\n\n        // Distribute tokens to initial holders\n        _distributeTokens(tokenAddress, tokenParams);\n\n        // Transfer tokens for liquidity from msg.sender to this contract\n        IERC20 token = IERC20(tokenAddress);\n        require(\n            token.transferFrom(\n                msg.sender,\n                address(this),\n                ethParams.tokenAmount\n            ),\n            \"Liquidity token transfer failed\"\n        );\n\n        // Approve the liquidity manager to spend these tokens\n        token.approve(liquidityManagerAddress, ethParams.tokenAmount);\n\n        // Create ETH liquidity\n        uint256 ethForLiquidity = msg.value - launchFee - tokenCreationFee;\n        (\n            uint amountToken,\n            uint amountETH,\n            uint liquidity\n        ) = _createLiquidityWithEth(tokenAddress, ethParams, ethForLiquidity);\n\n        // Mark initial distribution as complete\n        _completeInitialDistribution(tokenAddress);\n\n        // Refund any excess ETH\n        if (address(this).balance > 0) {\n            (bool refunded, ) = msg.sender.call{value: address(this).balance}(\n                \"\"\n            );\n            require(refunded, \"Refund failed\");\n        }\n\n        emit LaunchCompleted(tokenAddress, liquidity);\n    }\n\n    // Launch with custom token pair\n    function instantLaunchWithToken(\n        TokenParams calldata tokenParams,\n        TokenPairParams calldata pairParams\n    ) external payable {\n        // Get the token creation fee\n        uint256 tokenCreationFee = tokenFactory.creationFee();\n\n        // Check if enough ETH was sent for both fees\n        require(msg.value >= launchFee + tokenCreationFee, \"Insufficient fee\");\n\n        // Deduct fee\n        (bool sent, ) = feeCollector.call{value: launchFee}(\"\");\n        require(sent, \"Fee transfer failed\");\n\n        // Create token - the token factory will mint all tokens to msg.sender and pre-approve\n        address tokenAddress = _createToken(tokenParams);\n\n        // Distribute tokens to initial holders\n        _distributeTokens(tokenAddress, tokenParams);\n\n        // Create token pair liquidity\n        (\n            uint amountA,\n            uint amountB,\n            uint liquidity\n        ) = _createLiquidityWithToken(tokenAddress, pairParams);\n\n        // Mark initial distribution as complete\n        _completeInitialDistribution(tokenAddress);\n\n        // Refund any excess ETH\n        if (address(this).balance > 0) {\n            (bool refunded, ) = msg.sender.call{value: address(this).balance}(\n                \"\"\n            );\n            require(refunded, \"Refund failed\");\n        }\n\n        emit LaunchCompleted(tokenAddress, liquidity);\n    }\n\n    function _createToken(\n        TokenParams calldata params\n    ) private returns (address) {\n        return\n            tokenFactory.createToken{value: tokenFactory.creationFee()}(\n                params.name,\n                params.symbol,\n                params.totalSupply,\n                params.initialHolders,\n                params.initialAmounts,\n                liquidityManagerAddress, // Pass the liquidity manager address\n                address(this), // Pass this contract as the launch manager\n                true,\n                msg.sender\n            );\n    }\n\n    function _distributeTokens(\n        address tokenAddress,\n        TokenParams calldata params\n    ) private {\n        IERC20 token = IERC20(tokenAddress);\n\n        // Transfer tokens from the token creator to initial holders\n        // The token has already pre-approved this contract to spend tokens from msg.sender\n        for (uint i = 0; i < params.initialHolders.length; i++) {\n            if (\n                params.initialHolders[i] != address(0) &&\n                params.initialAmounts[i] > 0\n            ) {\n                require(\n                    token.transferFrom(\n                        msg.sender,\n                        params.initialHolders[i],\n                        params.initialAmounts[i]\n                    ),\n                    \"Token transfer failed\"\n                );\n                emit TokenDistributed(\n                    tokenAddress,\n                    params.initialHolders[i],\n                    params.initialAmounts[i]\n                );\n            }\n        }\n    }\n\n    function _completeInitialDistribution(address tokenAddress) private {\n        IToken(tokenAddress).completeInitialDistribution();\n    }\n\n    function _createLiquidityWithEth(\n        address tokenAddress,\n        EthPairParams calldata params,\n        uint256 ethAmount\n    ) private returns (uint amountToken, uint amountETH, uint liquidity) {\n        LiquidityManager liquidityManager = LiquidityManager(\n            liquidityManagerAddress\n        );\n\n        // The liquidity manager is already pre-approved in the token contract\n        // to spend tokens from msg.sender, so no need to transfer or approve again\n\n        return\n            liquidityManager.addLiquidityETH{value: ethAmount}(\n                tokenAddress, // token address (our newly created token)\n                params.tokenAmount, // amount of our token\n                params.tokenAmountMin, // min amount of our token (for slippage)\n                params.ethAmountMin, // min ETH amount (for slippage)\n                params.lockDuration // how long to lock liquidity\n            );\n    }\n\n    function _createLiquidityWithToken(\n        address tokenAddress,\n        TokenPairParams calldata params\n    ) private returns (uint amountA, uint amountB, uint liquidity) {\n        LiquidityManager liquidityManager = LiquidityManager(\n            liquidityManagerAddress\n        );\n\n        // The liquidity manager is already pre-approved in the token contract\n        // to spend tokens from msg.sender, so no need to transfer or approve again\n\n        // For the pair token, we need to transfer it from sender to liquidity manager\n        IERC20 pairToken = IERC20(params.pairToken);\n        require(\n            pairToken.transferFrom(\n                msg.sender,\n                address(this),\n                params.pairAmount\n            ),\n            \"Pair token transfer failed\"\n        );\n\n        // Approve the liquidity manager to spend the pair token\n        pairToken.approve(liquidityManagerAddress, params.pairAmount);\n\n        return\n            liquidityManager.addLiquidity(\n                tokenAddress, // token A (our newly created token)\n                params.pairToken, // token B (the pair token)\n                params.tokenAmount, // amount of token A\n                params.pairAmount, // amount of token B\n                params.tokenAmountMin, // min amount of token A (for slippage)\n                params.pairAmountMin, // min amount of token B (for slippage)\n                params.lockDuration // how long to lock liquidity\n            );\n    }\n}\n"
    },
    "contracts/core/TokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./TokenTemplate.sol\";\nimport \"../interfaces/IToken.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TokenFactory is Ownable {\n    address public feeCollector;\n    uint256 public creationFee;\n\n    mapping(address => address[]) public creatorTokens;\n    address[] public allTokens;\n\n    event TokenCreated(address indexed creator, address tokenAddress);\n    event FeeCollectorUpdated(\n        address indexed oldCollector,\n        address indexed newCollector\n    );\n    event CreationFeeUpdated(uint256 oldFee, uint256 newFee);\n\n    constructor(\n        address _feeCollector,\n        uint256 _creationFee\n    ) Ownable(msg.sender) {\n        // Use OZ Ownable's constructor implicitly\n        feeCollector = _feeCollector;\n        creationFee = _creationFee;\n    }\n\n    function createToken(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply,\n        address[] memory initialHolders,\n        uint256[] memory initialAmounts,\n        address liquidityManager,\n        address launchManager,\n        bool launchWithLiquidity,\n        address initialTokenOwner // Add this parameter\n    ) external payable returns (address) {\n        require(msg.value >= creationFee, \"Insufficient fee\");\n        require(\n            initialHolders.length == initialAmounts.length,\n            \"Holders and amounts mismatch\"\n        );\n\n        // Create new token contract\n        TokenTemplate token = new TokenTemplate(\n            name,\n            symbol,\n            totalSupply,\n            initialTokenOwner,\n            initialHolders,\n            initialAmounts,\n            liquidityManager,\n            launchManager,\n            launchWithLiquidity\n        );\n\n        // Record token creation\n        creatorTokens[msg.sender].push(address(token));\n        allTokens.push(address(token));\n\n        // Pay fee to collector\n        (bool sent, ) = payable(feeCollector).call{value: creationFee}(\"\");\n        require(sent, \"Fee transfer failed\");\n\n        // Refund excess fee\n        if (msg.value > creationFee) {\n            (bool refundSent, ) = payable(msg.sender).call{\n                value: msg.value - creationFee\n            }(\"\");\n            require(refundSent, \"Refund failed\");\n        }\n\n        emit TokenCreated(msg.sender, address(token));\n        return address(token);\n    }\n\n    function getCreatorTokens(\n        address creator\n    ) external view returns (address[] memory) {\n        return creatorTokens[creator];\n    }\n\n    function getCreatorTokenCount(\n        address creator\n    ) external view returns (uint256) {\n        return creatorTokens[creator].length;\n    }\n\n    function getTotalTokenCount() external view returns (uint256) {\n        return allTokens.length;\n    }\n\n    function updateFeeCollector(address _newCollector) external onlyOwner {\n        require(_newCollector != address(0), \"Invalid collector address\");\n        address oldCollector = feeCollector;\n        feeCollector = _newCollector;\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\n    }\n\n    function updateCreationFee(uint256 _newFee) external onlyOwner {\n        uint256 oldFee = creationFee;\n        creationFee = _newFee;\n        emit CreationFeeUpdated(oldFee, _newFee);\n    }\n}\n"
    },
    "contracts/core/TokenTemplate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TokenTemplate is ERC20, Ownable {\n    bool public tradingEnabled;\n    uint256 public launchTime;\n    uint256 public launchBlock;\n\n    // Flag to track initial distribution status\n    bool private _initialDistributionComplete;\n\n    // Store total tokens to be distributed\n    uint256 public tokensToDistribute;\n\n    // Simple whitelist for liquidity manager\n    mapping(address => bool) public isWhitelisted;\n    event TradingEnabled(uint256 timestamp);\n    event InitialDistributionComplete();\n    event AddressWhitelisted(address indexed account, bool status);\n    event LiquidityApproved(address indexed liquidityManager, uint256 amount);\n    event LaunchManagerApproved(address indexed launchManager, uint256 amount);\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply,\n        address _initialOwner,\n        address[] memory initialHolders,\n        uint256[] memory initialAmounts,\n        address liquidityManager,\n        address launchManager,\n        bool launchWithLiquidity \n    ) ERC20(name, symbol) Ownable(_initialOwner) {\n        require(\n            initialHolders.length == initialAmounts.length,\n            \"Arrays length mismatch\"\n        );\n        require(\n            initialHolders.length <= 10,\n            \"Maximum 10 initial holders allowed\"\n        );\n\n        // Calculate tokens to be distributed\n        tokensToDistribute = 0;\n        for (uint i = 0; i < initialHolders.length; i++) {\n            if (initialHolders[i] != address(0) && initialAmounts[i] > 0) {\n                tokensToDistribute += initialAmounts[i];\n            }\n        }\n\n        // Make sure we don't exceed total supply\n        require(\n            tokensToDistribute <= totalSupply,\n            \"Distribution exceeds total supply\"\n        );\n\n        // Mint all tokens to the initial owner\n        _mint(_initialOwner, totalSupply);\n\n        // Whitelist the owner by default\n        isWhitelisted[owner()] = true;\n\n        // Pre-approve the launch manager to spend tokens for distribution\n        // Approval strategy based on the launch type\n        if (launchManager != address(0)) {\n            if (launchWithLiquidity) {\n                // For launches that include liquidity: approve all tokens\n                _approve(_initialOwner, launchManager, totalSupply);\n                emit LaunchManagerApproved(launchManager, totalSupply);\n            } else {\n                // For distribution-only launches: approve only tokens to distribute\n                _approve(_initialOwner, launchManager, tokensToDistribute);\n                emit LaunchManagerApproved(launchManager, tokensToDistribute);\n            }\n        }\n\n        // Approve liquidity manager for liquidity provision with remaining tokens\n        if (liquidityManager != address(0)) {\n            // Calculate remaining tokens for liquidity\n            uint256 remainingTokens = totalSupply - tokensToDistribute;\n\n            // Approve for liquidity provision with remaining tokens\n            _approve(_initialOwner, liquidityManager, remainingTokens);\n            emit LiquidityApproved(liquidityManager, remainingTokens);\n\n            // Whitelist the liquidity manager\n            isWhitelisted[liquidityManager] = true;\n            emit AddressWhitelisted(liquidityManager, true);\n        }\n\n        // Whitelist the launch manager if provided and not already whitelisted\n        if (launchManager != address(0) && launchManager != liquidityManager) {\n            isWhitelisted[launchManager] = true;\n            emit AddressWhitelisted(launchManager, true);\n        }\n    }\n\n    function completeInitialDistribution() external {\n        require(\n            msg.sender == owner() || isWhitelisted[msg.sender],\n            \"Not authorized\"\n        );\n        require(\n            !_initialDistributionComplete,\n            \"Initial distribution already completed\"\n        );\n        _initialDistributionComplete = true;\n        emit InitialDistributionComplete();\n    }\n\n    function enableTrading() external onlyOwner {\n        require(!tradingEnabled, \"Trading already enabled\");\n        tradingEnabled = true;\n        launchTime = block.timestamp;\n        launchBlock = block.number;\n        emit TradingEnabled(launchTime);\n    }\n\n    function whitelistAddress(address account, bool status) public onlyOwner {\n        isWhitelisted[account] = status;\n        emit AddressWhitelisted(account, status);\n    }\n\n    function approveLiquidityManager(\n        address liquidityManager,\n        uint256 amount\n    ) external onlyOwner {\n        require(\n            liquidityManager != address(0),\n            \"Invalid liquidityManager address\"\n        );\n        _approve(msg.sender, liquidityManager, amount);\n        emit LiquidityApproved(liquidityManager, amount);\n    }\n\n    function approveLaunchManager(\n        address launchManager,\n        uint256 amount\n    ) external onlyOwner {\n        require(launchManager != address(0), \"Invalid launchManager address\");\n        _approve(msg.sender, launchManager, amount);\n        emit LaunchManagerApproved(launchManager, amount);\n    }\n}\n"
    },
    "contracts/extensions/Airdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IToken.sol\";\n\n/**\n * @title AirdropManager\n * @dev Manages token airdrops for newly created tokens\n */\ncontract AirdropManager is Ownable {\n    address public feeCollector;\n    uint256 public airdropFee;\n    \n    // Track airdrop information\n    struct AirdropInfo {\n        address token;\n        uint256 totalAmount;\n        uint256 distributedAmount;\n        uint256 recipientCount;\n        uint256 timestamp;\n        bool completed;\n    }\n    \n    // Mapping to track airdrop history by token address\n    mapping(address => AirdropInfo[]) public airdropHistory;\n    \n    // Events\n    event AirdropExecuted(\n        address indexed token,\n        uint256 indexed airdropIndex,\n        uint256 totalAmount,\n        uint256 recipientCount\n    );\n    event AirdropCompleted(\n        address indexed token,\n        uint256 indexed airdropIndex,\n        uint256 totalAmount\n    );\n    event FeeCollectorUpdated(address indexed oldCollector, address indexed newCollector);\n    event AirdropFeeUpdated(uint256 oldFee, uint256 newFee);\n    \n    constructor(address _feeCollector, uint256 _airdropFee) Ownable(msg.sender) {\n        require(_feeCollector != address(0), \"Invalid fee collector\");\n        feeCollector = _feeCollector;\n        airdropFee = _airdropFee;\n    }\n    \n    /**\n     * @dev Execute an airdrop to multiple recipients\n     * @param token The token address to airdrop\n     * @param recipients Array of recipient addresses\n     * @param amounts Array of amounts to distribute to each recipient\n     */\n    function executeAirdrop(\n        address token,\n        address[] calldata recipients,\n        uint256[] calldata amounts\n    ) external payable {\n        require(msg.value >= airdropFee, \"Insufficient fee\");\n        require(token != address(0), \"Invalid token address\");\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\n        require(recipients.length > 0, \"Empty recipients list\");\n        require(recipients.length <= 500, \"Too many recipients at once\");\n        \n        IERC20 tokenContract = IERC20(token);\n        \n        // Calculate total amount to distribute\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += amounts[i];\n        }\n        \n        require(totalAmount > 0, \"No tokens to distribute\");\n        \n        // Transfer tokens from sender to this contract\n        require(\n            tokenContract.transferFrom(msg.sender, address(this), totalAmount),\n            \"Token transfer failed\"\n        );\n        \n        // Create airdrop record\n        uint256 airdropIndex = airdropHistory[token].length;\n        airdropHistory[token].push(\n            AirdropInfo({\n                token: token,\n                totalAmount: totalAmount,\n                distributedAmount: 0,\n                recipientCount: recipients.length,\n                timestamp: block.timestamp,\n                completed: false\n            })\n        );\n        \n        // Distribute tokens batch by batch\n        _distributeTokens(token, airdropIndex, recipients, amounts);\n        \n        // Pay fee to collector\n        (bool sent, ) = payable(feeCollector).call{value: airdropFee}(\"\");\n        require(sent, \"Fee transfer failed\");\n        \n        // Refund excess fee\n        if (msg.value > airdropFee) {\n            (bool refundSent, ) = payable(msg.sender).call{value: msg.value - airdropFee}(\"\");\n            require(refundSent, \"Refund failed\");\n        }\n        \n        emit AirdropExecuted(token, airdropIndex, totalAmount, recipients.length);\n    }\n    \n    /**\n     * @dev Internal function to distribute tokens in batches\n     */\n    function _distributeTokens(\n        address token,\n        uint256 airdropIndex,\n        address[] calldata recipients,\n        uint256[] calldata amounts\n    ) internal {\n        IERC20 tokenContract = IERC20(token);\n        AirdropInfo storage airdropInfo = airdropHistory[token][airdropIndex];\n        \n        // Distribute tokens to recipients\n        for (uint256 i = 0; i < recipients.length; i++) {\n            if (recipients[i] != address(0) && amounts[i] > 0) {\n                require(\n                    tokenContract.transfer(recipients[i], amounts[i]),\n                    \"Token transfer failed\"\n                );\n                airdropInfo.distributedAmount += amounts[i];\n            }\n        }\n        \n        // Mark airdrop as completed\n        airdropInfo.completed = true;\n        \n        emit AirdropCompleted(token, airdropIndex, airdropInfo.distributedAmount);\n    }\n    \n    /**\n     * @dev Get total number of airdrops for a token\n     */\n    function getAirdropCount(address token) external view returns (uint256) {\n        return airdropHistory[token].length;\n    }\n    \n    /**\n     * @dev Get airdrop details by index\n     */\n    function getAirdropInfo(\n        address token,\n        uint256 index\n    ) external view returns (AirdropInfo memory) {\n        require(index < airdropHistory[token].length, \"Invalid airdrop index\");\n        return airdropHistory[token][index];\n    }\n    \n    /**\n     * @dev Admin function to update the fee collector address\n     */\n    function updateFeeCollector(address _newCollector) external onlyOwner {\n        require(_newCollector != address(0), \"Invalid collector address\");\n        address oldCollector = feeCollector;\n        feeCollector = _newCollector;\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\n    }\n    \n    /**\n     * @dev Admin function to update the airdrop fee\n     */\n    function updateAirdropFee(uint256 _newFee) external onlyOwner {\n        uint256 oldFee = airdropFee;\n        airdropFee = _newFee;\n        emit AirdropFeeUpdated(oldFee, _newFee);\n    }\n    \n    /**\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\n     */\n    function rescueTokens(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(tokenAddress).transfer(recipient, amount);\n    }\n    \n    /**\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\n     */\n    function rescueETH(address payable recipient, uint256 amount) external onlyOwner {\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n    }\n}"
    },
    "contracts/extensions/AntiBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title AntiBot\n * @dev Simplified anti-bot measures for token launches\n */\nlibrary AntiBot {\n    struct AntiBotConfig {\n        bool enabled;\n        uint256 maxTxAmount;\n        uint256 maxWalletAmount;\n        mapping(address => bool) blacklisted;\n    }\n    \n    /**\n     * @dev Initializes anti-bot configuration\n     * @param config Anti-bot config storage pointer\n     * @param _maxTxAmount Maximum transaction amount\n     * @param _maxWalletAmount Maximum wallet balance\n     */\n    function initialize(\n        AntiBotConfig storage config,\n        uint256 _maxTxAmount,\n        uint256 _maxWalletAmount\n    ) internal {\n        config.enabled = false; // Start disabled by default\n        config.maxTxAmount = _maxTxAmount;\n        config.maxWalletAmount = _maxWalletAmount;\n    }\n    \n    /**\n     * @dev Applies simplified anti-bot checks\n     */\n    function applyAntiBotLimits(\n        AntiBotConfig storage config,\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 recipientBalance,\n        uint256 launchTime,\n        uint256 launchBlock\n    ) internal view {\n        // Only apply limits if enabled\n        if (!config.enabled) {\n            return;\n        }\n        \n        // Basic transaction amount limit\n        require(amount <= config.maxTxAmount, \"Transfer exceeds transaction limit\");\n        \n        // Basic wallet balance limit\n        require(recipientBalance + amount <= config.maxWalletAmount, \"Transfer exceeds wallet limit\");\n    }\n\n    function blacklistAddress(AntiBotConfig storage config, address account) internal {\n        config.blacklisted[account] = true;\n    }\n    \n    function removeFromBlacklist(AntiBotConfig storage config, address account) internal {\n        config.blacklisted[account] = false;\n    }\n}"
    },
    "contracts/extensions/LiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    \n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    \n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n}\n\ncontract LiquidityManager is Ownable {\n    // State variables\n    IUniswapV2Router02 public immutable router;\n    address public immutable weth;\n    \n    // Structs for organizing data\n    struct LockInfo {\n        address pair;\n        uint256 unlockTime;\n    }\n    \n    struct LiquidityParams {\n        address tokenA;\n        address tokenB;\n        uint256 amountA;\n        uint256 amountB;\n        uint256 amountAMin;\n        uint256 amountBMin;\n        uint256 lockDuration;\n        bool isEthPair;\n        address recipient;\n    }\n    \n    struct TokenPair {\n        address token0;\n        address token1;\n        bool isToken0Weth;\n        bool isToken1Weth;\n    }\n    \n    // Mappings\n    mapping(address => LockInfo) public liquidityLocks;\n    \n    // Events\n    event LiquidityAdded(\n        address indexed tokenA, \n        address indexed tokenB, \n        address pair, \n        uint amountA, \n        uint amountB, \n        uint liquidity\n    );\n    event LiquidityLocked(address indexed pair, uint256 unlockTime);\n    event LiquidityUnlocked(address indexed pair, address recipient);\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pair);\n    event TokensApproved(address token, uint256 amount);\n    event TokensTransferred(address token, address from, address to, uint256 amount);\n    event RefundSent(address token, address recipient, uint256 amount);\n    \n    constructor(address _router) Ownable(msg.sender) {\n        router = IUniswapV2Router02(_router);\n        weth = router.WETH();\n    }\n    \n    // Main entry point for adding liquidity with two ERC20 tokens\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        uint256 lockDuration\n    ) external payable returns (uint amountTokenA, uint amountTokenB, uint liquidity) {\n        require(!(_isWETH(tokenA) && _isWETH(tokenB)), \"Cannot create WETH/WETH pair\");\n        // Create the params struct\n        LiquidityParams memory params = LiquidityParams({\n            tokenA: tokenA,\n            tokenB: tokenB,\n            amountA: amountA,\n            amountB: amountB,\n            amountAMin: amountAMin,\n            amountBMin: amountBMin,\n            lockDuration: lockDuration,\n            isEthPair: false,\n            recipient: lockDuration > 0 ? address(this) : msg.sender\n        });\n        \n        // Step 1: Transfer tokens from user to this contract\n        _transferTokensToContract(params);\n        \n        // Step 2: Approve router to spend tokens\n        _approveTokensForRouter(params);\n        \n        // Step 3: Add liquidity through router\n        (amountTokenA, amountTokenB, liquidity) = _addLiquidityViaRouter(params);\n        \n        // Step 4: Refund excess tokens\n        _refundExcessTokens(params, amountTokenA, amountTokenB);\n        \n        // Step 5: Handle locking if needed\n        _handleLiquidityLocking(params, tokenA, tokenB);\n        \n        return (amountTokenA, amountTokenB, liquidity);\n    }\n    \n    // Main entry point for adding liquidity with ETH and an ERC20 token\n    function addLiquidityETH(\n        address token,\n        uint256 amountToken,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        uint256 lockDuration\n    ) external payable returns (uint amountTokenOut, uint amountETH, uint liquidity) {\n        require(!_isWETH(token), \"Use addLiquidity for WETH pairs\");\n        // Create the params struct\n        LiquidityParams memory params = LiquidityParams({\n            tokenA: token,\n            tokenB: weth,\n            amountA: amountToken,\n            amountB: msg.value,\n            amountAMin: amountTokenMin,\n            amountBMin: amountETHMin,\n            lockDuration: lockDuration,\n            isEthPair: true,\n            recipient: lockDuration > 0 ? address(this) : msg.sender\n        });\n        \n        // Step 1: Transfer token from user to this contract (ETH is already here)\n        _transferTokenToContract(token, amountToken);\n        \n        // Step 2: Approve router to spend token\n        _approveTokenForRouter(token, amountToken);\n        \n        // Step 3: Add liquidity through router\n        (amountTokenOut, amountETH, liquidity) = _addLiquidityETHViaRouter(params);\n        \n        // Step 4: Refund excess tokens and ETH\n        _refundExcessTokenAndETH(params, amountTokenOut, amountETH);\n        \n        // Step 5: Handle locking if needed\n        _handleLiquidityLocking(params, token, weth);\n        \n        return (amountTokenOut, amountETH, liquidity);\n    }\n\n    function _isWETH(address token) private view returns (bool) {\n        return token == weth;\n    }\n    \n    // Helper function 1: Transfer tokens from user to contract\n    function _transferTokensToContract(LiquidityParams memory params) private {\n        if (!_isWETH(params.tokenA)) {\n            _transferTokenToContract(params.tokenA, params.amountA);\n        }\n        \n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\n            _transferTokenToContract(params.tokenB, params.amountB);\n        }\n    }\n    \n    // Helper function for transferring a single token\n    function _transferTokenToContract(address token, uint256 amount) private {\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\n        require(success, \"Transfer of token failed\");\n        emit TokensTransferred(token, msg.sender, address(this), amount);\n    }\n    \n    // Helper function 2: Approve router to spend tokens\n    function _approveTokensForRouter(LiquidityParams memory params) private {\n        if (!_isWETH(params.tokenA)) {\n            _approveTokenForRouter(params.tokenA, params.amountA);\n        }\n        \n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\n            _approveTokenForRouter(params.tokenB, params.amountB);\n        }\n    }\n    \n    // Helper function for approving a single token\n    function _approveTokenForRouter(address token, uint256 amount) private {\n        IERC20(token).approve(address(router), amount);\n        emit TokensApproved(token, amount);\n    }\n    \n    // Helper function 3A: Add liquidity through router for token pairs\n    function _addLiquidityViaRouter(LiquidityParams memory params) \n        private \n        returns (uint amountA, uint amountB, uint liquidity) \n    {\n        return router.addLiquidity(\n            params.tokenA,\n            params.tokenB,\n            params.amountA,\n            params.amountB,\n            params.amountAMin,\n            params.amountBMin,\n            params.recipient,\n            block.timestamp + 300\n        );\n    }\n    \n    // Helper function 3B: Add liquidity through router for ETH pairs\n    function _addLiquidityETHViaRouter(LiquidityParams memory params) \n        private \n        returns (uint amountToken, uint amountETH, uint liquidity) \n    {\n        return router.addLiquidityETH{value: params.amountB}(\n            params.tokenA,\n            params.amountA,\n            params.amountAMin,\n            params.amountBMin,\n            params.recipient,\n            block.timestamp + 300\n        );\n    }\n    \n    // Helper function 4A: Refund excess tokens\n    function _refundExcessTokens(\n        LiquidityParams memory params,\n        uint256 amountAUsed,\n        uint256 amountBUsed\n    ) private {\n        if (params.amountA > amountAUsed) {\n            uint256 refundAmount = params.amountA - amountAUsed;\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\n        }\n        \n        if (!params.isEthPair && params.amountB > amountBUsed) {\n            uint256 refundAmount = params.amountB - amountBUsed;\n            IERC20(params.tokenB).transfer(msg.sender, refundAmount);\n            emit RefundSent(params.tokenB, msg.sender, refundAmount);\n        }\n    }\n    \n    // Helper function 4B: Refund excess token and ETH\n    function _refundExcessTokenAndETH(\n        LiquidityParams memory params,\n        uint256 amountTokenUsed,\n        uint256 amountETHUsed\n    ) private {\n        if (params.amountA > amountTokenUsed) {\n            uint256 refundAmount = params.amountA - amountTokenUsed;\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\n        }\n        \n        if (params.amountB > amountETHUsed) {\n            uint256 refundAmount = params.amountB - amountETHUsed;\n            (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\n            require(success, \"ETH refund failed\");\n            emit RefundSent(address(0), msg.sender, refundAmount); // address(0) represents ETH\n        }\n    }\n    \n    // Helper function 5: Handle liquidity locking if needed\n    function _handleLiquidityLocking(\n        LiquidityParams memory params,\n        address tokenA,\n        address tokenB\n    ) private {\n        if (params.lockDuration > 0) {\n            // Get pair address\n            address pair = IUniswapV2Factory(router.factory()).getPair(tokenA, tokenB);\n            require(pair != address(0), \"Pair does not exist\");\n            \n            // Set up lock info\n            liquidityLocks[pair] = LockInfo({\n                pair: pair,\n                unlockTime: block.timestamp + params.lockDuration\n            });\n            \n            emit LiquidityLocked(pair, block.timestamp + params.lockDuration);\n        }\n    }\n    \n    // Function to unlock liquidity after the lock duration\n    function unlockLiquidity(address pair) external {\n        LockInfo storage lockInfo = liquidityLocks[pair];\n        require(lockInfo.pair == pair, \"Liquidity not locked\");\n        require(block.timestamp >= lockInfo.unlockTime, \"Liquidity still locked\");\n        require(msg.sender == owner(), \"Not authorized\");\n        \n        // Get liquidity amount\n        uint256 liquidity = IERC20(pair).balanceOf(address(this));\n        require(liquidity > 0, \"No liquidity to unlock\");\n        \n        // Transfer LP tokens back to sender\n        IERC20(pair).transfer(msg.sender, liquidity);\n        \n        // Clear lock info\n        delete liquidityLocks[pair];\n        \n        emit LiquidityUnlocked(pair, msg.sender);\n    }\n    \n    // Function to create a pair if it doesn't exist\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n        pair = factory.getPair(tokenA, tokenB);\n        \n        if (pair == address(0)) {\n            pair = factory.createPair(tokenA, tokenB);\n            emit PairCreated(tokenA, tokenB, pair);\n        }\n        \n        return pair;\n    }\n    \n    // Debug function to check token allowances\n    function checkAllowance(address token, address spender) external view returns (uint256) {\n        return IERC20(token).allowance(address(this), spender);\n    }\n    \n    // Debug function to check token balances\n    function checkBalance(address token, address account) external view returns (uint256) {\n        return IERC20(token).balanceOf(account);\n    }\n    \n    // Debug function to transfer tokens directly\n    function debugTransferToken(address token, address to, uint256 amount) external onlyOwner {\n        IERC20(token).transfer(to, amount);\n    }\n    \n    // Debug function to approve tokens directly\n    function debugApproveToken(address token, address spender, uint256 amount) external onlyOwner {\n        IERC20(token).approve(spender, amount);\n    }\n    \n    // Handle received ETH\n    receive() external payable {}\n}"
    },
    "contracts/extensions/TokenSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../interfaces/IToken.sol\";\n\n/**\n * @title TokenSaleManager\n * @dev Manages token sales with features like whitelisting, vesting, and caps\n */\ncontract TokenSaleManager is Ownable, ReentrancyGuard {\n    address public feeCollector;\n    uint256 public saleFee;\n\n    // Track sale configurations\n    struct SaleConfig {\n        address token; // Token being sold\n        address paymentToken; // Token used to buy (address(0) for ETH)\n        uint256 rate; // Rate of token per payment token (or ETH) in base units\n        uint256 hardCap; // Maximum tokens to sell\n        uint256 softCap; // Minimum tokens to sell for sale to be successful\n        uint256 minContribution; // Minimum contribution per buyer\n        uint256 maxContribution; // Maximum contribution per buyer\n        uint256 startTime; // Sale start timestamp\n        uint256 endTime; // Sale end timestamp\n        bool whitelistEnabled; // Whether whitelist is enabled\n        bool vestingEnabled; // Whether vesting is enabled\n        uint256 vestingDuration; // Vesting duration in seconds\n        uint256 vestingStart; // When vesting starts after sale ends\n        bool isActive; // Whether the sale is active\n        bool isCancelled; // Whether the sale is cancelled\n        bool isFinalized; // Whether the sale is finalized\n        uint256 tokensSold; // Total tokens sold\n        uint256 amountRaised; // Total amount raised\n    }\n\n    // Track participant contributions and vesting\n    struct Participation {\n        uint256 contribution; // How much they contributed\n        uint256 tokensOwed; // How many tokens they're owed\n        uint256 tokensClaimed; // How many tokens they've claimed\n        bool refunded; // Whether they've been refunded (if sale fails)\n    }\n\n    // All sales created\n    SaleConfig[] public sales;\n\n    // Mapping: saleId => participant address => participation\n    mapping(uint256 => mapping(address => Participation)) public participations;\n\n    // Mapping: saleId => participant address => whitelist status\n    mapping(uint256 => mapping(address => bool)) public whitelist;\n\n    // Events\n    event SaleCreated(\n        uint256 indexed saleId,\n        address indexed token,\n        address indexed creator,\n        uint256 hardCap,\n        uint256 startTime,\n        uint256 endTime\n    );\n    event WhitelistUpdated(\n        uint256 indexed saleId,\n        address indexed user,\n        bool status\n    );\n    event TokensPurchased(\n        uint256 indexed saleId,\n        address indexed buyer,\n        uint256 contribution,\n        uint256 tokensReceived\n    );\n    event TokensClaimed(\n        uint256 indexed saleId,\n        address indexed user,\n        uint256 amount\n    );\n    event SaleFinalized(\n        uint256 indexed saleId,\n        uint256 tokensSold,\n        uint256 amountRaised\n    );\n    event SaleCancelled(uint256 indexed saleId);\n    event ContributionRefunded(\n        uint256 indexed saleId,\n        address indexed user,\n        uint256 amount\n    );\n    event FeeCollectorUpdated(\n        address indexed oldCollector,\n        address indexed newCollector\n    );\n    event SaleFeeUpdated(uint256 oldFee, uint256 newFee);\n\n    constructor(address _feeCollector, uint256 _saleFee) Ownable(msg.sender) {\n        require(_feeCollector != address(0), \"Invalid fee collector\");\n        feeCollector = _feeCollector;\n        saleFee = _saleFee;\n    }\n\n    /**\n     * @dev Create a new token sale\n     */\n    function createSale(\n        address token,\n        address paymentToken,\n        uint256 rate,\n        uint256 hardCap,\n        uint256 softCap,\n        uint256 minContribution,\n        uint256 maxContribution,\n        uint256 startTime,\n        uint256 endTime,\n        bool whitelistEnabled,\n        bool vestingEnabled,\n        uint256 vestingDuration,\n        uint256 vestingStart\n    ) external payable nonReentrant returns (uint256) {\n        require(msg.value >= saleFee, \"Insufficient fee\");\n        require(token != address(0), \"Invalid token address\");\n        require(rate > 0, \"Invalid rate\");\n        require(hardCap > 0, \"Invalid hard cap\");\n        require(softCap > 0 && softCap <= hardCap, \"Invalid soft cap\");\n        require(minContribution > 0, \"Invalid min contribution\");\n        require(maxContribution >= minContribution, \"Invalid max contribution\");\n        require(\n            startTime > block.timestamp,\n            \"Start time must be in the future\"\n        );\n        require(endTime > startTime, \"End time must be after start time\");\n\n        if (vestingEnabled) {\n            require(vestingDuration > 0, \"Invalid vesting duration\");\n        }\n\n        // Transfer tokens from creator to this contract\n        IERC20 tokenContract = IERC20(token);\n        require(\n            tokenContract.transferFrom(msg.sender, address(this), hardCap),\n            \"Token transfer failed\"\n        );\n\n        // Create new sale\n        uint256 saleId = sales.length;\n        sales.push(\n            SaleConfig({\n                token: token,\n                paymentToken: paymentToken,\n                rate: rate,\n                hardCap: hardCap,\n                softCap: softCap,\n                minContribution: minContribution,\n                maxContribution: maxContribution,\n                startTime: startTime,\n                endTime: endTime,\n                whitelistEnabled: whitelistEnabled,\n                vestingEnabled: vestingEnabled,\n                vestingDuration: vestingDuration,\n                vestingStart: vestingStart,\n                isActive: true,\n                isCancelled: false,\n                isFinalized: false,\n                tokensSold: 0,\n                amountRaised: 0\n            })\n        );\n\n        // Pay fee to collector\n        (bool sent, ) = payable(feeCollector).call{value: saleFee}(\"\");\n        require(sent, \"Fee transfer failed\");\n\n        // Refund excess fee\n        if (msg.value > saleFee) {\n            (bool refundSent, ) = payable(msg.sender).call{\n                value: msg.value - saleFee\n            }(\"\");\n            require(refundSent, \"Refund failed\");\n        }\n\n        emit SaleCreated(\n            saleId,\n            token,\n            msg.sender,\n            hardCap,\n            startTime,\n            endTime\n        );\n\n        return saleId;\n    }\n\n    /**\n     * @dev Whitelist users for a sale\n     */\n    function updateWhitelist(\n        uint256 saleId,\n        address[] calldata users,\n        bool status\n    ) external {\n        require(saleId < sales.length, \"Invalid sale ID\");\n        SaleConfig storage sale = sales[saleId];\n        require(!sale.isFinalized, \"Sale already finalized\");\n        require(\n            msg.sender == owner() || msg.sender == tx.origin,\n            \"Not authorized\"\n        );\n\n        for (uint256 i = 0; i < users.length; i++) {\n            whitelist[saleId][users[i]] = status;\n            emit WhitelistUpdated(saleId, users[i], status);\n        }\n    }\n\n    /**\n     * @dev Buy tokens with ETH\n     */\n    function buyWithETH(uint256 saleId) external payable nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n        require(sale.paymentToken == address(0), \"Not an ETH sale\");\n        require(block.timestamp >= sale.startTime, \"Sale not started\");\n        require(block.timestamp <= sale.endTime, \"Sale ended\");\n        require(msg.value >= sale.minContribution, \"Below min contribution\");\n        require(msg.value > 0, \"Zero contribution\");\n\n        if (sale.whitelistEnabled) {\n            require(whitelist[saleId][msg.sender], \"Not whitelisted\");\n        }\n\n        // Calculate tokens to receive\n        uint256 tokenAmount = (msg.value * sale.rate) / 1 ether;\n        require(\n            sale.tokensSold + tokenAmount <= sale.hardCap,\n            \"Exceeds hard cap\"\n        );\n\n        // Check maximum contribution limit\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        uint256 totalContribution = participation.contribution + msg.value;\n        require(\n            totalContribution <= sale.maxContribution,\n            \"Exceeds max contribution\"\n        );\n\n        // Update sale and participation state\n        sale.tokensSold += tokenAmount;\n        sale.amountRaised += msg.value;\n        participation.contribution += msg.value;\n        participation.tokensOwed += tokenAmount;\n\n        emit TokensPurchased(saleId, msg.sender, msg.value, tokenAmount);\n\n        // If vesting is not enabled, transfer tokens immediately\n        if (!sale.vestingEnabled) {\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\n            participation.tokensClaimed += tokenAmount;\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Buy tokens with ERC20 tokens\n     */\n    function buyWithToken(\n        uint256 saleId,\n        uint256 amount\n    ) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n        require(sale.paymentToken != address(0), \"Not a token sale\");\n        require(block.timestamp >= sale.startTime, \"Sale not started\");\n        require(block.timestamp <= sale.endTime, \"Sale ended\");\n        require(amount >= sale.minContribution, \"Below min contribution\");\n        require(amount > 0, \"Zero contribution\");\n\n        if (sale.whitelistEnabled) {\n            require(whitelist[saleId][msg.sender], \"Not whitelisted\");\n        }\n\n        // Calculate tokens to receive\n        uint256 tokenAmount = (amount * sale.rate) / 10 ** 18;\n        require(\n            sale.tokensSold + tokenAmount <= sale.hardCap,\n            \"Exceeds hard cap\"\n        );\n\n        // Check maximum contribution limit\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        uint256 totalContribution = participation.contribution + amount;\n        require(\n            totalContribution <= sale.maxContribution,\n            \"Exceeds max contribution\"\n        );\n\n        // Transfer payment tokens from user to contract\n        IERC20 paymentToken = IERC20(sale.paymentToken);\n        require(\n            paymentToken.transferFrom(msg.sender, address(this), amount),\n            \"Token transfer failed\"\n        );\n\n        // Update sale and participation state\n        sale.tokensSold += tokenAmount;\n        sale.amountRaised += amount;\n        participation.contribution += amount;\n        participation.tokensOwed += tokenAmount;\n\n        emit TokensPurchased(saleId, msg.sender, amount, tokenAmount);\n\n        // If vesting is not enabled, transfer tokens immediately\n        if (!sale.vestingEnabled) {\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\n            participation.tokensClaimed += tokenAmount;\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Claim vested tokens\n     */\n    function claimTokens(uint256 saleId) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isFinalized, \"Sale not finalized\");\n        require(!sale.isCancelled, \"Sale was cancelled\");\n\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        require(\n            participation.tokensOwed > participation.tokensClaimed,\n            \"No tokens to claim\"\n        );\n\n        uint256 claimableTokens;\n\n        if (sale.vestingEnabled) {\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\n\n            if (block.timestamp < sale.vestingStart) {\n                // Vesting hasn't started yet\n                return;\n            } else if (block.timestamp >= vestingEndTime) {\n                // Vesting completed - claim all remaining tokens\n                claimableTokens =\n                    participation.tokensOwed -\n                    participation.tokensClaimed;\n            } else {\n                // Vesting in progress - calculate proportional amount\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\n                uint256 totalClaimable = (participation.tokensOwed *\n                    vestingElapsed) / sale.vestingDuration;\n                claimableTokens = totalClaimable - participation.tokensClaimed;\n            }\n        } else {\n            // No vesting - claim all tokens\n            claimableTokens =\n                participation.tokensOwed -\n                participation.tokensClaimed;\n        }\n\n        require(claimableTokens > 0, \"No tokens claimable at this time\");\n\n        // Transfer tokens to participant\n        IERC20(sale.token).transfer(msg.sender, claimableTokens);\n        participation.tokensClaimed += claimableTokens;\n\n        emit TokensClaimed(saleId, msg.sender, claimableTokens);\n    }\n\n    /**\n     * @dev Get claimable tokens for a user\n     */\n    function getClaimableTokens(\n        uint256 saleId,\n        address user\n    ) external view returns (uint256) {\n        SaleConfig storage sale = sales[saleId];\n        if (!sale.isFinalized || sale.isCancelled) {\n            return 0;\n        }\n\n        Participation storage participation = participations[saleId][user];\n        if (participation.tokensOwed <= participation.tokensClaimed) {\n            return 0;\n        }\n\n        uint256 claimableTokens;\n\n        if (sale.vestingEnabled) {\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\n\n            if (block.timestamp < sale.vestingStart) {\n                // Vesting hasn't started yet\n                return 0;\n            } else if (block.timestamp >= vestingEndTime) {\n                // Vesting completed - all remaining tokens are claimable\n                claimableTokens =\n                    participation.tokensOwed -\n                    participation.tokensClaimed;\n            } else {\n                // Vesting in progress - calculate proportional amount\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\n                uint256 totalClaimable = (participation.tokensOwed *\n                    vestingElapsed) / sale.vestingDuration;\n                claimableTokens = totalClaimable - participation.tokensClaimed;\n            }\n        } else {\n            // No vesting - all tokens are claimable\n            claimableTokens =\n                participation.tokensOwed -\n                participation.tokensClaimed;\n        }\n\n        return claimableTokens;\n    }\n\n    /**\n     * @dev Finalize a sale\n     */\n    function finalizeSale(uint256 saleId) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n        require(\n            block.timestamp > sale.endTime || sale.tokensSold >= sale.hardCap,\n            \"Sale still in progress\"\n        );\n        require(\n            msg.sender == owner() || msg.sender == tx.origin,\n            \"Not authorized\"\n        );\n\n        bool isSuccessful = sale.amountRaised >= sale.softCap;\n\n        if (isSuccessful) {\n            // Mark sale as finalized and set vesting start time if enabled\n            sale.isFinalized = true;\n            if (sale.vestingEnabled) {\n                sale.vestingStart = block.timestamp;\n            }\n\n            // Transfer raised funds to owner\n            if (sale.paymentToken == address(0)) {\n                // ETH sale\n                (bool sent, ) = payable(owner()).call{value: sale.amountRaised}(\n                    \"\"\n                );\n                require(sent, \"ETH transfer failed\");\n            } else {\n                // Token sale\n                IERC20(sale.paymentToken).transfer(owner(), sale.amountRaised);\n            }\n\n            // Return unsold tokens to owner\n            uint256 unsoldTokens = sale.hardCap - sale.tokensSold;\n            if (unsoldTokens > 0) {\n                IERC20(sale.token).transfer(owner(), unsoldTokens);\n            }\n        } else {\n            // Sale failed - mark as cancelled\n            sale.isCancelled = true;\n\n            // Return all tokens to owner\n            IERC20(sale.token).transfer(owner(), sale.hardCap);\n        }\n\n        sale.isActive = false;\n\n        if (isSuccessful) {\n            emit SaleFinalized(saleId, sale.tokensSold, sale.amountRaised);\n        } else {\n            emit SaleCancelled(saleId);\n        }\n    }\n\n    /**\n     * @dev Manual cancel sale (only owner)\n     */\n    function cancelSale(uint256 saleId) external onlyOwner {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n\n        // Mark sale as cancelled\n        sale.isActive = false;\n        sale.isCancelled = true;\n\n        // Return all tokens to owner\n        IERC20(sale.token).transfer(owner(), sale.hardCap - sale.tokensSold);\n\n        emit SaleCancelled(saleId);\n    }\n\n    /**\n     * @dev Claim refund if sale was unsuccessful\n     */\n    function claimRefund(uint256 saleId) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(!sale.isActive, \"Sale still active\");\n        require(sale.isCancelled, \"Sale not cancelled\");\n\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        require(participation.contribution > 0, \"No contribution found\");\n        require(!participation.refunded, \"Already refunded\");\n\n        uint256 refundAmount = participation.contribution;\n        participation.refunded = true;\n\n        if (sale.paymentToken == address(0)) {\n            // Refund ETH\n            (bool sent, ) = payable(msg.sender).call{value: refundAmount}(\"\");\n            require(sent, \"ETH refund failed\");\n        } else {\n            // Refund tokens\n            IERC20(sale.paymentToken).transfer(msg.sender, refundAmount);\n        }\n\n        emit ContributionRefunded(saleId, msg.sender, refundAmount);\n    }\n\n    /**\n     * @dev Get sale information by ID\n     */\n    function getSaleInfo(\n        uint256 saleId\n    ) external view returns (SaleConfig memory) {\n        require(saleId < sales.length, \"Invalid sale ID\");\n        return sales[saleId];\n    }\n\n    /**\n     * @dev Get the total number of sales\n     */\n    function getSaleCount() external view returns (uint256) {\n        return sales.length;\n    }\n\n    /**\n     * @dev Get participant information\n     */\n    function getParticipation(\n        uint256 saleId,\n        address user\n    ) external view returns (Participation memory) {\n        return participations[saleId][user];\n    }\n\n    /**\n     * @dev Check if a user is whitelisted for a sale\n     */\n    function isWhitelisted(\n        uint256 saleId,\n        address user\n    ) external view returns (bool) {\n        return whitelist[saleId][user];\n    }\n\n    /**\n     * @dev Update fee collector address\n     */\n    function updateFeeCollector(address _newCollector) external onlyOwner {\n        require(_newCollector != address(0), \"Invalid collector address\");\n        address oldCollector = feeCollector;\n        feeCollector = _newCollector;\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\n    }\n\n    /**\n     * @dev Update sale fee\n     */\n    function updateSaleFee(uint256 _newFee) external onlyOwner {\n        uint256 oldFee = saleFee;\n        saleFee = _newFee;\n        emit SaleFeeUpdated(oldFee, _newFee);\n    }\n\n    /**\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\n     */\n    function rescueTokens(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(tokenAddress).transfer(recipient, amount);\n    }\n\n    /**\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\n     */\n    function rescueETH(\n        address payable recipient,\n        uint256 amount\n    ) external onlyOwner {\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n    }\n\n    /**\n     * @dev Handle received ETH\n     */\n    receive() external payable {}\n}\n"
    },
    "contracts/extensions/TokenSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function getAmountsOut(\n        uint amountIn,\n        address[] calldata path\n    ) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(\n        uint amountOut,\n        address[] calldata path\n    ) external view returns (uint[] memory amounts);\n}\n\ncontract TokenSwapContract is ReentrancyGuard, Ownable, Pausable {\n    using SafeERC20 for IERC20;\n\n    IUniswapV2Router public immutable uniswapRouter;\n\n    uint256 public feePercentage = 30; // 0.3% fee (30 basis points)\n    uint256 public constant FEE_DENOMINATOR = 10000;\n\n    struct LimitOrder {\n        address user;\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint256 minAmountOut;\n        uint256 expiry;\n        bool executed;\n        bool cancelled;\n    }\n\n    mapping(uint256 => LimitOrder) public limitOrders;\n    mapping(address => uint256[]) public userOrders;\n    mapping(address => bool) public authorizedExecutors; // Off-chain service addresses\n    uint256 public nextOrderId;\n\n    event MarketSwap(\n        address indexed user,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 fee\n    );\n\n    event LimitOrderCreated(\n        uint256 indexed orderId,\n        address indexed user,\n        address indexed tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 expiry\n    );\n\n    event LimitOrderExecuted(\n        uint256 indexed orderId,\n        address indexed user,\n        address indexed executor,\n        uint256 amountOut\n    );\n\n    event LimitOrderCancelled(uint256 indexed orderId, address indexed user);\n\n    modifier onlyAuthorizedExecutor() {\n        require(authorizedExecutors[msg.sender], \"Not authorized executor\");\n        _;\n    }\n\n    constructor(address _uniswapRouter) Ownable(msg.sender) {\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\n    }\n\n    // Market Order Functions\n    function marketSwapExactTokensForTokens(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        require(amountIn > 0, \"Amount must be greater than 0\");\n        require(deadline >= block.timestamp, \"Deadline exceeded\");\n\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\n\n        // Calculate fee\n        uint256 fee = (amountIn * feePercentage) / FEE_DENOMINATOR;\n        uint256 swapAmount = amountIn - fee;\n\n        // Approve router\n        IERC20(tokenIn).approve(address(uniswapRouter), swapAmount);\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\n            swapAmount,\n            minAmountOut,\n            path,\n            msg.sender,\n            deadline\n        );\n\n        emit MarketSwap(\n            msg.sender,\n            tokenIn,\n            tokenOut,\n            amountIn,\n            amounts[1],\n            fee\n        );\n    }\n\n    function marketSwapTokensForExactTokens(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountOut,\n        uint256 maxAmountIn,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        require(amountOut > 0, \"Amount must be greater than 0\");\n        require(deadline >= block.timestamp, \"Deadline exceeded\");\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        // Get required input amount\n        uint256[] memory amounts = uniswapRouter.getAmountsIn(amountOut, path);\n        uint256 requiredAmountIn = amounts[0];\n\n        // Add fee\n        uint256 totalAmountIn = (requiredAmountIn * FEE_DENOMINATOR) /\n            (FEE_DENOMINATOR - feePercentage);\n        require(totalAmountIn <= maxAmountIn, \"Excessive input amount\");\n\n        IERC20(tokenIn).safeTransferFrom(\n            msg.sender,\n            address(this),\n            totalAmountIn\n        );\n\n        uint256 fee = totalAmountIn - requiredAmountIn;\n\n        // Approve router\n        IERC20(tokenIn).approve(address(uniswapRouter), requiredAmountIn);\n\n        uint256[] memory swapAmounts = uniswapRouter.swapTokensForExactTokens(\n            amountOut,\n            requiredAmountIn,\n            path,\n            msg.sender,\n            deadline\n        );\n\n        emit MarketSwap(\n            msg.sender,\n            tokenIn,\n            tokenOut,\n            totalAmountIn,\n            amountOut,\n            fee\n        );\n    }\n\n    // Limit Order Functions (for off-chain service to trigger)\n    function createLimitOrder(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 expiry\n    ) external nonReentrant whenNotPaused returns (uint256 orderId) {\n        require(amountIn > 0, \"Amount must be greater than 0\");\n        require(expiry > block.timestamp, \"Invalid expiry\");\n\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\n\n        orderId = nextOrderId++;\n\n        limitOrders[orderId] = LimitOrder({\n            user: msg.sender,\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            amountIn: amountIn,\n            minAmountOut: minAmountOut,\n            expiry: expiry,\n            executed: false,\n            cancelled: false\n        });\n\n        userOrders[msg.sender].push(orderId);\n\n        emit LimitOrderCreated(\n            orderId,\n            msg.sender,\n            tokenIn,\n            tokenOut,\n            amountIn,\n            minAmountOut,\n            expiry\n        );\n    }\n\n    // This function will be called by your off-chain service when price conditions are met\n    function executeLimitOrder(\n        uint256 orderId\n    ) external nonReentrant onlyAuthorizedExecutor {\n        LimitOrder storage order = limitOrders[orderId];\n        require(!order.executed && !order.cancelled, \"Order not executable\");\n        require(order.expiry > block.timestamp, \"Order expired\");\n\n        // Calculate fee\n        uint256 fee = (order.amountIn * feePercentage) / FEE_DENOMINATOR;\n        uint256 swapAmount = order.amountIn - fee;\n\n        // Approve router\n        IERC20(order.tokenIn).approve(address(uniswapRouter), swapAmount);\n\n        address[] memory path = new address[](2);\n        path[0] = order.tokenIn;\n        path[1] = order.tokenOut;\n\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\n            swapAmount,\n            order.minAmountOut,\n            path,\n            order.user,\n            block.timestamp + 300 // 5 minute deadline\n        );\n\n        order.executed = true;\n\n        emit LimitOrderExecuted(orderId, order.user, msg.sender, amounts[1]);\n    }\n\n    // Batch execution for efficiency\n    function executeBatchLimitOrders(\n        uint256[] calldata orderIds\n    ) external nonReentrant onlyAuthorizedExecutor {\n        for (uint256 i = 0; i < orderIds.length; i++) {\n            uint256 orderId = orderIds[i];\n            LimitOrder storage order = limitOrders[orderId];\n\n            if (\n                order.executed ||\n                order.cancelled ||\n                order.expiry <= block.timestamp\n            ) {\n                continue; // Skip invalid orders\n            }\n\n            // Calculate fee\n            uint256 fee = (order.amountIn * feePercentage) / FEE_DENOMINATOR;\n            uint256 swapAmount = order.amountIn - fee;\n\n            // Approve router\n            IERC20(order.tokenIn).approve(address(uniswapRouter), swapAmount);\n\n            address[] memory path = new address[](2);\n            path[0] = order.tokenIn;\n            path[1] = order.tokenOut;\n\n            try\n                uniswapRouter.swapExactTokensForTokens(\n                    swapAmount,\n                    order.minAmountOut,\n                    path,\n                    order.user,\n                    block.timestamp + 300\n                )\n            returns (uint256[] memory amounts) {\n                order.executed = true;\n                emit LimitOrderExecuted(\n                    orderId,\n                    order.user,\n                    msg.sender,\n                    amounts[1]\n                );\n            } catch {\n                // If swap fails (e.g., slippage), continue to next order\n                continue;\n            }\n        }\n    }\n\n    function cancelLimitOrder(uint256 orderId) external nonReentrant {\n        LimitOrder storage order = limitOrders[orderId];\n        require(order.user == msg.sender, \"Not order owner\");\n        require(!order.executed && !order.cancelled, \"Order not cancellable\");\n\n        // Return tokens to user\n        IERC20(order.tokenIn).safeTransfer(order.user, order.amountIn);\n\n        order.cancelled = true;\n\n        emit LimitOrderCancelled(orderId, msg.sender);\n    }\n\n    // View Functions\n    function getQuote(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external view returns (uint256 amountOut, uint256 fee) {\n        fee = (amountIn * feePercentage) / FEE_DENOMINATOR;\n        uint256 swapAmount = amountIn - fee;\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        uint256[] memory amounts = uniswapRouter.getAmountsOut(\n            swapAmount,\n            path\n        );\n        amountOut = amounts[1];\n    }\n\n    function getUserOrders(\n        address user\n    ) external view returns (uint256[] memory) {\n        return userOrders[user];\n    }\n\n    function getOrderDetails(\n        uint256 orderId\n    ) external view returns (LimitOrder memory) {\n        return limitOrders[orderId];\n    }\n\n    function getActiveOrdersByUser(\n        address user\n    ) external view returns (uint256[] memory activeOrders) {\n        uint256[] memory allOrders = userOrders[user];\n        uint256 activeCount = 0;\n\n        // Count active orders\n        for (uint256 i = 0; i < allOrders.length; i++) {\n            LimitOrder memory order = limitOrders[allOrders[i]];\n            if (\n                !order.executed &&\n                !order.cancelled &&\n                order.expiry > block.timestamp\n            ) {\n                activeCount++;\n            }\n        }\n\n        // Build active orders array\n        activeOrders = new uint256[](activeCount);\n        uint256 index = 0;\n        for (uint256 i = 0; i < allOrders.length; i++) {\n            LimitOrder memory order = limitOrders[allOrders[i]];\n            if (\n                !order.executed &&\n                !order.cancelled &&\n                order.expiry > block.timestamp\n            ) {\n                activeOrders[index] = allOrders[i];\n                index++;\n            }\n        }\n    }\n\n    // Admin Functions\n    function addAuthorizedExecutor(address executor) external onlyOwner {\n        authorizedExecutors[executor] = true;\n    }\n\n    function removeAuthorizedExecutor(address executor) external onlyOwner {\n        authorizedExecutors[executor] = false;\n    }\n\n    function setFeePercentage(uint256 _feePercentage) external onlyOwner {\n        require(_feePercentage <= 500, \"Fee too high\"); // Max 5%\n        feePercentage = _feePercentage;\n    }\n\n    function withdrawFees(address token, address to) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        // Calculate approximate fees (this is imprecise but gives an estimate)\n        IERC20(token).safeTransfer(to, balance);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // Emergency function to recover stuck tokens or cancel expired orders\n    function emergencyWithdraw(\n        address token,\n        address to,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    function cleanupExpiredOrder(uint256 orderId) external {\n        LimitOrder storage order = limitOrders[orderId];\n        require(order.expiry <= block.timestamp, \"Order not expired\");\n        require(!order.executed && !order.cancelled, \"Order already processed\");\n\n        // Return tokens to user\n        IERC20(order.tokenIn).safeTransfer(order.user, order.amountIn);\n        order.cancelled = true;\n\n        emit LimitOrderCancelled(orderId, order.user);\n    }\n}\n"
    },
    "contracts/extensions/TransactionBundler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TransactionBundler is Ownable {\n\n    struct Transaction {\n        address target;\n        uint256 value;\n        bytes data;\n    }\n    \n    event BundleExecuted(uint256 indexed bundleId, address indexed executor, uint256 transactionCount);\n    event TransactionFailed(uint256 indexed bundleId, uint256 indexed transactionIndex, bytes reason);\n   \n    constructor(address _initialOwner) Ownable(_initialOwner) {}\n   \n    // Execute multiple transactions atomically\n    function executeBundle(Transaction[] calldata transactions) external payable returns (bool) {\n        uint256 bundleId = uint256(keccak256(abi.encode(transactions, block.timestamp)));\n       \n        for (uint256 i = 0; i < transactions.length; i++) {\n            Transaction calldata txn = transactions[i];\n            (bool success, bytes memory returnData) = txn.target.call{value: txn.value}(txn.data);\n            \n            if (!success) {\n                // Emit detailed error information\n                emit TransactionFailed(bundleId, i, returnData);\n                revert(string(returnData));\n            }\n        }\n       \n        // Refund any remaining ETH\n        if (address(this).balance > 0) {\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\n            require(sent, \"ETH refund failed\");\n        }\n       \n        emit BundleExecuted(bundleId, msg.sender, transactions.length);\n        return true;\n    }\n}"
    },
    "contracts/interfaces/IAntiBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IAntiBot\n * @dev Interface for anti-bot protection mechanisms\n */\ninterface IAntiBot {\n    /**\n     * @dev Initializes anti-bot protection mechanisms\n     * @param maxTxAmount Maximum transaction amount\n     * @param maxWalletAmount Maximum wallet holding amount\n     */\n    function initialize(uint256 maxTxAmount, uint256 maxWalletAmount) external;\n    \n    /**\n     * @dev Checks if a transfer is allowed based on anti-bot rules\n     * @param from Sender address\n     * @param to Recipient address\n     * @param amount Transfer amount\n     * @return bool Whether the transfer is allowed\n     */\n    function checkTransfer(address from, address to, uint256 amount) external view returns (bool);\n    \n    /**\n     * @dev Adds an address to the blacklist\n     * @param account Address to blacklist\n     */\n    function blacklistAddress(address account) external;\n    \n    /**\n     * @dev Removes an address from the blacklist\n     * @param account Address to remove from blacklist\n     */\n    function removeFromBlacklist(address account) external;\n    \n    /**\n     * @dev Sets the maximum transaction amount\n     * @param amount Maximum transaction amount\n     */\n    function setMaxTxAmount(uint256 amount) external;\n    \n    /**\n     * @dev Sets the maximum wallet amount\n     * @param amount Maximum wallet amount\n     */\n    function setMaxWalletAmount(uint256 amount) external;\n    \n    /**\n     * @dev Excludes an address from transaction limits\n     * @param account Address to exclude\n     * @param excluded Whether the address should be excluded\n     */\n    function excludeFromLimits(address account, bool excluded) external;\n    \n    /**\n     * @dev Enables or disables anti-bot protection\n     * @param enabled Whether anti-bot protection should be enabled\n     */\n    function setEnabled(bool enabled) external;\n    \n    /**\n     * @dev Gets the current trading status\n     * @return bool Whether trading is enabled\n     */\n    function tradingEnabled() external view returns (bool);\n}"
    },
    "contracts/interfaces/ILiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title ILiquidityManager\n * @dev Interface for liquidity pool creation and management\n */\ninterface ILiquidityManager {\n    /**\n     * @dev Struct to track liquidity lock information\n     */\n    struct LockInfo {\n        uint256 amount;      // Amount of LP tokens locked\n        uint256 unlockTime;  // Timestamp when tokens can be unlocked\n    }\n    \n    /**\n     * @dev Creates a liquidity pool for a token\n     * @param tokenAddress Address of the token contract\n     * @param pairWith Address of the token to pair with (0x0 for ETH)\n     * @param tokenAmount Amount of tokens to add to liquidity\n     * @param lockDuration Duration of liquidity lock in seconds (0 for no lock)\n     * @return address Address of the created liquidity pair\n     */\n    function createLiquidityPool(\n        address tokenAddress,\n        address pairWith,\n        uint256 tokenAmount,\n        uint256 lockDuration\n    ) external payable returns (address);\n    \n    /**\n     * @dev Unlocks liquidity after lock period\n     * @param pair Address of the liquidity pair\n     */\n    function unlockLiquidity(address pair) external;\n    \n    /**\n     * @dev Gets information about a locked liquidity pair\n     * @param pair Address of the liquidity pair\n     * @return LockInfo Struct containing lock information\n     */\n    function getLockInfo(address pair) external view returns (LockInfo memory);\n    \n    /**\n     * @dev Extends the lock duration for a liquidity pair\n     * @param pair Address of the liquidity pair\n     * @param additionalTime Additional time to lock in seconds\n     */\n    function extendLockDuration(address pair, uint256 additionalTime) external;\n    \n    /**\n     * @dev Adds more liquidity to an existing pair\n     * @param tokenAddress Address of the token contract\n     * @param pairWith Address of the paired token (0x0 for ETH)\n     * @param tokenAmount Amount of tokens to add\n     * @return uint256 Amount of LP tokens received\n     */\n    function addLiquidity(\n        address tokenAddress,\n        address pairWith,\n        uint256 tokenAmount\n    ) external payable returns (uint256);\n    \n    /**\n     * @dev Emergency withdraw function (only for owner)\n     * @param token Address of the token to withdraw\n     * @param amount Amount to withdraw\n     */\n    function emergencyWithdraw(address token, uint256 amount) external;\n}"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IToken {\n    function enableTrading() external;\n    function setAntiBotEnabled(bool enabled) external;\n    function setMaxTxAmount(uint256 amount) external;\n    function setMaxWalletAmount(uint256 amount) external;\n    function excludeFromLimits(address account, bool excluded) external;\n    function completeInitialDistribution() external;\n}"
    },
    "contracts/mock/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// Mock ERC20 Token\ncontract ERC20Mock {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 initialSupply\n    ) {\n        name = _name;\n        symbol = _symbol;\n        _mint(msg.sender, initialSupply);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        totalSupply += amount;\n        balanceOf[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            balanceOf[msg.sender] >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        balanceOf[msg.sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public returns (bool) {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            balanceOf[sender] >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        require(\n            allowance[sender][msg.sender] >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n\n        balanceOf[sender] -= amount;\n        balanceOf[recipient] += amount;\n        allowance[sender][msg.sender] -= amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/mock/FailingERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.20;\n\n// Mock ERC20 Token that fails transferFrom\ncontract FailingERC20Mock {\n    string public name;\n    string public symbol;\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public returns (bool) {\n        return false; // Always fail\n    }\n}\n"
    },
    "contracts/mock/MockPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// Mock LP Pair contract for testing\ncontract MockPair {\n    string public name = \"Uniswap V2 Pair\";\n    string public symbol = \"UNI-V2\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    function mint(address to, uint256 amount) public {\n        balanceOf[to] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), to, amount);\n    }\n    \n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        balanceOf[msg.sender] -= amount;\n        balanceOf[to] += amount;\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        if (from != msg.sender) {\n            require(allowance[from][msg.sender] >= amount, \"Insufficient allowance\");\n            allowance[from][msg.sender] -= amount;\n        }\n        \n        require(balanceOf[from] >= amount, \"Insufficient balance\");\n        balanceOf[from] -= amount;\n        balanceOf[to] += amount;\n        \n        emit Transfer(from, to, amount);\n        return true;\n    }\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n}"
    },
    "contracts/mock/MockReciver.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.20;\n\n// Mock contract for testing refund failures\ncontract MockReceiver {\n    // Reject all incoming ETH transfers\n    receive() external payable {\n        revert();\n    }\n}\n"
    },
    "contracts/mock/UniswapV2FactoryMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract UniswapV2FactoryMock {\n    mapping(address => mapping(address => address)) public getPair;\n    address public createPairResponse;\n\n    constructor() {}\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair) {\n        require(tokenA != tokenB, \"UniswapV2: IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2: ZERO_ADDRESS\");\n\n        // Mock response from pair creation\n        pair = createPairResponse;\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        return pair;\n    }\n\n    // Helper function for testing to set pair mapping\n    function setPair(address tokenA, address tokenB, address pair) external {\n        getPair[tokenA][tokenB] = pair;\n        getPair[tokenB][tokenA] = pair;\n    }\n\n    // Helper function for testing to set createPair response\n    function setCreatePairResponse(address pairAddress) external {\n        createPairResponse = pairAddress;\n    }\n}\n"
    },
    "contracts/mock/UniswapV2RouterMock.sol": {
      "content": "// Mock Uniswap V2 Router\ncontract UniswapV2Router02Mock {\n    address public immutable factory;\n    address public immutable WETH;\n\n    struct AddLiquidityResponse {\n        uint amountA;\n        uint amountB;\n        uint liquidity;\n    }\n\n    struct AddLiquidityETHResponse {\n        uint amountToken;\n        uint amountETH;\n        uint liquidity;\n    }\n\n    AddLiquidityResponse public addLiquidityResponse;\n    AddLiquidityETHResponse public addLiquidityETHResponse;\n\n    constructor(address _factory, address _WETH) {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) {\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\n        require(\n            amountADesired >= amountAMin,\n            \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\n        );\n        require(\n            amountBDesired >= amountBMin,\n            \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\n        );\n\n        // Return mock values\n        return (\n            addLiquidityResponse.amountA,\n            addLiquidityResponse.amountB,\n            addLiquidityResponse.liquidity\n        );\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint amountToken, uint amountETH, uint liquidity)\n    {\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\n        require(\n            amountTokenDesired >= amountTokenMin,\n            \"UniswapV2Router: INSUFFICIENT_TOKEN_AMOUNT\"\n        );\n        require(\n            msg.value >= amountETHMin,\n            \"UniswapV2Router: INSUFFICIENT_ETH_AMOUNT\"\n        );\n\n        // Return mock values\n        return (\n            addLiquidityETHResponse.amountToken,\n            addLiquidityETHResponse.amountETH,\n            addLiquidityETHResponse.liquidity\n        );\n    }\n\n    // Helper function for testing to set addLiquidity response\n    function setAddLiquidityResponse(\n        AddLiquidityResponse memory response\n    ) external {\n        addLiquidityResponse = response;\n    }\n\n    // Helper function for testing to set addLiquidityETH response\n    function setAddLiquidityETHResponse(\n        AddLiquidityETHResponse memory response\n    ) external {\n        addLiquidityETHResponse = response;\n    }\n}\n"
    },
    "contracts/mock/WethMock.sol": {
      "content": "// Mock WETH for testing\ncontract WETHMock {\n    string public name = \"Wrapped ETH\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    mapping(address => uint256) public balanceOf;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() {}\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Transfer(address(0), msg.sender, msg.value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(balanceOf[msg.sender] >= value, \"WETH: insufficient balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n}\n"
    },
    "contracts/utils/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract TokenAccessControl is AccessControl {\n    // Predefined roles\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    // Events for role management\n    event AdminRoleGranted(address indexed account, address indexed sender);\n    event OperatorRoleGranted(address indexed account, address indexed sender);\n\n    constructor() {\n        // Grant DEFAULT_ADMIN_ROLE and ADMIN_ROLE to contract deployer\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n    }\n\n    // Modifiers for role-based access control\n    modifier onlyAdmin() {\n        _checkRole(ADMIN_ROLE, msg.sender);\n        _;\n    }\n\n    modifier onlyOperator() {\n        _checkRole(ADMIN_ROLE, msg.sender);\n        _checkRole(OPERATOR_ROLE, msg.sender);\n        _;\n    }\n\n    // Enhanced role management functions\n    function grantAdminRole(address account) external onlyAdmin {\n        grantRole(ADMIN_ROLE, account);\n        emit AdminRoleGranted(account, msg.sender);\n    }\n\n    function grantOperatorRole(address account) external onlyAdmin {\n        grantRole(OPERATOR_ROLE, account);\n        emit OperatorRoleGranted(account, msg.sender);\n    }\n\n    function revokeRole(bytes32 role, address account) public virtual override onlyAdmin {\n        super.revokeRole(role, account);\n        emit RoleRevoked(role, account, msg.sender);\n    }\n\n    // Optional renounce role with admin approval\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(\n            account == msg.sender || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"Cannot renounce role for another account\"\n        );\n        super.renounceRole(role, account);\n    }\n}"
    },
    "contracts/utils/SecurityUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title SecurityUtils\n * @dev Simplified security utility functions for token contracts\n */\nlibrary SecurityUtils {\n    using Address for address;\n\n    /**\n     * @dev Struct to store contract security settings\n     */\n    struct SecuritySettings {\n        bool pausable;\n        bool paused;\n        bool blockContractsByDefault;\n        mapping(address => bool) blockedContracts;\n        mapping(address => bool) trustedContracts;\n    }\n    \n    /**\n     * @dev Initializes security settings with minimal defaults\n     * @param settings Security settings storage pointer\n     */\n    function initialize(SecuritySettings storage settings) internal {\n        settings.pausable = true;\n        settings.paused = false; // Start unpaused by default\n        settings.blockContractsByDefault = false;\n    }\n    \n    /**\n     * @dev Simplified security check that only blocks explicitly blacklisted contracts\n     * @param settings Security settings storage pointer\n     * @param from Sender address\n     * @param to Recipient address\n     * @return bool Whether the transfer passes security checks\n     */\n    function isSecureTransfer(\n        SecuritySettings storage settings,\n        address from,\n        address to\n    ) internal view returns (bool) {\n        // Only block if explicitly paused\n        if (settings.pausable && settings.paused) {\n            return false;\n        }\n        \n        // Only block explicitly blacklisted contracts\n        if (isContract(from) && settings.blockedContracts[from]) {\n            return false;\n        }\n        \n        // Allow all other transfers\n        return true;\n    }\n    \n    /**\n     * @dev Checks if an address is a contract\n     * @param addr Address to check\n     * @return bool Whether the address is a contract\n     */\n    function isContract(address addr) internal view returns (bool) {\n        return addr.code.length > 0;\n    }\n\n    /**\n     * @dev Validates an address is not zero address\n     * @param addr Address to validate\n     * @return bool Whether the address is valid\n     */\n    function isValidAddress(address addr) internal pure returns (bool) {\n        return addr != address(0);\n    }\n    \n    /**\n     * @dev Sets a contract as trusted or blocked\n     * @param settings Security settings storage pointer\n     * @param contractAddr Contract address\n     * @param trusted Whether the contract should be trusted\n     * @param blocked Whether the contract should be blocked\n     */\n    function setContractStatus(\n        SecuritySettings storage settings,\n        address contractAddr,\n        bool trusted,\n        bool blocked\n    ) internal {\n        require(isContract(contractAddr), \"Address is not a contract\");\n        settings.trustedContracts[contractAddr] = trusted;\n        settings.blockedContracts[contractAddr] = blocked;\n    }\n    \n    /**\n     * @dev Toggles the paused state\n     * @param settings Security settings storage pointer\n     * @param paused Whether the contract should be paused\n     */\n    function setPaused(SecuritySettings storage settings, bool paused) internal {\n        require(settings.pausable, \"Contract is not pausable\");\n        settings.paused = paused;\n    }\n\n    function setBlockContractsByDefault(\n        SecuritySettings storage settings,\n        bool blocked\n    ) internal {\n        settings.blockContractsByDefault = blocked;\n    }\n}"
    },
    "contracts/utils/TimeControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TimeControl is Ownable {\n    // uint256 private lastPhase;\n    // uint256 private lastPhaseUpdateTime;\n    uint256 public launchTime;\n    bool public tradingEnabled;\n    \n    // Time-based phases\n    uint256 public  PHASE_1_DURATION = 1 hours;\n    uint256 public  PHASE_2_DURATION = 6 hours;\n    uint256 public  PHASE_3_DURATION = 24 hours;\n    \n    modifier onlyAfterLaunch() {\n        require(tradingEnabled && block.timestamp >= launchTime, \"Trading not yet enabled\");\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n    \n    // Optional: Ability to adjust phase durations\n    function updatePhaseDurations(\n        uint256 phase1Duration,\n        uint256 phase2Duration,\n        uint256 phase3Duration\n    ) external onlyOwner {\n        require(\n            !tradingEnabled, \n            \"Cannot modify durations after trading is enabled\"\n        );\n        \n\n        PHASE_1_DURATION = phase1Duration;\n        PHASE_2_DURATION = phase2Duration;\n        PHASE_3_DURATION = phase3Duration;\n    }\n\n    function getCurrentPhase() public view returns (uint8) {\n        if (!tradingEnabled) return 0;\n        \n        uint256 timeSinceLaunch = block.timestamp - launchTime;\n        \n        if (timeSinceLaunch < PHASE_1_DURATION) {\n            return 1;\n        } else if (timeSinceLaunch < PHASE_1_DURATION + PHASE_2_DURATION) {\n            return 2;\n        } else if (timeSinceLaunch < PHASE_1_DURATION + PHASE_2_DURATION + PHASE_3_DURATION) {\n            return 3;\n        } else {\n            return 4;\n        }\n    }\n\n    // Utility function to check time remaining in current phase\n    function getTimeRemainingInCurrentPhase() external view returns (uint256) {\n        if (!tradingEnabled) return 0;\n        \n        uint256 timeSinceLaunch = block.timestamp - launchTime;\n        uint8 currentPhase = getCurrentPhase();\n        \n        if (currentPhase == 1) {\n            return PHASE_1_DURATION - timeSinceLaunch;\n        } else if (currentPhase == 2) {\n            return (PHASE_1_DURATION + PHASE_2_DURATION) - timeSinceLaunch;\n        } else if (currentPhase == 3) {\n            return (PHASE_1_DURATION + PHASE_2_DURATION + PHASE_3_DURATION) - timeSinceLaunch;\n        }\n        \n        return 0;\n    }\n}\n\n// function getCurrentPhase() public returns (uint256) {\n//     if (block.timestamp > lastPhaseUpdateTime + 5 minutes) {  \n//         lastPhase = _calculatePhase();  // Now calling a private function\n//         lastPhaseUpdateTime = block.timestamp;\n//     }\n//     return lastPhase;\n// }\n\n\n// function calculatePhase() internal view returns (uint256) {\n//     uint256 elapsedTime = block.timestamp - launchTime;  \n\n//     if (elapsedTime < 1 hours) {\n//         return 1;  // Phase 1: Initial Launch\n//     } else if (elapsedTime < 6 hours) {\n//         return 2;  // Phase 2: Early Trading\n//     } else if (elapsedTime < 24 hours) {\n//         return 3;  // Phase 3: Market Stability\n//     } else {\n//         return 4;  // Phase 4: Fully Operational\n//     }\n// }\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}