{
  "address": "0x0E0C6677e4D5446adE7E3472ef15420C85Ef6ecf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_saleFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContributionRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "SaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "SaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "SaleFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        }
      ],
      "name": "SaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "buyWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "cancelSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "claimRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vestingEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        }
      ],
      "name": "createSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "finalizeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getParticipation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensOwed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensClaimed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "refunded",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenSaleManager.Participation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "getSaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "softCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "whitelistEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "vestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingStart",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCancelled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFinalized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "tokensSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRaised",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenSaleManager.SaleConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "participations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensClaimed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "refunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sales",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vestingEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCancelled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFinalized",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "updateSaleFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x929c1a770d84b8f62bed6242d95850ca31fcd61d877b057871b1032aa5d4b678",
  "receipt": {
    "to": null,
    "from": "0xb799B0857C48f96E24e4295FD961043856b847eB",
    "contractAddress": "0x0E0C6677e4D5446adE7E3472ef15420C85Ef6ecf",
    "transactionIndex": 107,
    "gasUsed": "2286939",
    "logsBloom": "0x
    "blockHash": "0x243db3c079b69dae8322a7144807422e3b6b04e113d1a97b6d6a8da45cec35a2",
    "transactionHash": "0x929c1a770d84b8f62bed6242d95850ca31fcd61d877b057871b1032aa5d4b678",
    "logs": [
      {
        "transactionIndex": 107,
        "blockNumber": 8716898,
        "transactionHash": "0x929c1a770d84b8f62bed6242d95850ca31fcd61d877b057871b1032aa5d4b678",
        "address": "0x0E0C6677e4D5446adE7E3472ef15420C85Ef6ecf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b799b0857c48f96e24e4295fd961043856b847eb"
        ],
        "data": "0x",
        "logIndex": 213,
        "blockHash": "0x243db3c079b69dae8322a7144807422e3b6b04e113d1a97b6d6a8da45cec35a2"
      }
    ],
    "blockNumber": 8716898,
    "cumulativeGasUsed": "12930103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb799B0857C48f96E24e4295FD961043856b847eB",
    "100000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f108b379b68c3ab3b3badb37c60ddc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_saleFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContributionRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SaleFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"SaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"finalizeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParticipation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"internalType\":\"struct TokenSaleManager.Participation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"getSaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenSaleManager.SaleConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateSaleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Manages token sales with features like whitelisting, vesting, and caps\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"buyWithETH(uint256)\":{\"details\":\"Buy tokens with ETH\"},\"buyWithToken(uint256,uint256)\":{\"details\":\"Buy tokens with ERC20 tokens\"},\"cancelSale(uint256)\":{\"details\":\"Manual cancel sale (only owner)\"},\"claimRefund(uint256)\":{\"details\":\"Claim refund if sale was unsuccessful\"},\"claimTokens(uint256)\":{\"details\":\"Claim vested tokens\"},\"createSale(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256,uint256)\":{\"details\":\"Create a new token sale\"},\"finalizeSale(uint256)\":{\"details\":\"Finalize a sale\"},\"getClaimableTokens(uint256,address)\":{\"details\":\"Get claimable tokens for a user\"},\"getParticipation(uint256,address)\":{\"details\":\"Get participant information\"},\"getSaleCount()\":{\"details\":\"Get the total number of sales\"},\"getSaleInfo(uint256)\":{\"details\":\"Get sale information by ID\"},\"isWhitelisted(uint256,address)\":{\"details\":\"Check if a user is whitelisted for a sale\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rescueETH(address,uint256)\":{\"details\":\"Emergency function to rescue ETH sent to this contract by mistake\"},\"rescueTokens(address,address,uint256)\":{\"details\":\"Emergency function to rescue ERC20 tokens sent to this contract by mistake\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFeeCollector(address)\":{\"details\":\"Update fee collector address\"},\"updateSaleFee(uint256)\":{\"details\":\"Update sale fee\"},\"updateWhitelist(uint256,address[],bool)\":{\"details\":\"Whitelist users for a sale\"}},\"title\":\"TokenSaleManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/TokenSale.sol\":\"TokenSaleManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/extensions/TokenSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/IToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TokenSaleManager\\r\\n * @dev Manages token sales with features like whitelisting, vesting, and caps\\r\\n */\\r\\ncontract TokenSaleManager is Ownable, ReentrancyGuard {\\r\\n    address public feeCollector;\\r\\n    uint256 public saleFee;\\r\\n\\r\\n    // Track sale configurations\\r\\n    struct SaleConfig {\\r\\n        address token; // Token being sold\\r\\n        address paymentToken; // Token used to buy (address(0) for ETH)\\r\\n        uint256 rate; // Rate of token per payment token (or ETH) in base units\\r\\n        uint256 hardCap; // Maximum tokens to sell\\r\\n        uint256 softCap; // Minimum tokens to sell for sale to be successful\\r\\n        uint256 minContribution; // Minimum contribution per buyer\\r\\n        uint256 maxContribution; // Maximum contribution per buyer\\r\\n        uint256 startTime; // Sale start timestamp\\r\\n        uint256 endTime; // Sale end timestamp\\r\\n        bool whitelistEnabled; // Whether whitelist is enabled\\r\\n        bool vestingEnabled; // Whether vesting is enabled\\r\\n        uint256 vestingDuration; // Vesting duration in seconds\\r\\n        uint256 vestingStart; // When vesting starts after sale ends\\r\\n        bool isActive; // Whether the sale is active\\r\\n        bool isCancelled; // Whether the sale is cancelled\\r\\n        bool isFinalized; // Whether the sale is finalized\\r\\n        uint256 tokensSold; // Total tokens sold\\r\\n        uint256 amountRaised; // Total amount raised\\r\\n    }\\r\\n\\r\\n    // Track participant contributions and vesting\\r\\n    struct Participation {\\r\\n        uint256 contribution; // How much they contributed\\r\\n        uint256 tokensOwed; // How many tokens they're owed\\r\\n        uint256 tokensClaimed; // How many tokens they've claimed\\r\\n        bool refunded; // Whether they've been refunded (if sale fails)\\r\\n    }\\r\\n\\r\\n    // All sales created\\r\\n    SaleConfig[] public sales;\\r\\n\\r\\n    // Mapping: saleId => participant address => participation\\r\\n    mapping(uint256 => mapping(address => Participation)) public participations;\\r\\n\\r\\n    // Mapping: saleId => participant address => whitelist status\\r\\n    mapping(uint256 => mapping(address => bool)) public whitelist;\\r\\n\\r\\n    // Events\\r\\n    event SaleCreated(\\r\\n        uint256 indexed saleId,\\r\\n        address indexed token,\\r\\n        address indexed creator,\\r\\n        uint256 hardCap,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime\\r\\n    );\\r\\n    event WhitelistUpdated(\\r\\n        uint256 indexed saleId,\\r\\n        address indexed user,\\r\\n        bool status\\r\\n    );\\r\\n    event TokensPurchased(\\r\\n        uint256 indexed saleId,\\r\\n        address indexed buyer,\\r\\n        uint256 contribution,\\r\\n        uint256 tokensReceived\\r\\n    );\\r\\n    event TokensClaimed(\\r\\n        uint256 indexed saleId,\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event SaleFinalized(\\r\\n        uint256 indexed saleId,\\r\\n        uint256 tokensSold,\\r\\n        uint256 amountRaised\\r\\n    );\\r\\n    event SaleCancelled(uint256 indexed saleId);\\r\\n    event ContributionRefunded(\\r\\n        uint256 indexed saleId,\\r\\n        address indexed user,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event FeeCollectorUpdated(\\r\\n        address indexed oldCollector,\\r\\n        address indexed newCollector\\r\\n    );\\r\\n    event SaleFeeUpdated(uint256 oldFee, uint256 newFee);\\r\\n\\r\\n    constructor(address _feeCollector, uint256 _saleFee) Ownable(msg.sender) {\\r\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\r\\n        feeCollector = _feeCollector;\\r\\n        saleFee = _saleFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new token sale\\r\\n     */\\r\\n    function createSale(\\r\\n        address token,\\r\\n        address paymentToken,\\r\\n        uint256 rate,\\r\\n        uint256 hardCap,\\r\\n        uint256 softCap,\\r\\n        uint256 minContribution,\\r\\n        uint256 maxContribution,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        bool whitelistEnabled,\\r\\n        bool vestingEnabled,\\r\\n        uint256 vestingDuration,\\r\\n        uint256 vestingStart\\r\\n    ) external payable nonReentrant returns (uint256) {\\r\\n        require(msg.value >= saleFee, \\\"Insufficient fee\\\");\\r\\n        require(token != address(0), \\\"Invalid token address\\\");\\r\\n        require(rate > 0, \\\"Invalid rate\\\");\\r\\n        require(hardCap > 0, \\\"Invalid hard cap\\\");\\r\\n        require(softCap > 0 && softCap <= hardCap, \\\"Invalid soft cap\\\");\\r\\n        require(minContribution > 0, \\\"Invalid min contribution\\\");\\r\\n        require(maxContribution >= minContribution, \\\"Invalid max contribution\\\");\\r\\n        require(\\r\\n            startTime > block.timestamp,\\r\\n            \\\"Start time must be in the future\\\"\\r\\n        );\\r\\n        require(endTime > startTime, \\\"End time must be after start time\\\");\\r\\n\\r\\n        if (vestingEnabled) {\\r\\n            require(vestingDuration > 0, \\\"Invalid vesting duration\\\");\\r\\n        }\\r\\n\\r\\n        // Transfer tokens from creator to this contract\\r\\n        IERC20 tokenContract = IERC20(token);\\r\\n        require(\\r\\n            tokenContract.transferFrom(msg.sender, address(this), hardCap),\\r\\n            \\\"Token transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        // Create new sale\\r\\n        uint256 saleId = sales.length;\\r\\n        sales.push(\\r\\n            SaleConfig({\\r\\n                token: token,\\r\\n                paymentToken: paymentToken,\\r\\n                rate: rate,\\r\\n                hardCap: hardCap,\\r\\n                softCap: softCap,\\r\\n                minContribution: minContribution,\\r\\n                maxContribution: maxContribution,\\r\\n                startTime: startTime,\\r\\n                endTime: endTime,\\r\\n                whitelistEnabled: whitelistEnabled,\\r\\n                vestingEnabled: vestingEnabled,\\r\\n                vestingDuration: vestingDuration,\\r\\n                vestingStart: vestingStart,\\r\\n                isActive: true,\\r\\n                isCancelled: false,\\r\\n                isFinalized: false,\\r\\n                tokensSold: 0,\\r\\n                amountRaised: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // Pay fee to collector\\r\\n        (bool sent, ) = payable(feeCollector).call{value: saleFee}(\\\"\\\");\\r\\n        require(sent, \\\"Fee transfer failed\\\");\\r\\n\\r\\n        // Refund excess fee\\r\\n        if (msg.value > saleFee) {\\r\\n            (bool refundSent, ) = payable(msg.sender).call{\\r\\n                value: msg.value - saleFee\\r\\n            }(\\\"\\\");\\r\\n            require(refundSent, \\\"Refund failed\\\");\\r\\n        }\\r\\n\\r\\n        emit SaleCreated(\\r\\n            saleId,\\r\\n            token,\\r\\n            msg.sender,\\r\\n            hardCap,\\r\\n            startTime,\\r\\n            endTime\\r\\n        );\\r\\n\\r\\n        return saleId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Whitelist users for a sale\\r\\n     */\\r\\n    function updateWhitelist(\\r\\n        uint256 saleId,\\r\\n        address[] calldata users,\\r\\n        bool status\\r\\n    ) external {\\r\\n        require(saleId < sales.length, \\\"Invalid sale ID\\\");\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(!sale.isFinalized, \\\"Sale already finalized\\\");\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == tx.origin,\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n            whitelist[saleId][users[i]] = status;\\r\\n            emit WhitelistUpdated(saleId, users[i], status);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with ETH\\r\\n     */\\r\\n    function buyWithETH(uint256 saleId) external payable nonReentrant {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\r\\n        require(sale.paymentToken == address(0), \\\"Not an ETH sale\\\");\\r\\n        require(block.timestamp >= sale.startTime, \\\"Sale not started\\\");\\r\\n        require(block.timestamp <= sale.endTime, \\\"Sale ended\\\");\\r\\n        require(msg.value >= sale.minContribution, \\\"Below min contribution\\\");\\r\\n        require(msg.value > 0, \\\"Zero contribution\\\");\\r\\n\\r\\n        if (sale.whitelistEnabled) {\\r\\n            require(whitelist[saleId][msg.sender], \\\"Not whitelisted\\\");\\r\\n        }\\r\\n\\r\\n        // Calculate tokens to receive\\r\\n        uint256 tokenAmount = (msg.value * sale.rate) / 1 ether;\\r\\n        require(\\r\\n            sale.tokensSold + tokenAmount <= sale.hardCap,\\r\\n            \\\"Exceeds hard cap\\\"\\r\\n        );\\r\\n\\r\\n        // Check maximum contribution limit\\r\\n        Participation storage participation = participations[saleId][\\r\\n            msg.sender\\r\\n        ];\\r\\n        uint256 totalContribution = participation.contribution + msg.value;\\r\\n        require(\\r\\n            totalContribution <= sale.maxContribution,\\r\\n            \\\"Exceeds max contribution\\\"\\r\\n        );\\r\\n\\r\\n        // Update sale and participation state\\r\\n        sale.tokensSold += tokenAmount;\\r\\n        sale.amountRaised += msg.value;\\r\\n        participation.contribution += msg.value;\\r\\n        participation.tokensOwed += tokenAmount;\\r\\n\\r\\n        emit TokensPurchased(saleId, msg.sender, msg.value, tokenAmount);\\r\\n\\r\\n        // If vesting is not enabled, transfer tokens immediately\\r\\n        if (!sale.vestingEnabled) {\\r\\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\\r\\n            participation.tokensClaimed += tokenAmount;\\r\\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with ERC20 tokens\\r\\n     */\\r\\n    function buyWithToken(\\r\\n        uint256 saleId,\\r\\n        uint256 amount\\r\\n    ) external nonReentrant {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\r\\n        require(sale.paymentToken != address(0), \\\"Not a token sale\\\");\\r\\n        require(block.timestamp >= sale.startTime, \\\"Sale not started\\\");\\r\\n        require(block.timestamp <= sale.endTime, \\\"Sale ended\\\");\\r\\n        require(amount >= sale.minContribution, \\\"Below min contribution\\\");\\r\\n        require(amount > 0, \\\"Zero contribution\\\");\\r\\n\\r\\n        if (sale.whitelistEnabled) {\\r\\n            require(whitelist[saleId][msg.sender], \\\"Not whitelisted\\\");\\r\\n        }\\r\\n\\r\\n        // Calculate tokens to receive\\r\\n        uint256 tokenAmount = (amount * sale.rate) / 10 ** 18;\\r\\n        require(\\r\\n            sale.tokensSold + tokenAmount <= sale.hardCap,\\r\\n            \\\"Exceeds hard cap\\\"\\r\\n        );\\r\\n\\r\\n        // Check maximum contribution limit\\r\\n        Participation storage participation = participations[saleId][\\r\\n            msg.sender\\r\\n        ];\\r\\n        uint256 totalContribution = participation.contribution + amount;\\r\\n        require(\\r\\n            totalContribution <= sale.maxContribution,\\r\\n            \\\"Exceeds max contribution\\\"\\r\\n        );\\r\\n\\r\\n        // Transfer payment tokens from user to contract\\r\\n        IERC20 paymentToken = IERC20(sale.paymentToken);\\r\\n        require(\\r\\n            paymentToken.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Token transfer failed\\\"\\r\\n        );\\r\\n\\r\\n        // Update sale and participation state\\r\\n        sale.tokensSold += tokenAmount;\\r\\n        sale.amountRaised += amount;\\r\\n        participation.contribution += amount;\\r\\n        participation.tokensOwed += tokenAmount;\\r\\n\\r\\n        emit TokensPurchased(saleId, msg.sender, amount, tokenAmount);\\r\\n\\r\\n        // If vesting is not enabled, transfer tokens immediately\\r\\n        if (!sale.vestingEnabled) {\\r\\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\\r\\n            participation.tokensClaimed += tokenAmount;\\r\\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim vested tokens\\r\\n     */\\r\\n    function claimTokens(uint256 saleId) external nonReentrant {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(sale.isFinalized, \\\"Sale not finalized\\\");\\r\\n        require(!sale.isCancelled, \\\"Sale was cancelled\\\");\\r\\n\\r\\n        Participation storage participation = participations[saleId][\\r\\n            msg.sender\\r\\n        ];\\r\\n        require(\\r\\n            participation.tokensOwed > participation.tokensClaimed,\\r\\n            \\\"No tokens to claim\\\"\\r\\n        );\\r\\n\\r\\n        uint256 claimableTokens;\\r\\n\\r\\n        if (sale.vestingEnabled) {\\r\\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\\r\\n\\r\\n            if (block.timestamp < sale.vestingStart) {\\r\\n                // Vesting hasn't started yet\\r\\n                return;\\r\\n            } else if (block.timestamp >= vestingEndTime) {\\r\\n                // Vesting completed - claim all remaining tokens\\r\\n                claimableTokens =\\r\\n                    participation.tokensOwed -\\r\\n                    participation.tokensClaimed;\\r\\n            } else {\\r\\n                // Vesting in progress - calculate proportional amount\\r\\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\\r\\n                uint256 totalClaimable = (participation.tokensOwed *\\r\\n                    vestingElapsed) / sale.vestingDuration;\\r\\n                claimableTokens = totalClaimable - participation.tokensClaimed;\\r\\n            }\\r\\n        } else {\\r\\n            // No vesting - claim all tokens\\r\\n            claimableTokens =\\r\\n                participation.tokensOwed -\\r\\n                participation.tokensClaimed;\\r\\n        }\\r\\n\\r\\n        require(claimableTokens > 0, \\\"No tokens claimable at this time\\\");\\r\\n\\r\\n        // Transfer tokens to participant\\r\\n        IERC20(sale.token).transfer(msg.sender, claimableTokens);\\r\\n        participation.tokensClaimed += claimableTokens;\\r\\n\\r\\n        emit TokensClaimed(saleId, msg.sender, claimableTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get claimable tokens for a user\\r\\n     */\\r\\n    function getClaimableTokens(\\r\\n        uint256 saleId,\\r\\n        address user\\r\\n    ) external view returns (uint256) {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        if (!sale.isFinalized || sale.isCancelled) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        Participation storage participation = participations[saleId][user];\\r\\n        if (participation.tokensOwed <= participation.tokensClaimed) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 claimableTokens;\\r\\n\\r\\n        if (sale.vestingEnabled) {\\r\\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\\r\\n\\r\\n            if (block.timestamp < sale.vestingStart) {\\r\\n                // Vesting hasn't started yet\\r\\n                return 0;\\r\\n            } else if (block.timestamp >= vestingEndTime) {\\r\\n                // Vesting completed - all remaining tokens are claimable\\r\\n                claimableTokens =\\r\\n                    participation.tokensOwed -\\r\\n                    participation.tokensClaimed;\\r\\n            } else {\\r\\n                // Vesting in progress - calculate proportional amount\\r\\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\\r\\n                uint256 totalClaimable = (participation.tokensOwed *\\r\\n                    vestingElapsed) / sale.vestingDuration;\\r\\n                claimableTokens = totalClaimable - participation.tokensClaimed;\\r\\n            }\\r\\n        } else {\\r\\n            // No vesting - all tokens are claimable\\r\\n            claimableTokens =\\r\\n                participation.tokensOwed -\\r\\n                participation.tokensClaimed;\\r\\n        }\\r\\n\\r\\n        return claimableTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finalize a sale\\r\\n     */\\r\\n    function finalizeSale(uint256 saleId) external nonReentrant {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\r\\n        require(\\r\\n            block.timestamp > sale.endTime || sale.tokensSold >= sale.hardCap,\\r\\n            \\\"Sale still in progress\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == tx.origin,\\r\\n            \\\"Not authorized\\\"\\r\\n        );\\r\\n\\r\\n        bool isSuccessful = sale.amountRaised >= sale.softCap;\\r\\n\\r\\n        if (isSuccessful) {\\r\\n            // Mark sale as finalized and set vesting start time if enabled\\r\\n            sale.isFinalized = true;\\r\\n            if (sale.vestingEnabled) {\\r\\n                sale.vestingStart = block.timestamp;\\r\\n            }\\r\\n\\r\\n            // Transfer raised funds to owner\\r\\n            if (sale.paymentToken == address(0)) {\\r\\n                // ETH sale\\r\\n                (bool sent, ) = payable(owner()).call{value: sale.amountRaised}(\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n                require(sent, \\\"ETH transfer failed\\\");\\r\\n            } else {\\r\\n                // Token sale\\r\\n                IERC20(sale.paymentToken).transfer(owner(), sale.amountRaised);\\r\\n            }\\r\\n\\r\\n            // Return unsold tokens to owner\\r\\n            uint256 unsoldTokens = sale.hardCap - sale.tokensSold;\\r\\n            if (unsoldTokens > 0) {\\r\\n                IERC20(sale.token).transfer(owner(), unsoldTokens);\\r\\n            }\\r\\n        } else {\\r\\n            // Sale failed - mark as cancelled\\r\\n            sale.isCancelled = true;\\r\\n\\r\\n            // Return all tokens to owner\\r\\n            IERC20(sale.token).transfer(owner(), sale.hardCap);\\r\\n        }\\r\\n\\r\\n        sale.isActive = false;\\r\\n\\r\\n        if (isSuccessful) {\\r\\n            emit SaleFinalized(saleId, sale.tokensSold, sale.amountRaised);\\r\\n        } else {\\r\\n            emit SaleCancelled(saleId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Manual cancel sale (only owner)\\r\\n     */\\r\\n    function cancelSale(uint256 saleId) external onlyOwner {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\r\\n\\r\\n        // Mark sale as cancelled\\r\\n        sale.isActive = false;\\r\\n        sale.isCancelled = true;\\r\\n\\r\\n        // Return all tokens to owner\\r\\n        IERC20(sale.token).transfer(owner(), sale.hardCap - sale.tokensSold);\\r\\n\\r\\n        emit SaleCancelled(saleId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim refund if sale was unsuccessful\\r\\n     */\\r\\n    function claimRefund(uint256 saleId) external nonReentrant {\\r\\n        SaleConfig storage sale = sales[saleId];\\r\\n        require(!sale.isActive, \\\"Sale still active\\\");\\r\\n        require(sale.isCancelled, \\\"Sale not cancelled\\\");\\r\\n\\r\\n        Participation storage participation = participations[saleId][\\r\\n            msg.sender\\r\\n        ];\\r\\n        require(participation.contribution > 0, \\\"No contribution found\\\");\\r\\n        require(!participation.refunded, \\\"Already refunded\\\");\\r\\n\\r\\n        uint256 refundAmount = participation.contribution;\\r\\n        participation.refunded = true;\\r\\n\\r\\n        if (sale.paymentToken == address(0)) {\\r\\n            // Refund ETH\\r\\n            (bool sent, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\r\\n            require(sent, \\\"ETH refund failed\\\");\\r\\n        } else {\\r\\n            // Refund tokens\\r\\n            IERC20(sale.paymentToken).transfer(msg.sender, refundAmount);\\r\\n        }\\r\\n\\r\\n        emit ContributionRefunded(saleId, msg.sender, refundAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get sale information by ID\\r\\n     */\\r\\n    function getSaleInfo(\\r\\n        uint256 saleId\\r\\n    ) external view returns (SaleConfig memory) {\\r\\n        require(saleId < sales.length, \\\"Invalid sale ID\\\");\\r\\n        return sales[saleId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total number of sales\\r\\n     */\\r\\n    function getSaleCount() external view returns (uint256) {\\r\\n        return sales.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get participant information\\r\\n     */\\r\\n    function getParticipation(\\r\\n        uint256 saleId,\\r\\n        address user\\r\\n    ) external view returns (Participation memory) {\\r\\n        return participations[saleId][user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a user is whitelisted for a sale\\r\\n     */\\r\\n    function isWhitelisted(\\r\\n        uint256 saleId,\\r\\n        address user\\r\\n    ) external view returns (bool) {\\r\\n        return whitelist[saleId][user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update fee collector address\\r\\n     */\\r\\n    function updateFeeCollector(address _newCollector) external onlyOwner {\\r\\n        require(_newCollector != address(0), \\\"Invalid collector address\\\");\\r\\n        address oldCollector = feeCollector;\\r\\n        feeCollector = _newCollector;\\r\\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update sale fee\\r\\n     */\\r\\n    function updateSaleFee(uint256 _newFee) external onlyOwner {\\r\\n        uint256 oldFee = saleFee;\\r\\n        saleFee = _newFee;\\r\\n        emit SaleFeeUpdated(oldFee, _newFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\\r\\n     */\\r\\n    function rescueTokens(\\r\\n        address tokenAddress,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\\r\\n     */\\r\\n    function rescueETH(\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Handle received ETH\\r\\n     */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x2db84a412c9557ff3a04569ddfe3956095206934925c9291028179aeb859ec68\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IToken {\\r\\n    function enableTrading() external;\\r\\n    function setAntiBotEnabled(bool enabled) external;\\r\\n    function setMaxTxAmount(uint256 amount) external;\\r\\n    function setMaxWalletAmount(uint256 amount) external;\\r\\n    function excludeFromLimits(address account, bool excluded) external;\\r\\n    function completeInitialDistribution() external;\\r\\n}\",\"keccak256\":\"0x0a2dfcc5916da4dc74408b1c2eb2eddb9d5ba226a9c62cc478a96aa911dd1bc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200012757601f620027ed38819003918201601f19168301916001600160401b038311848410176200012c578084926040948552833981010312620001275780516001600160a01b0391828216918290036200012757602001519133156200010e576000549060018060a01b0319913383821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600180558215620000cc575060025416176002556003556040516126aa9081620001438239f35b62461bcd60e51b815260206004820152601560248201527f496e76616c69642066656520636f6c6c6563746f7200000000000000000000006044820152606490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063099a04e514611dd1578063178021e314611db3578063301e3ecb14611c185780633089448a146119bf578063337f816c146112b957806346e04a2f146112955780634b25bfce14610c535780634b64218b146112265780635b7baf6414610fb757806364b3b84414610d4d578063715018a614610cf457806377d235b214610ca05780637d22c35c14610c535780638da5cb5b14610c2a57806394dc9cf314610999578063aa92938014610673578063b5f522f71461055e578063bd94b00514610452578063c24521c614610434578063c415b95c1461040b578063cea9d26f1461035b578063d2c35ce8146102a6578063e9c21a15146101ef578063f02a9df8146101c15763f2fde38b0361000e57346101bc5760203660031901126101bc5761014c611e16565b610154611e93565b6001600160a01b039081169081156101a357600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101bc5760403660031901126101bc5760206101e76101df611e2c565b60043561254a565b604051908152f35b346101bc5760403660031901126101bc57610208611e2c565b6000606060405161021881611edc565b8281528260208201528260408201520152600435600052600560205260406000209060018060a01b03166000526020526080604060002060405161025b81611edc565b815491828252600181015460208301908152606060ff600360028501549460408701958652015416930192151583526040519384525160208401525160408301525115156060820152f35b346101bc5760203660031901126101bc576102bf611e16565b6102c7611e93565b6001600160a01b0390811690811561031657600254826001600160601b0360a01b821617600255167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38600080a3005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6c6c6563746f722061646472657373000000000000006044820152606490fd5b346101bc5760603660031901126101bc57600060206103bf61037b611e16565b610383611e2c565b61038b611e93565b60405163a9059cbb60e01b81526001600160a01b039091166004820152604480356024830152909485938492839190820190565b03926001600160a01b03165af180156103ff576103d857005b6100199060203d81116103f8575b6103f08183611ef8565b810190611f1a565b503d6103e6565b6040513d6000823e3d90fd5b346101bc5760003660031901126101bc576002546040516001600160a01b039091168152602090f35b346101bc5760003660031901126101bc576020600454604051908152f35b346101bc5760203660031901126101bc5760043561046e611e93565b6104fa602061047c83611e42565b50600c8101610100815460ff81168061054f575b6104999061209b565b61ffff191617905560018060a01b036104c581835416916000541692600d600382015491015490611fb6565b60405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af180156103ff57610531575b507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a2005b6105489060203d81116103f8576103f08183611ef8565b5081610509565b50600881901c60ff1615610490565b346101bc5760203660031901126101bc576004356004548110156101bc5761058590611e42565b50600160a01b60019003808254169060018301541691600281015460038201546004830154600584015460068501546007860154600887015491600988015493600a89015495600b8a015497600c8b015499600d8c01549b600e01549c6040519e8f91825260208201526040015260608d015260808c015260a08b015260c08a015260e089015261010088015260ff8116151561012088015260081c60ff16151561014087015261016086015261018085015260ff811615156101a08501528060081c60ff1615156101c085015260101c60ff1615156101e084015261020083015261022082015261024090f35b346101bc576020806003193601126101bc5760043590610691611fd9565b61069a82611e42565b50600c8101805460ff81168061098a575b6106b49061209b565b600883015442118015610978575b1561093a576000546001600160a01b039290831633148015610931575b6106e89061203a565b600e8401928584546004870154111593846000146108ba575050815462ff0000191662010000178255600985015460081c60ff166108af575b60018501548116868161084a57505061074f6000808080858154168954905af1610749611f76565b50612632565b856107636003870154600d88015490611fb6565b806107e3575b5050505b805460ff19169055156107b6577f52c66055cf7320a956274f218515348b0138fe56ed320fef5d3d13e1f120dbef92600d60409301549154908351928352820152a25b60018055005b5050507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a26107b0565b86546000805460405163a9059cbb60e01b81529086166001600160a01b031660048201526024810193909352919384926044928492165af180156103ff5761082d575b8581610769565b61084390863d88116103f8576103f08183611ef8565b5086610826565b60008054875460405163a9059cbb60e01b81529186166001600160a01b0316600483015260248201529283918290816044810103925af180156103ff57610892575b5061074f565b6108a890873d89116103f8576103f08183611ef8565b508761088c565b42600b860155610721565b61010061ff001991909116178355855460008054600389015460405163a9059cbb60e01b81529186166001600160a01b03166004830152602482015293849260449284929091165af180156103ff57610914575b5061076d565b61092a90863d88116103f8576103f08183611ef8565b508661090e565b503332146106df565b60405162461bcd60e51b815260048101859052601660248201527553616c65207374696c6c20696e2070726f677265737360501b6044820152606490fd5b50600d830154600384015411156106c2565b50600881901c60ff16156106ab565b6020806003193601126101bc576004356109b1611fd9565b6109ba81611e42565b50916109d5600c84015460ff81169081610c1b575b5061209b565b60018301546001600160a01b0391908216610be5576109fa60078501544210156120d9565b610a0a6008850154421115612118565b610a1a6005850154341015612151565b610a25341515612196565b600984019160ff835416610bbc575b670de0b6b3a7640000610a4b600287015434612214565b049460ff600d820194855495610a70610a648a89612247565b60038601541015612254565b87600052600586526040600020336000528652610aac89604060002098610aa7610a9b348c54612247565b60068901541015612293565b612247565b9055600e8301610abd348254612247565b9055610aca348754612247565b865560018601610adb898254612247565b90556040513481528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c1615610b1f5760018055005b5460405163a9059cbb60e01b8152336004820152602481018790529391839185916044918391600091165af19081156103ff577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c93600292610b9f575b5001610b89858254612247565b90556040519384523393a38080808080806107b0565b610bb590843d86116103f8576103f08183611ef8565b5086610b7c565b83600052600682526040600020336000528252610be060ff604060002054166121d6565b610a34565b6064906040519062461bcd60e51b82526004820152600f60248201526e4e6f7420616e204554482073616c6560881b6044820152fd5b60ff915060081c1615856109cf565b346101bc5760003660031901126101bc576000546040516001600160a01b039091168152602090f35b346101bc5760403660031901126101bc57610c6c611e2c565b600435600052600660205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101bc5760203660031901126101bc577fc1990e461c862d0f130619e2010621437b7c3c5aef23c1231fa4484dbbc4b6b86040600435610cdf611e93565b600354908060035582519182526020820152a1005b346101bc5760003660031901126101bc57610d0d611e93565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101bc5760203660031901126101bc576000610220604051610d6f81611ebf565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e0820152826102008201520152610240610df9600454610df4600435918210611ffc565b611e42565b50610220604051610e0981611ebf565b600e60018060a01b038454169384835260018060a01b036001820154166020840152600281015460408401526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e0840152600881015461010084015260ff6009820154818116151561012086015260081c161515610140840152600a810154610160840152600b81015461018084015260ff600c82015481811615156101a0860152818160081c1615156101c086015260101c1615156101e0840152600d81015461020084015201548282015260405192835260018060a01b03602082015116602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015160e0840152610100810151610100840152610120810151151561012084015261014081015115156101408401526101608101516101608401526101808101516101808401526101a081015115156101a08401526101c081015115156101c08401526101e081015115156101e08401526102008101516102008401520151610220820152f35b346101bc576020806003193601126101bc57600435610fd4611fd9565b610fdd81611e42565b5091600c83015460ff81166111ed5760081c60ff16156111b45781600052600581526040600020336000528152604060002092835493841561117757600301805460ff811661113f5760ff1916600190811790915501546001600160a01b0316806110c45750600080808086335af1611054611f76565b501561108c577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f905b6040519384523393a360018055005b6064906040519062461bcd60e51b825260048201526011602482015270115512081c99599d5b990819985a5b1959607a1b6044820152fd5b60405163a9059cbb60e01b81523360048201526024810185905291908190839060449082906000905af19182156103ff577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f92611122575b5061107d565b61113890823d84116103f8576103f08183611ef8565b508461111c565b60405162461bcd60e51b815260048101859052601060248201526f105b1c9958591e481c99599d5b99195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018490526015602482015274139bc818dbdb9d1c9a589d5d1a5bdb88199bdd5b99605a1b6044820152606490fd5b6064906040519062461bcd60e51b82526004820152601260248201527114d85b19481b9bdd0818d85b98d95b1b195960721b6044820152fd5b60405162461bcd60e51b815260048101839052601160248201527053616c65207374696c6c2061637469766560781b6044820152606490fd5b346101bc5760403660031901126101bc5761123f611e2c565b600435600052600560205260406000209060018060a01b03166000526020526080604060002080549060018101549060ff6003600283015492015416916040519384526020840152604083015215156060820152f35b346101bc5760203660031901126101bc576112ae611fd9565b6107b06004356122df565b6101a03660031901126101bc576112ce611e16565b6112d6611e2c565b610124359081151582036101bc576101443580151581036101bc576112f9611fd9565b6003543410611987576001600160a01b0384161561194a576044351561191657606435156118de576084351515806118d0575b156118985760a435156118535760a43560c4351061180e574260e43511156117ca5760e43561010435111561177b578061172e575b6040516323b872dd60e01b815233600482015230602482015260648035604483015260209082908160006001600160a01b038a165af180156103ff576113af9160009161170f575b50611f32565b60045492604051926113c084611ebf565b6001600160a01b03868116855216602084015260443560408401526064356060840152608435608084015260a43560a084015260c43560c084015260e43560e08401526101043561010084015215156101208301521515610140820152610164356101608201526101843561018082015260016101a082015260006101c082018190526101e082018190526102008201819052610220820152680100000000000000008210156116f9576001820160045561147a82611e42565b9190916116e357610220600e9160018060a01b038151166001600160601b0360a01b9081865416178555600185019060018060a01b036020840151169082541617905560408101516002850155606081015160038501556080810151600485015560a0810151600585015560c0810151600685015560e081015160078501556101008101516008850155611544600985016115286101208401511515829060ff801983541691151516179055565b610140830151815461ff00191690151560081b61ff0016179055565b610160810151600a850155610180810151600b850155600c840161157b6101a08301511515829060ff801983541691151516179055565b6101c0820151815461ff00191690151560081b61ff00161781556101e0820151815462ff0000191690151560101b62ff000016179055610200810151600d8501550151910155600254600354600091829182918291906001600160a01b03165af16115e4611f76565b50156116a85760035480341161164d575b50602091604051606435815260e43584820152610104356040820152827f68196e1e9193049a9f69ac802f2e2bf089bfe2d7f7071e492205128671544d736060339460018060a01b031693a460018055604051908152f35b6000808061165c819434611fb6565b335af1611667611f76565b501561167357826115f5565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611728915060203d6020116103f8576103f08183611ef8565b866113a9565b610164356113615760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67206475726174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f53746172742074696d65206d75737420626520696e20746865206675747572656044820152fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d696e20636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f0496e76616c696420736f6674206361760841b6044820152606490fd5b50606435608435111561132c565b60405162461bcd60e51b815260206004820152601060248201526f0496e76616c69642068617264206361760841b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b346101bc5760403660031901126101bc576024356004356119de611fd9565b6119e781611e42565b50611a00600c82015460ff81169081610c1b575061209b565b60018101546001600160a01b0390811693908415611be057611a2860078401544210156120d9565b611a386008840154421115612118565b611a486005840154831015612151565b611a53821515612196565b600983019260ff845416611bb5575b670de0b6b3a7640000611a79600283015485612214565b0495600d820194611a9a611a8e898854612247565b60038501541015612254565b86600052602094600586526040600020336000528652604060002096611ad0611ac4838a54612247565b60068701541015612293565b6040516323b872dd60e01b815233600482015230602482015260448101839052938790859060649082906000905af19384156103ff5760ff94611b1a91600091611b985750611f32565b611b258a8254612247565b9055600e8401611b36828254612247565b9055611b43818854612247565b875560018701611b548a8254612247565b90556040519081528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c1615610b1f5760018055005b611baf9150893d8b116103f8576103f08183611ef8565b8c6113a9565b846000526006602052604060002033600052602052611bdb60ff604060002054166121d6565b611a62565b60405162461bcd60e51b815260206004820152601060248201526f4e6f74206120746f6b656e2073616c6560801b6044820152606490fd5b346101bc5760603660031901126101bc576024803567ffffffffffffffff6004358183116101bc57366023840112156101bc5782600401359182116101bc57838301928436918460051b0101116101bc5760443591821515928381036101bc57611c856004548410611ffc565b60ff600c611c9285611e42565b50015460101c16611d76576000546001600160a01b0390811633148015611d6d575b611cbd9061203a565b60005b838110611cc957005b8460005286857f6ac489d45eb8bf1a970353adde961baf16a2ab4af3d2a8f0cb488b0cd30af85684611d3e611d14868a60209760068952604060002086611d19611d14868686612077565b612087565b166000528952611d398c60406000209060ff801983541691151516179055565b612077565b16926040518a8152a36000198114611d5857600101611cc0565b87634e487b7160e01b60005260116004526000fd5b50333214611cb4565b60405162461bcd60e51b8152602060048201526016818801527514d85b1948185b1c9958591e48199a5b985b1a5e995960521b6044820152606490fd5b346101bc5760003660031901126101bc576020600354604051908152f35b346101bc5760403660031901126101bc576004356001600160a01b038116908190036101bc57600080808061001994611e08611e93565b602435905af1610749611f76565b600435906001600160a01b03821682036101bc57565b602435906001600160a01b03821682036101bc57565b600454811015611e7d57600f906004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b03163303611ea757565b60405163118cdaa760e01b8152336004820152602490fd5b610240810190811067ffffffffffffffff8211176116f957604052565b6080810190811067ffffffffffffffff8211176116f957604052565b90601f8019910116810190811067ffffffffffffffff8211176116f957604052565b908160209103126101bc575180151581036101bc5790565b15611f3957565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b3d15611fb1573d9067ffffffffffffffff82116116f95760405191611fa5601f8201601f191660200184611ef8565b82523d6000602084013e565b606090565b91908203918211611fc357565b634e487b7160e01b600052601160045260246000fd5b600260015414611fea576002600155565b604051633ee5aeb560e01b8152600490fd5b1561200357565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cd85b19481251608a1b6044820152606490fd5b1561204157565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b9190811015611e7d5760051b0190565b356001600160a01b03811681036101bc5790565b156120a257565b60405162461bcd60e51b815260206004820152600f60248201526e53616c65206e6f742061637469766560881b6044820152606490fd5b156120e057565b60405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606490fd5b1561211f57565b60405162461bcd60e51b815260206004820152600a60248201526914d85b1948195b99195960b21b6044820152606490fd5b1561215857565b60405162461bcd60e51b81526020600482015260166024820152752132b637bb9036b4b71031b7b73a3934b13aba34b7b760511b6044820152606490fd5b1561219d57565b60405162461bcd60e51b81526020600482015260116024820152702d32b9379031b7b73a3934b13aba34b7b760791b6044820152606490fd5b156121dd57565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606490fd5b81810292918115918404141715611fc357565b8115612231570490565b634e487b7160e01b600052601260045260246000fd5b91908201809211611fc357565b1561225b57565b60405162461bcd60e51b815260206004820152601060248201526f0457863656564732068617264206361760841b6044820152606490fd5b1561229a57565b60405162461bcd60e51b815260206004820152601860248201527f45786365656473206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b906122e982611e42565b50600c81015460ff8160101c16156125105760081c60ff166124d657600092808452602060058152604080862033875282528086206002600182015491019081548082111561249d57600987015460081c60ff161561249457600b87015491600a8801546123578185612247565b84421060001461236f57505050505050505050509050565b421061246a57506123809250611fb6565b945b85156124285754825163a9059cbb60e01b815233600482015260248101879052908490829060449082908c906001600160a01b03165af1801561241e577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c9596979850612401575b506123f6868254612247565b9055519384523393a3565b61241790843d86116103f8576103f08183611ef8565b50386123ea565b83513d8a823e3d90fd5b60648484519062461bcd60e51b825280600483015260248201527f4e6f20746f6b656e7320636c61696d61626c6520617420746869732074696d656044820152fd5b6124846124899261247e61248e9642611fb6565b90612214565b612227565b611fb6565b94612382565b61248e91611fb6565b835162461bcd60e51b81526004810186905260126024820152714e6f20746f6b656e7320746f20636c61696d60701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481dd85cc818d85b98d95b1b195960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481b9bdd08199a5b985b1a5e995960721b6044820152606490fd5b9061255482611e42565b5090600c82015460ff8160101c1615908115612624575b5061261c5760009283526005602052604083209060018060a01b031683526020526040822060026001820154910154908181111561261657600983015460081c60ff161561260957600a600b8401549301546125c78185612247565b8442106000146125d957505050505090565b939450919290919042106125f557506125f29250611fb6565b90565b6124846124899261247e6125f29642611fb6565b9091506125f29250611fb6565b50505090565b505050600090565b60ff915060081c163861256b565b1561263957565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fdfea264697066735822122010bfd80d184e0df8d1902d19920bfb8a089441a375e2311adba84768ea9dc81b64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063099a04e514611dd1578063178021e314611db3578063301e3ecb14611c185780633089448a146119bf578063337f816c146112b957806346e04a2f146112955780634b25bfce14610c535780634b64218b146112265780635b7baf6414610fb757806364b3b84414610d4d578063715018a614610cf457806377d235b214610ca05780637d22c35c14610c535780638da5cb5b14610c2a57806394dc9cf314610999578063aa92938014610673578063b5f522f71461055e578063bd94b00514610452578063c24521c614610434578063c415b95c1461040b578063cea9d26f1461035b578063d2c35ce8146102a6578063e9c21a15146101ef578063f02a9df8146101c15763f2fde38b0361000e57346101bc5760203660031901126101bc5761014c611e16565b610154611e93565b6001600160a01b039081169081156101a357600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101bc5760403660031901126101bc5760206101e76101df611e2c565b60043561254a565b604051908152f35b346101bc5760403660031901126101bc57610208611e2c565b6000606060405161021881611edc565b8281528260208201528260408201520152600435600052600560205260406000209060018060a01b03166000526020526080604060002060405161025b81611edc565b815491828252600181015460208301908152606060ff600360028501549460408701958652015416930192151583526040519384525160208401525160408301525115156060820152f35b346101bc5760203660031901126101bc576102bf611e16565b6102c7611e93565b6001600160a01b0390811690811561031657600254826001600160601b0360a01b821617600255167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38600080a3005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6c6c6563746f722061646472657373000000000000006044820152606490fd5b346101bc5760603660031901126101bc57600060206103bf61037b611e16565b610383611e2c565b61038b611e93565b60405163a9059cbb60e01b81526001600160a01b039091166004820152604480356024830152909485938492839190820190565b03926001600160a01b03165af180156103ff576103d857005b6100199060203d81116103f8575b6103f08183611ef8565b810190611f1a565b503d6103e6565b6040513d6000823e3d90fd5b346101bc5760003660031901126101bc576002546040516001600160a01b039091168152602090f35b346101bc5760003660031901126101bc576020600454604051908152f35b346101bc5760203660031901126101bc5760043561046e611e93565b6104fa602061047c83611e42565b50600c8101610100815460ff81168061054f575b6104999061209b565b61ffff191617905560018060a01b036104c581835416916000541692600d600382015491015490611fb6565b60405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af180156103ff57610531575b507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a2005b6105489060203d81116103f8576103f08183611ef8565b5081610509565b50600881901c60ff1615610490565b346101bc5760203660031901126101bc576004356004548110156101bc5761058590611e42565b50600160a01b60019003808254169060018301541691600281015460038201546004830154600584015460068501546007860154600887015491600988015493600a89015495600b8a015497600c8b015499600d8c01549b600e01549c6040519e8f91825260208201526040015260608d015260808c015260a08b015260c08a015260e089015261010088015260ff8116151561012088015260081c60ff16151561014087015261016086015261018085015260ff811615156101a08501528060081c60ff1615156101c085015260101c60ff1615156101e084015261020083015261022082015261024090f35b346101bc576020806003193601126101bc5760043590610691611fd9565b61069a82611e42565b50600c8101805460ff81168061098a575b6106b49061209b565b600883015442118015610978575b1561093a576000546001600160a01b039290831633148015610931575b6106e89061203a565b600e8401928584546004870154111593846000146108ba575050815462ff0000191662010000178255600985015460081c60ff166108af575b60018501548116868161084a57505061074f6000808080858154168954905af1610749611f76565b50612632565b856107636003870154600d88015490611fb6565b806107e3575b5050505b805460ff19169055156107b6577f52c66055cf7320a956274f218515348b0138fe56ed320fef5d3d13e1f120dbef92600d60409301549154908351928352820152a25b60018055005b5050507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a26107b0565b86546000805460405163a9059cbb60e01b81529086166001600160a01b031660048201526024810193909352919384926044928492165af180156103ff5761082d575b8581610769565b61084390863d88116103f8576103f08183611ef8565b5086610826565b60008054875460405163a9059cbb60e01b81529186166001600160a01b0316600483015260248201529283918290816044810103925af180156103ff57610892575b5061074f565b6108a890873d89116103f8576103f08183611ef8565b508761088c565b42600b860155610721565b61010061ff001991909116178355855460008054600389015460405163a9059cbb60e01b81529186166001600160a01b03166004830152602482015293849260449284929091165af180156103ff57610914575b5061076d565b61092a90863d88116103f8576103f08183611ef8565b508661090e565b503332146106df565b60405162461bcd60e51b815260048101859052601660248201527553616c65207374696c6c20696e2070726f677265737360501b6044820152606490fd5b50600d830154600384015411156106c2565b50600881901c60ff16156106ab565b6020806003193601126101bc576004356109b1611fd9565b6109ba81611e42565b50916109d5600c84015460ff81169081610c1b575b5061209b565b60018301546001600160a01b0391908216610be5576109fa60078501544210156120d9565b610a0a6008850154421115612118565b610a1a6005850154341015612151565b610a25341515612196565b600984019160ff835416610bbc575b670de0b6b3a7640000610a4b600287015434612214565b049460ff600d820194855495610a70610a648a89612247565b60038601541015612254565b87600052600586526040600020336000528652610aac89604060002098610aa7610a9b348c54612247565b60068901541015612293565b612247565b9055600e8301610abd348254612247565b9055610aca348754612247565b865560018601610adb898254612247565b90556040513481528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c1615610b1f5760018055005b5460405163a9059cbb60e01b8152336004820152602481018790529391839185916044918391600091165af19081156103ff577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c93600292610b9f575b5001610b89858254612247565b90556040519384523393a38080808080806107b0565b610bb590843d86116103f8576103f08183611ef8565b5086610b7c565b83600052600682526040600020336000528252610be060ff604060002054166121d6565b610a34565b6064906040519062461bcd60e51b82526004820152600f60248201526e4e6f7420616e204554482073616c6560881b6044820152fd5b60ff915060081c1615856109cf565b346101bc5760003660031901126101bc576000546040516001600160a01b039091168152602090f35b346101bc5760403660031901126101bc57610c6c611e2c565b600435600052600660205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101bc5760203660031901126101bc577fc1990e461c862d0f130619e2010621437b7c3c5aef23c1231fa4484dbbc4b6b86040600435610cdf611e93565b600354908060035582519182526020820152a1005b346101bc5760003660031901126101bc57610d0d611e93565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101bc5760203660031901126101bc576000610220604051610d6f81611ebf565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e0820152826102008201520152610240610df9600454610df4600435918210611ffc565b611e42565b50610220604051610e0981611ebf565b600e60018060a01b038454169384835260018060a01b036001820154166020840152600281015460408401526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e0840152600881015461010084015260ff6009820154818116151561012086015260081c161515610140840152600a810154610160840152600b81015461018084015260ff600c82015481811615156101a0860152818160081c1615156101c086015260101c1615156101e0840152600d81015461020084015201548282015260405192835260018060a01b03602082015116602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015160c084015260e081015160e0840152610100810151610100840152610120810151151561012084015261014081015115156101408401526101608101516101608401526101808101516101808401526101a081015115156101a08401526101c081015115156101c08401526101e081015115156101e08401526102008101516102008401520151610220820152f35b346101bc576020806003193601126101bc57600435610fd4611fd9565b610fdd81611e42565b5091600c83015460ff81166111ed5760081c60ff16156111b45781600052600581526040600020336000528152604060002092835493841561117757600301805460ff811661113f5760ff1916600190811790915501546001600160a01b0316806110c45750600080808086335af1611054611f76565b501561108c577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f905b6040519384523393a360018055005b6064906040519062461bcd60e51b825260048201526011602482015270115512081c99599d5b990819985a5b1959607a1b6044820152fd5b60405163a9059cbb60e01b81523360048201526024810185905291908190839060449082906000905af19182156103ff577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f92611122575b5061107d565b61113890823d84116103f8576103f08183611ef8565b508461111c565b60405162461bcd60e51b815260048101859052601060248201526f105b1c9958591e481c99599d5b99195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018490526015602482015274139bc818dbdb9d1c9a589d5d1a5bdb88199bdd5b99605a1b6044820152606490fd5b6064906040519062461bcd60e51b82526004820152601260248201527114d85b19481b9bdd0818d85b98d95b1b195960721b6044820152fd5b60405162461bcd60e51b815260048101839052601160248201527053616c65207374696c6c2061637469766560781b6044820152606490fd5b346101bc5760403660031901126101bc5761123f611e2c565b600435600052600560205260406000209060018060a01b03166000526020526080604060002080549060018101549060ff6003600283015492015416916040519384526020840152604083015215156060820152f35b346101bc5760203660031901126101bc576112ae611fd9565b6107b06004356122df565b6101a03660031901126101bc576112ce611e16565b6112d6611e2c565b610124359081151582036101bc576101443580151581036101bc576112f9611fd9565b6003543410611987576001600160a01b0384161561194a576044351561191657606435156118de576084351515806118d0575b156118985760a435156118535760a43560c4351061180e574260e43511156117ca5760e43561010435111561177b578061172e575b6040516323b872dd60e01b815233600482015230602482015260648035604483015260209082908160006001600160a01b038a165af180156103ff576113af9160009161170f575b50611f32565b60045492604051926113c084611ebf565b6001600160a01b03868116855216602084015260443560408401526064356060840152608435608084015260a43560a084015260c43560c084015260e43560e08401526101043561010084015215156101208301521515610140820152610164356101608201526101843561018082015260016101a082015260006101c082018190526101e082018190526102008201819052610220820152680100000000000000008210156116f9576001820160045561147a82611e42565b9190916116e357610220600e9160018060a01b038151166001600160601b0360a01b9081865416178555600185019060018060a01b036020840151169082541617905560408101516002850155606081015160038501556080810151600485015560a0810151600585015560c0810151600685015560e081015160078501556101008101516008850155611544600985016115286101208401511515829060ff801983541691151516179055565b610140830151815461ff00191690151560081b61ff0016179055565b610160810151600a850155610180810151600b850155600c840161157b6101a08301511515829060ff801983541691151516179055565b6101c0820151815461ff00191690151560081b61ff00161781556101e0820151815462ff0000191690151560101b62ff000016179055610200810151600d8501550151910155600254600354600091829182918291906001600160a01b03165af16115e4611f76565b50156116a85760035480341161164d575b50602091604051606435815260e43584820152610104356040820152827f68196e1e9193049a9f69ac802f2e2bf089bfe2d7f7071e492205128671544d736060339460018060a01b031693a460018055604051908152f35b6000808061165c819434611fb6565b335af1611667611f76565b501561167357826115f5565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611728915060203d6020116103f8576103f08183611ef8565b866113a9565b610164356113615760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67206475726174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f53746172742074696d65206d75737420626520696e20746865206675747572656044820152fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d696e20636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f0496e76616c696420736f6674206361760841b6044820152606490fd5b50606435608435111561132c565b60405162461bcd60e51b815260206004820152601060248201526f0496e76616c69642068617264206361760841b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b346101bc5760403660031901126101bc576024356004356119de611fd9565b6119e781611e42565b50611a00600c82015460ff81169081610c1b575061209b565b60018101546001600160a01b0390811693908415611be057611a2860078401544210156120d9565b611a386008840154421115612118565b611a486005840154831015612151565b611a53821515612196565b600983019260ff845416611bb5575b670de0b6b3a7640000611a79600283015485612214565b0495600d820194611a9a611a8e898854612247565b60038501541015612254565b86600052602094600586526040600020336000528652604060002096611ad0611ac4838a54612247565b60068701541015612293565b6040516323b872dd60e01b815233600482015230602482015260448101839052938790859060649082906000905af19384156103ff5760ff94611b1a91600091611b985750611f32565b611b258a8254612247565b9055600e8401611b36828254612247565b9055611b43818854612247565b875560018701611b548a8254612247565b90556040519081528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c1615610b1f5760018055005b611baf9150893d8b116103f8576103f08183611ef8565b8c6113a9565b846000526006602052604060002033600052602052611bdb60ff604060002054166121d6565b611a62565b60405162461bcd60e51b815260206004820152601060248201526f4e6f74206120746f6b656e2073616c6560801b6044820152606490fd5b346101bc5760603660031901126101bc576024803567ffffffffffffffff6004358183116101bc57366023840112156101bc5782600401359182116101bc57838301928436918460051b0101116101bc5760443591821515928381036101bc57611c856004548410611ffc565b60ff600c611c9285611e42565b50015460101c16611d76576000546001600160a01b0390811633148015611d6d575b611cbd9061203a565b60005b838110611cc957005b8460005286857f6ac489d45eb8bf1a970353adde961baf16a2ab4af3d2a8f0cb488b0cd30af85684611d3e611d14868a60209760068952604060002086611d19611d14868686612077565b612087565b166000528952611d398c60406000209060ff801983541691151516179055565b612077565b16926040518a8152a36000198114611d5857600101611cc0565b87634e487b7160e01b60005260116004526000fd5b50333214611cb4565b60405162461bcd60e51b8152602060048201526016818801527514d85b1948185b1c9958591e48199a5b985b1a5e995960521b6044820152606490fd5b346101bc5760003660031901126101bc576020600354604051908152f35b346101bc5760403660031901126101bc576004356001600160a01b038116908190036101bc57600080808061001994611e08611e93565b602435905af1610749611f76565b600435906001600160a01b03821682036101bc57565b602435906001600160a01b03821682036101bc57565b600454811015611e7d57600f906004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b03163303611ea757565b60405163118cdaa760e01b8152336004820152602490fd5b610240810190811067ffffffffffffffff8211176116f957604052565b6080810190811067ffffffffffffffff8211176116f957604052565b90601f8019910116810190811067ffffffffffffffff8211176116f957604052565b908160209103126101bc575180151581036101bc5790565b15611f3957565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b3d15611fb1573d9067ffffffffffffffff82116116f95760405191611fa5601f8201601f191660200184611ef8565b82523d6000602084013e565b606090565b91908203918211611fc357565b634e487b7160e01b600052601160045260246000fd5b600260015414611fea576002600155565b604051633ee5aeb560e01b8152600490fd5b1561200357565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cd85b19481251608a1b6044820152606490fd5b1561204157565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b9190811015611e7d5760051b0190565b356001600160a01b03811681036101bc5790565b156120a257565b60405162461bcd60e51b815260206004820152600f60248201526e53616c65206e6f742061637469766560881b6044820152606490fd5b156120e057565b60405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606490fd5b1561211f57565b60405162461bcd60e51b815260206004820152600a60248201526914d85b1948195b99195960b21b6044820152606490fd5b1561215857565b60405162461bcd60e51b81526020600482015260166024820152752132b637bb9036b4b71031b7b73a3934b13aba34b7b760511b6044820152606490fd5b1561219d57565b60405162461bcd60e51b81526020600482015260116024820152702d32b9379031b7b73a3934b13aba34b7b760791b6044820152606490fd5b156121dd57565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606490fd5b81810292918115918404141715611fc357565b8115612231570490565b634e487b7160e01b600052601260045260246000fd5b91908201809211611fc357565b1561225b57565b60405162461bcd60e51b815260206004820152601060248201526f0457863656564732068617264206361760841b6044820152606490fd5b1561229a57565b60405162461bcd60e51b815260206004820152601860248201527f45786365656473206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b906122e982611e42565b50600c81015460ff8160101c16156125105760081c60ff166124d657600092808452602060058152604080862033875282528086206002600182015491019081548082111561249d57600987015460081c60ff161561249457600b87015491600a8801546123578185612247565b84421060001461236f57505050505050505050509050565b421061246a57506123809250611fb6565b945b85156124285754825163a9059cbb60e01b815233600482015260248101879052908490829060449082908c906001600160a01b03165af1801561241e577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c9596979850612401575b506123f6868254612247565b9055519384523393a3565b61241790843d86116103f8576103f08183611ef8565b50386123ea565b83513d8a823e3d90fd5b60648484519062461bcd60e51b825280600483015260248201527f4e6f20746f6b656e7320636c61696d61626c6520617420746869732074696d656044820152fd5b6124846124899261247e61248e9642611fb6565b90612214565b612227565b611fb6565b94612382565b61248e91611fb6565b835162461bcd60e51b81526004810186905260126024820152714e6f20746f6b656e7320746f20636c61696d60701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481dd85cc818d85b98d95b1b195960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481b9bdd08199a5b985b1a5e995960721b6044820152606490fd5b9061255482611e42565b5090600c82015460ff8160101c1615908115612624575b5061261c5760009283526005602052604083209060018060a01b031683526020526040822060026001820154910154908181111561261657600983015460081c60ff161561260957600a600b8401549301546125c78185612247565b8442106000146125d957505050505090565b939450919290919042106125f557506125f29250611fb6565b90565b6124846124899261247e6125f29642611fb6565b9091506125f29250611fb6565b50505090565b505050600090565b60ff915060081c163861256b565b1561263957565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fdfea264697066735822122010bfd80d184e0df8d1902d19920bfb8a089441a375e2311adba84768ea9dc81b64736f6c63430008140033",
  "devdoc": {
    "details": "Manages token sales with features like whitelisting, vesting, and caps",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "buyWithETH(uint256)": {
        "details": "Buy tokens with ETH"
      },
      "buyWithToken(uint256,uint256)": {
        "details": "Buy tokens with ERC20 tokens"
      },
      "cancelSale(uint256)": {
        "details": "Manual cancel sale (only owner)"
      },
      "claimRefund(uint256)": {
        "details": "Claim refund if sale was unsuccessful"
      },
      "claimTokens(uint256)": {
        "details": "Claim vested tokens"
      },
      "createSale(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256,uint256)": {
        "details": "Create a new token sale"
      },
      "finalizeSale(uint256)": {
        "details": "Finalize a sale"
      },
      "getClaimableTokens(uint256,address)": {
        "details": "Get claimable tokens for a user"
      },
      "getParticipation(uint256,address)": {
        "details": "Get participant information"
      },
      "getSaleCount()": {
        "details": "Get the total number of sales"
      },
      "getSaleInfo(uint256)": {
        "details": "Get sale information by ID"
      },
      "isWhitelisted(uint256,address)": {
        "details": "Check if a user is whitelisted for a sale"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rescueETH(address,uint256)": {
        "details": "Emergency function to rescue ETH sent to this contract by mistake"
      },
      "rescueTokens(address,address,uint256)": {
        "details": "Emergency function to rescue ERC20 tokens sent to this contract by mistake"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFeeCollector(address)": {
        "details": "Update fee collector address"
      },
      "updateSaleFee(uint256)": {
        "details": "Update sale fee"
      },
      "updateWhitelist(uint256,address[],bool)": {
        "details": "Whitelist users for a sale"
      }
    },
    "title": "TokenSaleManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "saleFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 389,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "sales",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(SaleConfig)376_storage)dyn_storage"
      },
      {
        "astId": 396,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "participations",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Participation)385_storage))"
      },
      {
        "astId": 402,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SaleConfig)376_storage)dyn_storage": {
        "base": "t_struct(SaleConfig)376_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSaleManager.SaleConfig[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Participation)385_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenSaleManager.Participation)",
        "numberOfBytes": "32",
        "value": "t_struct(Participation)385_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Participation)385_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct TokenSaleManager.Participation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Participation)385_storage)"
      },
      "t_struct(Participation)385_storage": {
        "encoding": "inplace",
        "label": "struct TokenSaleManager.Participation",
        "members": [
          {
            "astId": 378,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "contribution",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 380,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokensOwed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 382,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokensClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 384,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "refunded",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SaleConfig)376_storage": {
        "encoding": "inplace",
        "label": "struct TokenSaleManager.SaleConfig",
        "members": [
          {
            "astId": 341,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 343,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "paymentToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 345,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "rate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 347,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "hardCap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 349,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "softCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 351,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "minContribution",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 353,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "maxContribution",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 355,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 357,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "endTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 359,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "whitelistEnabled",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 361,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "vestingEnabled",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 363,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 365,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "vestingStart",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 367,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "isActive",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 369,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "isCancelled",
            "offset": 1,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 371,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "isFinalized",
            "offset": 2,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 373,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokensSold",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 375,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "amountRaised",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}