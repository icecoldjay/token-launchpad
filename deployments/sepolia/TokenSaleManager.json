{
  "address": "0x2BE1aA728C48a4C26995bE51318A93b3369707c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_saleFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ContributionRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "SaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "SaleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "SaleFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        }
      ],
      "name": "SaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "buyWithETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "cancelSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "claimRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethSoftCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenSoftCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vestingEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        }
      ],
      "name": "createSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "finalizeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getParticipation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensOwed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensClaimed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "refunded",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenSaleManager.Participation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSaleCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        }
      ],
      "name": "getSaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethSoftCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenSoftCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethHardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenHardCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "whitelistEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "vestingEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingStart",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCancelled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFinalized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "tokensSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenRaised",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct TokenSaleManager.SaleConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "participations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensClaimed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "refunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sales",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethSoftCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenSoftCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenHardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "whitelistEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vestingEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "vestingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingStart",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCancelled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isFinalized",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethRaised",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenRaised",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "updateSaleFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "saleId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa6c1827b19333207a6904f7c062af8ea296d286e188092f1573122f16fdc16c4",
  "receipt": {
    "to": null,
    "from": "0x21498F9a9B2B0bccDe2f97907Ca2B225A63F2aEa",
    "contractAddress": "0x2BE1aA728C48a4C26995bE51318A93b3369707c1",
    "transactionIndex": 132,
    "gasUsed": "2518881",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000002000001000000000000000004000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000000000000000000000000000000000000002000000",
    "blockHash": "0x37278c04ee9faa57564e5e5aa97514f161e41f244d2603b96e8db763090316d6",
    "transactionHash": "0xa6c1827b19333207a6904f7c062af8ea296d286e188092f1573122f16fdc16c4",
    "logs": [
      {
        "transactionIndex": 132,
        "blockNumber": 9138129,
        "transactionHash": "0xa6c1827b19333207a6904f7c062af8ea296d286e188092f1573122f16fdc16c4",
        "address": "0x2BE1aA728C48a4C26995bE51318A93b3369707c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021498f9a9b2b0bccde2f97907ca2b225a63f2aea"
        ],
        "data": "0x",
        "logIndex": 200,
        "blockHash": "0x37278c04ee9faa57564e5e5aa97514f161e41f244d2603b96e8db763090316d6"
      }
    ],
    "blockNumber": 9138129,
    "cumulativeGasUsed": "22485193",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6226C50292654ed8925E7563575f452ec5276DaE",
    "100000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "4c1fe2473cb90ff33494a114b8ee3c81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_saleFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContributionRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SaleFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"SaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"finalizeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParticipation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"internalType\":\"struct TokenSaleManager.Participation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"getSaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct TokenSaleManager.SaleConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSoftCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateSaleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Manages token sales with features like whitelisting, vesting, and caps\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"buyWithETH(uint256)\":{\"details\":\"Buy tokens with ETH\"},\"buyWithToken(uint256,uint256)\":{\"details\":\"Buy tokens with ERC20 tokens\"},\"cancelSale(uint256)\":{\"details\":\"Manual cancel sale (only owner)\"},\"claimRefund(uint256)\":{\"details\":\"Claim refund if sale was unsuccessful\"},\"claimTokens(uint256)\":{\"details\":\"Claim vested tokens\"},\"createSale(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256,uint256)\":{\"details\":\"Create a new token sale\"},\"finalizeSale(uint256)\":{\"details\":\"Finalize a sale\"},\"getClaimableTokens(uint256,address)\":{\"details\":\"Get claimable tokens for a user\"},\"getParticipation(uint256,address)\":{\"details\":\"Get participant information\"},\"getSaleCount()\":{\"details\":\"Get the total number of sales\"},\"getSaleInfo(uint256)\":{\"details\":\"Get sale information by ID\"},\"isWhitelisted(uint256,address)\":{\"details\":\"Check if a user is whitelisted for a sale\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rescueETH(address,uint256)\":{\"details\":\"Emergency function to rescue ETH sent to this contract by mistake\"},\"rescueTokens(address,address,uint256)\":{\"details\":\"Emergency function to rescue ERC20 tokens sent to this contract by mistake\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFeeCollector(address)\":{\"details\":\"Update fee collector address\"},\"updateSaleFee(uint256)\":{\"details\":\"Update sale fee\"},\"updateWhitelist(uint256,address[],bool)\":{\"details\":\"Whitelist users for a sale\"}},\"title\":\"TokenSaleManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/TokenSale.sol\":\"TokenSaleManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/extensions/TokenSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IToken.sol\\\";\\n\\n/**\\n * @title TokenSaleManager\\n * @dev Manages token sales with features like whitelisting, vesting, and caps\\n */\\ncontract TokenSaleManager is Ownable, ReentrancyGuard {\\n    address public feeCollector;\\n    uint256 public saleFee;\\n\\n    // Track sale configurations\\n    struct SaleConfig {\\n        address token; // Token being sold\\n        address paymentToken; // Token used to buy (address(0) for ETH)\\n        uint256 rate; // Rate of token per payment token (or ETH) in base units\\n        uint256 hardCap; // Maximum tokens to sell\\n        uint256 ethSoftCap; // Minimum ETH to raise (in wei)\\n        uint256 tokenSoftCap; // Minimum tokens to raise (in token's native units)\\n        uint256 ethHardCap; // Maximum ETH to raise (in wei)\\n        uint256 tokenHardCap; // Maximum tokens to raise (in token's native units)\\n        uint256 minContribution; // Minimum contribution per buyer\\n        uint256 maxContribution; // Maximum contribution per buyer\\n        uint256 startTime; // Sale start timestamp\\n        uint256 endTime; // Sale end timestamp\\n        bool whitelistEnabled; // Whether whitelist is enabled\\n        bool vestingEnabled; // Whether vesting is enabled\\n        uint256 vestingDuration; // Vesting duration in seconds\\n        uint256 vestingStart; // When vesting starts after sale ends\\n        bool isActive; // Whether the sale is active\\n        bool isCancelled; // Whether the sale is cancelled\\n        bool isFinalized; // Whether the sale is finalized\\n        uint256 tokensSold; // Total tokens sold\\n        uint256 ethRaised; // Total ETH raised (in wei)\\n        uint256 tokenRaised; // Total token amount raised (in token's native units)\\n        address creator; // Creator of the sale who controls finalization and whitelist\\n    }\\n\\n    // Track participant contributions and vesting\\n    struct Participation {\\n        uint256 contribution; // How much they contributed\\n        uint256 tokensOwed; // How many tokens they're owed\\n        uint256 tokensClaimed; // How many tokens they've claimed\\n        bool refunded; // Whether they've been refunded (if sale fails)\\n    }\\n\\n    // All sales created\\n    SaleConfig[] public sales;\\n\\n    // Mapping: saleId => participant address => participation\\n    mapping(uint256 => mapping(address => Participation)) public participations;\\n\\n    // Mapping: saleId => participant address => whitelist status\\n    mapping(uint256 => mapping(address => bool)) public whitelist;\\n\\n    // Events\\n    event SaleCreated(\\n        uint256 indexed saleId,\\n        address indexed token,\\n        address indexed creator,\\n        uint256 hardCap,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n    event WhitelistUpdated(\\n        uint256 indexed saleId,\\n        address indexed user,\\n        bool status\\n    );\\n    event TokensPurchased(\\n        uint256 indexed saleId,\\n        address indexed buyer,\\n        uint256 contribution,\\n        uint256 tokensReceived\\n    );\\n    event TokensClaimed(\\n        uint256 indexed saleId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n    event SaleFinalized(\\n        uint256 indexed saleId,\\n        uint256 tokensSold,\\n        uint256 amountRaised\\n    );\\n    event SaleCancelled(uint256 indexed saleId);\\n    event ContributionRefunded(\\n        uint256 indexed saleId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n    event FeeCollectorUpdated(\\n        address indexed oldCollector,\\n        address indexed newCollector\\n    );\\n    event SaleFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    constructor(address _feeCollector, uint256 _saleFee) Ownable(msg.sender) {\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\n        feeCollector = _feeCollector;\\n        saleFee = _saleFee;\\n    }\\n\\n    /**\\n     * @dev Create a new token sale\\n     */\\n    function createSale(\\n        address token,\\n        address paymentToken,\\n        uint256 rate,\\n        uint256 hardCap,\\n        uint256 ethSoftCap,\\n        uint256 tokenSoftCap,\\n        uint256 ethHardCap,\\n        uint256 tokenHardCap,\\n        uint256 minContribution,\\n        uint256 maxContribution,\\n        uint256 startTime,\\n        uint256 endTime,\\n        bool whitelistEnabled,\\n        bool vestingEnabled,\\n        uint256 vestingDuration,\\n        uint256 vestingStart\\n    ) external payable nonReentrant returns (uint256) {\\n        require(msg.value >= saleFee, \\\"Insufficient fee\\\");\\n        require(token != address(0), \\\"Invalid token address\\\");\\n        require(rate > 0, \\\"Invalid rate\\\");\\n        require(hardCap > 0, \\\"Invalid hard cap\\\");\\n        require(ethSoftCap > 0, \\\"Invalid ETH soft cap\\\");\\n        require(tokenSoftCap > 0, \\\"Invalid token soft cap\\\");\\n        require(ethHardCap > 0, \\\"Invalid ETH hard cap\\\");\\n        require(tokenHardCap > 0, \\\"Invalid token hard cap\\\");\\n        require(ethSoftCap <= ethHardCap, \\\"ETH soft cap must be <= hard cap\\\");\\n        require(tokenSoftCap <= tokenHardCap, \\\"Token soft cap must be <= hard cap\\\");\\n        require(minContribution > 0, \\\"Invalid min contribution\\\");\\n        require(maxContribution >= minContribution, \\\"Invalid max contribution\\\");\\n        require(\\n            startTime > block.timestamp,\\n            \\\"Start time must be in the future\\\"\\n        );\\n        require(endTime > startTime, \\\"End time must be after start time\\\");\\n\\n        if (vestingEnabled) {\\n            require(vestingDuration > 0, \\\"Invalid vesting duration\\\");\\n        }\\n\\n        // Transfer tokens from creator to this contract\\n        IERC20 tokenContract = IERC20(token);\\n        require(\\n            tokenContract.transferFrom(msg.sender, address(this), hardCap),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Create new sale\\n        uint256 saleId = sales.length;\\n        sales.push(\\n            SaleConfig({\\n                token: token,\\n                paymentToken: paymentToken,\\n                rate: rate,\\n                hardCap: hardCap,\\n                ethSoftCap: ethSoftCap,\\n                tokenSoftCap: tokenSoftCap,\\n                ethHardCap: ethHardCap,\\n                tokenHardCap: tokenHardCap,\\n                minContribution: minContribution,\\n                maxContribution: maxContribution,\\n                startTime: startTime,\\n                endTime: endTime,\\n                whitelistEnabled: whitelistEnabled,\\n                vestingEnabled: vestingEnabled,\\n                vestingDuration: vestingDuration,\\n                vestingStart: vestingStart,\\n                isActive: true,\\n                isCancelled: false,\\n                isFinalized: false,\\n                tokensSold: 0,\\n                ethRaised: 0,\\n                tokenRaised: 0,\\n                creator: msg.sender\\n            })\\n        );\\n\\n        // Pay fee to collector\\n        (bool sent, ) = payable(feeCollector).call{value: saleFee}(\\\"\\\");\\n        require(sent, \\\"Fee transfer failed\\\");\\n\\n        // Refund excess fee\\n        if (msg.value > saleFee) {\\n            (bool refundSent, ) = payable(msg.sender).call{\\n                value: msg.value - saleFee\\n            }(\\\"\\\");\\n            require(refundSent, \\\"Refund failed\\\");\\n        }\\n\\n        emit SaleCreated(\\n            saleId,\\n            token,\\n            msg.sender,\\n            hardCap,\\n            startTime,\\n            endTime\\n        );\\n\\n        return saleId;\\n    }\\n\\n    /**\\n     * @dev Whitelist users for a sale\\n     */\\n    function updateWhitelist(\\n        uint256 saleId,\\n        address[] calldata users,\\n        bool status\\n    ) external {\\n        require(saleId < sales.length, \\\"Invalid sale ID\\\");\\n        SaleConfig storage sale = sales[saleId];\\n        require(!sale.isFinalized, \\\"Sale already finalized\\\");\\n        require(\\n            msg.sender == sale.creator,\\n            \\\"Not authorized\\\"\\n        );\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            whitelist[saleId][users[i]] = status;\\n            emit WhitelistUpdated(saleId, users[i], status);\\n        }\\n    }\\n\\n    /**\\n     * @dev Buy tokens with ETH\\n     */\\n    function buyWithETH(uint256 saleId) external payable nonReentrant {\\n        SaleConfig storage sale = sales[saleId];\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\n        require(sale.paymentToken == address(0), \\\"Not an ETH sale\\\");\\n        require(block.timestamp >= sale.startTime, \\\"Sale not started\\\");\\n        require(block.timestamp <= sale.endTime, \\\"Sale ended\\\");\\n        require(msg.value >= sale.minContribution, \\\"Below min contribution\\\");\\n        require(msg.value > 0, \\\"Zero contribution\\\");\\n\\n        if (sale.whitelistEnabled) {\\n            require(whitelist[saleId][msg.sender], \\\"Not whitelisted\\\");\\n        }\\n\\n        // Calculate tokens to receive\\n        uint256 tokenAmount = (msg.value * sale.rate) / 1 ether;\\n        require(\\n            sale.tokensSold + tokenAmount <= sale.hardCap,\\n            \\\"Exceeds token hard cap\\\"\\n        );\\n        require(\\n            sale.ethRaised + msg.value <= sale.ethHardCap,\\n            \\\"Exceeds ETH hard cap\\\"\\n        );\\n\\n        // Check maximum contribution limit\\n        Participation storage participation = participations[saleId][\\n            msg.sender\\n        ];\\n        uint256 totalContribution = participation.contribution + msg.value;\\n        require(\\n            totalContribution <= sale.maxContribution,\\n            \\\"Exceeds max contribution\\\"\\n        );\\n\\n        // Update sale and participation state\\n        sale.tokensSold += tokenAmount;\\n        sale.ethRaised += msg.value;\\n        participation.contribution += msg.value;\\n        participation.tokensOwed += tokenAmount;\\n\\n        emit TokensPurchased(saleId, msg.sender, msg.value, tokenAmount);\\n\\n        // If vesting is not enabled, transfer tokens immediately\\n        if (!sale.vestingEnabled) {\\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\\n            participation.tokensClaimed += tokenAmount;\\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Buy tokens with ERC20 tokens\\n     */\\n    function buyWithToken(\\n        uint256 saleId,\\n        uint256 amount\\n    ) external nonReentrant {\\n        SaleConfig storage sale = sales[saleId];\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\n        require(sale.paymentToken != address(0), \\\"Not a token sale\\\");\\n        require(block.timestamp >= sale.startTime, \\\"Sale not started\\\");\\n        require(block.timestamp <= sale.endTime, \\\"Sale ended\\\");\\n        require(amount >= sale.minContribution, \\\"Below min contribution\\\");\\n        require(amount > 0, \\\"Zero contribution\\\");\\n\\n        if (sale.whitelistEnabled) {\\n            require(whitelist[saleId][msg.sender], \\\"Not whitelisted\\\");\\n        }\\n\\n        // Calculate tokens to receive\\n        uint256 tokenAmount = (amount * sale.rate) / 10 ** 18;\\n        require(\\n            sale.tokensSold + tokenAmount <= sale.hardCap,\\n            \\\"Exceeds token hard cap\\\"\\n        );\\n        require(\\n            sale.tokenRaised + amount <= sale.tokenHardCap,\\n            \\\"Exceeds token payment hard cap\\\"\\n        );\\n\\n        // Check maximum contribution limit\\n        Participation storage participation = participations[saleId][\\n            msg.sender\\n        ];\\n        uint256 totalContribution = participation.contribution + amount;\\n        require(\\n            totalContribution <= sale.maxContribution,\\n            \\\"Exceeds max contribution\\\"\\n        );\\n\\n        // Transfer payment tokens from user to contract\\n        IERC20 paymentToken = IERC20(sale.paymentToken);\\n        require(\\n            paymentToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Update sale and participation state\\n        sale.tokensSold += tokenAmount;\\n        sale.tokenRaised += amount;\\n        participation.contribution += amount;\\n        participation.tokensOwed += tokenAmount;\\n\\n        emit TokensPurchased(saleId, msg.sender, amount, tokenAmount);\\n\\n        // If vesting is not enabled, transfer tokens immediately\\n        if (!sale.vestingEnabled) {\\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\\n            participation.tokensClaimed += tokenAmount;\\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Claim vested tokens\\n     */\\n    function claimTokens(uint256 saleId) external nonReentrant {\\n        SaleConfig storage sale = sales[saleId];\\n        require(sale.isFinalized, \\\"Sale not finalized\\\");\\n        require(!sale.isCancelled, \\\"Sale was cancelled\\\");\\n\\n        Participation storage participation = participations[saleId][\\n            msg.sender\\n        ];\\n        require(\\n            participation.tokensOwed > participation.tokensClaimed,\\n            \\\"No tokens to claim\\\"\\n        );\\n\\n        uint256 claimableTokens;\\n\\n        if (sale.vestingEnabled) {\\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\\n\\n            if (block.timestamp < sale.vestingStart) {\\n                // Vesting hasn't started yet\\n                return;\\n            } else if (block.timestamp >= vestingEndTime) {\\n                // Vesting completed - claim all remaining tokens\\n                claimableTokens =\\n                    participation.tokensOwed -\\n                    participation.tokensClaimed;\\n            } else {\\n                // Vesting in progress - calculate proportional amount\\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\\n                uint256 totalClaimable = (participation.tokensOwed *\\n                    vestingElapsed) / sale.vestingDuration;\\n                claimableTokens = totalClaimable - participation.tokensClaimed;\\n            }\\n        } else {\\n            // No vesting - claim all tokens\\n            claimableTokens =\\n                participation.tokensOwed -\\n                participation.tokensClaimed;\\n        }\\n\\n        require(claimableTokens > 0, \\\"No tokens claimable at this time\\\");\\n\\n        // Transfer tokens to participant\\n        IERC20(sale.token).transfer(msg.sender, claimableTokens);\\n        participation.tokensClaimed += claimableTokens;\\n\\n        emit TokensClaimed(saleId, msg.sender, claimableTokens);\\n    }\\n\\n    /**\\n     * @dev Get claimable tokens for a user\\n     */\\n    function getClaimableTokens(\\n        uint256 saleId,\\n        address user\\n    ) external view returns (uint256) {\\n        SaleConfig storage sale = sales[saleId];\\n        if (!sale.isFinalized || sale.isCancelled) {\\n            return 0;\\n        }\\n\\n        Participation storage participation = participations[saleId][user];\\n        if (participation.tokensOwed <= participation.tokensClaimed) {\\n            return 0;\\n        }\\n\\n        uint256 claimableTokens;\\n\\n        if (sale.vestingEnabled) {\\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\\n\\n            if (block.timestamp < sale.vestingStart) {\\n                // Vesting hasn't started yet\\n                return 0;\\n            } else if (block.timestamp >= vestingEndTime) {\\n                // Vesting completed - all remaining tokens are claimable\\n                claimableTokens =\\n                    participation.tokensOwed -\\n                    participation.tokensClaimed;\\n            } else {\\n                // Vesting in progress - calculate proportional amount\\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\\n                uint256 totalClaimable = (participation.tokensOwed *\\n                    vestingElapsed) / sale.vestingDuration;\\n                claimableTokens = totalClaimable - participation.tokensClaimed;\\n            }\\n        } else {\\n            // No vesting - all tokens are claimable\\n            claimableTokens =\\n                participation.tokensOwed -\\n                participation.tokensClaimed;\\n        }\\n\\n        return claimableTokens;\\n    }\\n\\n    /**\\n     * @dev Finalize a sale\\n     */\\n    function finalizeSale(uint256 saleId) external nonReentrant {\\n        SaleConfig storage sale = sales[saleId];\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\n        require(\\n            block.timestamp > sale.endTime || sale.tokensSold >= sale.hardCap,\\n            \\\"Sale still in progress\\\"\\n        );\\n        require(\\n            msg.sender == sale.creator,\\n            \\\"Not authorized\\\"\\n        );\\n\\n        bool isSuccessful = (sale.paymentToken == address(0) ? \\n            sale.ethRaised >= sale.ethSoftCap : \\n            sale.tokenRaised >= sale.tokenSoftCap);\\n\\n        if (isSuccessful) {\\n            // Mark sale as finalized and set vesting start time if enabled\\n            sale.isFinalized = true;\\n            if (sale.vestingEnabled) {\\n                sale.vestingStart = block.timestamp;\\n            }\\n\\n            // Transfer raised funds to creator\\n            if (sale.paymentToken == address(0)) {\\n                // ETH sale\\n                (bool sent, ) = payable(sale.creator).call{value: sale.ethRaised}(\\n                    \\\"\\\"\\n                );\\n                require(sent, \\\"ETH transfer failed\\\");\\n            } else {\\n                // Token sale\\n                IERC20(sale.paymentToken).transfer(sale.creator, sale.tokenRaised);\\n            }\\n\\n            // Return unsold tokens to creator\\n            uint256 unsoldTokens = sale.hardCap - sale.tokensSold;\\n            if (unsoldTokens > 0) {\\n                IERC20(sale.token).transfer(sale.creator, unsoldTokens);\\n            }\\n        } else {\\n            // Sale failed - mark as cancelled\\n            sale.isCancelled = true;\\n\\n            // Return all tokens to creator\\n            IERC20(sale.token).transfer(sale.creator, sale.hardCap);\\n        }\\n\\n        sale.isActive = false;\\n\\n        if (isSuccessful) {\\n            uint256 totalRaised = sale.paymentToken == address(0) ? sale.ethRaised : sale.tokenRaised;\\n            emit SaleFinalized(saleId, sale.tokensSold, totalRaised);\\n        } else {\\n            emit SaleCancelled(saleId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Manual cancel sale (only owner)\\n     */\\n    function cancelSale(uint256 saleId) external onlyOwner {\\n        SaleConfig storage sale = sales[saleId];\\n        require(sale.isActive && !sale.isCancelled, \\\"Sale not active\\\");\\n\\n        // Mark sale as cancelled\\n        sale.isActive = false;\\n        sale.isCancelled = true;\\n\\n        // Return all tokens to creator\\n        IERC20(sale.token).transfer(sale.creator, sale.hardCap - sale.tokensSold);\\n\\n        emit SaleCancelled(saleId);\\n    }\\n\\n    /**\\n     * @dev Claim refund if sale was unsuccessful\\n     */\\n    function claimRefund(uint256 saleId) external nonReentrant {\\n        SaleConfig storage sale = sales[saleId];\\n        require(!sale.isActive, \\\"Sale still active\\\");\\n        require(sale.isCancelled, \\\"Sale not cancelled\\\");\\n\\n        Participation storage participation = participations[saleId][\\n            msg.sender\\n        ];\\n        require(participation.contribution > 0, \\\"No contribution found\\\");\\n        require(!participation.refunded, \\\"Already refunded\\\");\\n\\n        uint256 refundAmount = participation.contribution;\\n        participation.refunded = true;\\n\\n        if (sale.paymentToken == address(0)) {\\n            // Refund ETH\\n            (bool sent, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\n            require(sent, \\\"ETH refund failed\\\");\\n        } else {\\n            // Refund tokens\\n            IERC20(sale.paymentToken).transfer(msg.sender, refundAmount);\\n        }\\n\\n        emit ContributionRefunded(saleId, msg.sender, refundAmount);\\n    }\\n\\n    /**\\n     * @dev Get sale information by ID\\n     */\\n    function getSaleInfo(\\n        uint256 saleId\\n    ) external view returns (SaleConfig memory) {\\n        require(saleId < sales.length, \\\"Invalid sale ID\\\");\\n        return sales[saleId];\\n    }\\n\\n    /**\\n     * @dev Get the total number of sales\\n     */\\n    function getSaleCount() external view returns (uint256) {\\n        return sales.length;\\n    }\\n\\n    /**\\n     * @dev Get participant information\\n     */\\n    function getParticipation(\\n        uint256 saleId,\\n        address user\\n    ) external view returns (Participation memory) {\\n        return participations[saleId][user];\\n    }\\n\\n    /**\\n     * @dev Check if a user is whitelisted for a sale\\n     */\\n    function isWhitelisted(\\n        uint256 saleId,\\n        address user\\n    ) external view returns (bool) {\\n        return whitelist[saleId][user];\\n    }\\n\\n    /**\\n     * @dev Update fee collector address\\n     */\\n    function updateFeeCollector(address _newCollector) external onlyOwner {\\n        require(_newCollector != address(0), \\\"Invalid collector address\\\");\\n        address oldCollector = feeCollector;\\n        feeCollector = _newCollector;\\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\\n    }\\n\\n    /**\\n     * @dev Update sale fee\\n     */\\n    function updateSaleFee(uint256 _newFee) external onlyOwner {\\n        uint256 oldFee = saleFee;\\n        saleFee = _newFee;\\n        emit SaleFeeUpdated(oldFee, _newFee);\\n    }\\n\\n    /**\\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\\n     */\\n    function rescueTokens(\\n        address tokenAddress,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(tokenAddress).transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\\n     */\\n    function rescueETH(\\n        address payable recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Handle received ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x087700b4a1709cfa9f7f6ec218e8b736e15b9891894db65e848250adc86b37a6\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IToken {\\n    function enableTrading() external;\\n    function setAntiBotEnabled(bool enabled) external;\\n    function setMaxTxAmount(uint256 amount) external;\\n    function setMaxWalletAmount(uint256 amount) external;\\n    function excludeFromLimits(address account, bool excluded) external;\\n    function completeInitialDistribution() external;\\n}\",\"keccak256\":\"0xdb46c0e4e6be0ee5517067aad1c44ad1240c7b5e8ca480070e5fab63995d4d83\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200012757601f62002c1e38819003918201601f19168301916001600160401b038311848410176200012c578084926040948552833981010312620001275780516001600160a01b0391828216918290036200012757602001519133156200010e576000549060018060a01b0319913383821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600180558215620000cc57506002541617600255600355604051612adb9081620001438239f35b62461bcd60e51b815260206004820152601560248201527f496e76616c69642066656520636f6c6c6563746f7200000000000000000000006044820152606490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe610180604052600436101561001c575b361561001a57600080fd5b005b60003560e01c8063099a04e5146121fc578063178021e3146121de578063301e3ecb146120515780633089448a14611da957806346e04a2f14611d855780634b25bfce146116995780634b64218b14611d165780635b7baf6414611aa757806364b3b84414611793578063715018a61461173a57806377d235b2146116e65780637d22c35c146116995780638da5cb5b1461167057806394dc9cf314611386578063aa92938014611028578063b21ed4eb1461072e578063b5f522f714610561578063bd94b00514610453578063c24521c614610435578063c415b95c1461040c578063cea9d26f1461035c578063d2c35ce8146102a7578063e9c21a15146101f0578063f02a9df8146101c25763f2fde38b0361000f57346101bd5760203660031901126101bd5761014d612257565b6101556122be565b6001600160a01b039081169081156101a457600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101bd5760403660031901126101bd5760206101e86101e0612241565b60043561297b565b604051908152f35b346101bd5760403660031901126101bd57610209612241565b6000606060405161021981612307565b8281528260208201528260408201520152600435600052600560205260406000209060018060a01b03166000526020526080604060002060405161025c81612307565b815491828252600181015460208301908152606060ff600360028501549460408701958652015416930192151583526040519384525160208401525160408301525115156060820152f35b346101bd5760203660031901126101bd576102c0612257565b6102c86122be565b6001600160a01b0390811690811561031757600254826001600160601b0360a01b821617600255167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38600080a3005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6c6c6563746f722061646472657373000000000000006044820152606490fd5b346101bd5760603660031901126101bd57600060206103c061037c612257565b610384612241565b61038c6122be565b60405163a9059cbb60e01b81526001600160a01b039091166004820152604480356024830152909485938492839190820190565b03926001600160a01b03165af18015610400576103d957005b61001a9060203d81116103f9575b6103f18183612323565b810190612345565b503d6103e7565b6040513d6000823e3d90fd5b346101bd5760003660031901126101bd576002546040516001600160a01b039091168152602090f35b346101bd5760003660031901126101bd576020600454604051908152f35b346101bd5760203660031901126101bd5760043561046f6122be565b6104fd602061047d8361226d565b50600f8101610100815460ff811680610552575b61049a906124c6565b61ffff191617905560018060a01b036104c881835416916013840154169260106003820154910154906123e1565b60405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af1801561040057610534575b507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a2005b61054b9060203d81116103f9576103f18183612323565b508161050c565b50600881901c60ff1615610491565b346101bd5760203660031901126101bd576004356004548110156101bd5761058a60ff9161226d565b5080610120528080838180808080808080808080600f600e600d600c600b600a60096008600760066005600460038d60018060a01b039054169d60018060a01b0360018201541661016052600281015460c05201549d01549d01549d01549d01549d01549d01549d01549d01549d01549d01549e01549e01549e6010810154610100526011810154608052601281015460e052601360018060a01b039101541660a05260405180610140525261016051602061014051015260c05160406101405101526060610140510152608061014051015260a061014051015260c061014051015260e061014051015261010061014051015261012061014051015261014080510152610160610140510152818116151561018061014051015260081c1615156101a06101405101526101c06101405101526101e06101405101528181161515610200610140510152818160081c16151561022061014051015260101c1615156102406101405101526101005161026061014051015260805161028061014051015260e0516102a061014051015260a0516102c06101405101526102e061014051f35b6102003660031901126101bd57610743612257565b61074b612241565b610184359081151582036101bd576101a43515156101a435036101bd57610770612404565b6003543410610ff0576001600160a01b03831615610fb35760443515610f7f5760643515610f475760843515610f0b5760a43515610ecd5760c43515610e915760e43515610e535760c43560843511610e0f5760e43560a43511610dbf576101043515610d7a57610104356101243510610d355742610144351115610cf15761014435610164351115610ca2576101a435610c55575b6040516323b872dd60e01b815233600482015230602482015260648035604483015260209082908160006001600160a01b0389165af180156104005761085491600091610c36575b5061235d565b6004549160405191610865836122ea565b6001600160a01b03858116845216602083015260443560408301526064356060830152608435608083015260a43560a083015260c43560c083015260e43560e08301526101043561010083015261012435610120830152610144356101408301526101643561016083015215156101808201526101a43515156101a08201526101c4356101c08201526101e4356101e08201526001610200820152600061022082018190526102408201819052610260820181905261028082018190526102a0820152336102c082015268010000000000000000821015610c2057600182016004556109508261226d565b610c0a5760139060018060a01b038351166001600160601b0360a01b8254161781556001810160018060a01b036020850151166001600160601b0360a01b82541617905560408301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151600682015560e0830151600782015561010083015160088201556101208301516009820155610140830151600a820155610160830151600b820155610a3c600c8201610a206101808601511515829060ff801983541691151516179055565b6101a0850151815461ff00191690151560081b61ff0016179055565b6101c0830151600d8201556101e0830151600e820155600f8101610a736102008501511515829060ff801983541691151516179055565b610220840151815461ff00191690151560081b61ff0016178155610240840151151562ff000082549160101b169062ff00001916179055610260830151601082015561028083015160118201556102a0830151601282015501906102c060018060a01b03910151166001600160601b0360a01b825416179055600080808060018060a01b0360025416600354905af1610b0a6123a1565b5015610bcf57600354803411610b74575b5060209160405160643581526101443584820152610164356040820152827f68196e1e9193049a9f69ac802f2e2bf089bfe2d7f7071e492205128671544d736060339460018060a01b031693a460018055604051908152f35b60008080610b838194346123e1565b335af1610b8e6123a1565b5015610b9a5782610b1b565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610c4f915060203d6020116103f9576103f18183612323565b8561084e565b6101c4356108065760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67206475726174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f53746172742074696d65206d75737420626520696e20746865206675747572656044820152fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d696e20636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f546f6b656e20736f667420636170206d757374206265203c3d20686172642063604482015261061760f41b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f45544820736f667420636170206d757374206265203c3d2068617264206361706044820152fd5b60405162461bcd60e51b81526020600482015260166024820152750496e76616c696420746f6b656e2068617264206361760541b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152730496e76616c6964204554482068617264206361760641b6044820152606490fd5b60405162461bcd60e51b81526020600482015260166024820152750496e76616c696420746f6b656e20736f6674206361760541b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152730496e76616c69642045544820736f6674206361760641b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f0496e76616c69642068617264206361760841b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b346101bd576020806003193601126101bd5760043590611046612404565b61104f8261226d565b50600f81019182549160ff831680611377575b61106b906124c6565b600b81015442118015611365575b15611327576013810180546001600160a01b0395908616949161109d338714612465565b846001850196888854161560001461131557601186015460048701541115945b85156112a0575050825462ff000019166201000017835550600c84015460081c60ff16611295575b85548716858161122e57505061111360008080808b86541660118a0154905af161110d6123a1565b50612a63565b8461112760038601546010870154906123e1565b806111c4575b5050505b805460ff1916905515611196577f52c66055cf7320a956274f218515348b0138fe56ed320fef5d3d13e1f120dbef936040935416156000146111895760106011820154915b0154918351928352820152a25b60018055005b6010601282015491611176565b505050507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a2611183565b8554925460405163a9059cbb60e01b8152908a166001600160a01b0316600482015260248101919091529182908916816000816044810103925af1801561040057611211575b848161112d565b61122790853d87116103f9576103f18183612323565b508761120a565b8254601287015460405163a9059cbb60e01b8152918b166001600160a01b031660048301526024820152918290816000816044810103925af1801561040057611278575b50611113565b61128e90863d88116103f9576103f18183612323565b5088611272565b42600e8501556110e5565b61ff0019166101001784558554600387015460405163a9059cbb60e01b81526001600160a01b039093166004840152602483015290925082908916816000816044810103925af18015610400576112f8575b50611131565b61130e90853d87116103f9576103f18183612323565b50876112f2565b601286015460058701541115946110bd565b60405162461bcd60e51b815260048101839052601660248201527553616c65207374696c6c20696e2070726f677265737360501b6044820152606490fd5b50601081015460038201541115611079565b50600883901c60ff1615611062565b6020806003193601126101bd5760043561139e612404565b6113a78161226d565b50906113c2600f83015460ff81169081611661575b506124c6565b60018201546001600160a01b039390841661162b576113e7600a840154421015612504565b6113f7600b840154421115612543565b611407600884015434101561257c565b6114123415156125c1565b600c83019360ff855416611602575b670de0b6b3a764000061143860028601543461263f565b049360108101805461145961144d8883612672565b6003850154101561267f565b601183019182549161146b3484612672565b6006860154106115c65788999260ff94926114be8a9b6114c7946114ad9c60005260058c526040600020336000528c526114b960406000209d8e349054612672565b60098c015410156126c4565b612672565b90553490612672565b90556114d4348754612672565b8655600186016114e5898254612672565b90556040513481528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c16156115295760018055005b5460405163a9059cbb60e01b8152336004820152602481018790529391839185916044918391600091165af1908115610400577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c936002926115a9575b5001611593858254612672565b90556040519384523393a3808080808080611183565b6115bf90843d86116103f9576103f18183612323565b5086611586565b60405162461bcd60e51b8152600481018890526014602482015273045786365656473204554482068617264206361760641b6044820152606490fd5b8260005260068252604060002033600052825261162660ff60406000205416612601565b611421565b6064906040519062461bcd60e51b82526004820152600f60248201526e4e6f7420616e204554482073616c6560881b6044820152fd5b60ff915060081c1615856113bc565b346101bd5760003660031901126101bd576000546040516001600160a01b039091168152602090f35b346101bd5760403660031901126101bd576116b2612241565b600435600052600660205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101bd5760203660031901126101bd577fc1990e461c862d0f130619e2010621437b7c3c5aef23c1231fa4484dbbc4b6b860406004356117256122be565b600354908060035582519182526020820152a1005b346101bd5760003660031901126101bd576117536122be565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101bd5760203660031901126101bd5760006102c06040516117b5816122ea565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e08201528261020082015282610220820152826102408201528261026082015282610280820152826102a082015201526102e061186260045461185d600435918210612427565b61226d565b5060405161186f816122ea565b60018060a01b038254169182825260018060a01b036001820154166020830152600281015460408301526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b81015461016083015260ff600c820154818116151561018085015260081c1615156101a0830152600d8101546101c0830152600e8101546101e083015260ff600f8201548181161515610200850152818160081c16151561022085015260101c1615156102408301526010810154610260830152601181015461028083015260128101546102a0830152601360018060a01b03910154166102c082015260405191825260018060a01b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010081015161010083015261012081015161012083015261014081015161014083015261016081015161016083015261018081015115156101808301526101a081015115156101a08301526101c08101516101c08301526101e08101516101e08301526102008101511515610200830152610220810151151561022083015261024081015115156102408301526102608101516102608301526102808101516102808301526102a08101516102a08301526102c060018060a01b03910151166102c0820152f35b346101bd576020806003193601126101bd57600435611ac4612404565b611acd8161226d565b5091600f83015460ff8116611cdd5760081c60ff1615611ca457816000526005815260406000203360005281526040600020928354938415611c6757600301805460ff8116611c2f5760ff1916600190811790915501546001600160a01b031680611bb45750600080808086335af1611b446123a1565b5015611b7c577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f905b6040519384523393a360018055005b6064906040519062461bcd60e51b825260048201526011602482015270115512081c99599d5b990819985a5b1959607a1b6044820152fd5b60405163a9059cbb60e01b81523360048201526024810185905291908190839060449082906000905af1918215610400577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f92611c12575b50611b6d565b611c2890823d84116103f9576103f18183612323565b5084611c0c565b60405162461bcd60e51b815260048101859052601060248201526f105b1c9958591e481c99599d5b99195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018490526015602482015274139bc818dbdb9d1c9a589d5d1a5bdb88199bdd5b99605a1b6044820152606490fd5b6064906040519062461bcd60e51b82526004820152601260248201527114d85b19481b9bdd0818d85b98d95b1b195960721b6044820152fd5b60405162461bcd60e51b815260048101839052601160248201527053616c65207374696c6c2061637469766560781b6044820152606490fd5b346101bd5760403660031901126101bd57611d2f612241565b600435600052600560205260406000209060018060a01b03166000526020526080604060002080549060018101549060ff6003600283015492015416916040519384526020840152604083015215156060820152f35b346101bd5760203660031901126101bd57611d9e612404565b611183600435612710565b346101bd5760403660031901126101bd57602435600435611dc8612404565b611dd18161226d565b50611dea600f82015460ff8116908161166157506124c6565b60018101546001600160a01b039081169390841561201957611e12600a840154421015612504565b611e22600b840154421115612543565b611e32600884015483101561257c565b611e3d8215156125c1565b600c83019260ff845416611fee575b670de0b6b3a7640000611e6360028301548561263f565b04956010820194611e7861144d898854612672565b6012830194611e88818754612672565b600785015410611fa95787600052602095600587526040600020336000528752604060002097611ec8611ebc848b54612672565b600988015410156126c4565b6040516323b872dd60e01b815233600482015230602482015260448101849052948890869060649082906000905af19485156104005760ff95611f1291600091611f8c575061235d565b611f1d8b8254612672565b9055611f2a828254612672565b9055611f37818854612672565b875560018701611f488a8254612672565b90556040519081528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c16156115295760018055005b611fa391508a3d8c116103f9576103f18183612323565b8d61084e565b60405162461bcd60e51b815260206004820152601e60248201527f4578636565647320746f6b656e207061796d656e7420686172642063617000006044820152606490fd5b84600052600660205260406000203360005260205261201460ff60406000205416612601565b611e4c565b60405162461bcd60e51b815260206004820152601060248201526f4e6f74206120746f6b656e2073616c6560801b6044820152606490fd5b346101bd5760603660031901126101bd576024803567ffffffffffffffff6004358183116101bd57366023840112156101bd5782600401359182116101bd57838301928436918460051b0101116101bd5760443591821515928381036101bd576120be6004548410612427565b6120c78361226d565b5060ff600f82015460101c166121a157601301546001600160a01b03906120f19082163314612465565b60005b8381106120fd57005b8460005286857f6ac489d45eb8bf1a970353adde961baf16a2ab4af3d2a8f0cb488b0cd30af85684612172612148868a6020976006895260406000208661214d6121488686866124a2565b6124b2565b16600052895261216d8c60406000209060ff801983541691151516179055565b6124a2565b16926040518a8152a3600019811461218c576001016120f4565b87634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b8152602060048201526016818901527514d85b1948185b1c9958591e48199a5b985b1a5e995960521b6044820152606490fd5b346101bd5760003660031901126101bd576020600354604051908152f35b346101bd5760403660031901126101bd576004356001600160a01b038116908190036101bd57600080808061001a946122336122be565b602435905af161110d6123a1565b602435906001600160a01b03821682036101bd57565b600435906001600160a01b03821682036101bd57565b6004548110156122a8576014906004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036122d257565b60405163118cdaa760e01b8152336004820152602490fd5b6102e0810190811067ffffffffffffffff821117610c2057604052565b6080810190811067ffffffffffffffff821117610c2057604052565b90601f8019910116810190811067ffffffffffffffff821117610c2057604052565b908160209103126101bd575180151581036101bd5790565b1561236457565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b3d156123dc573d9067ffffffffffffffff8211610c2057604051916123d0601f8201601f191660200184612323565b82523d6000602084013e565b606090565b919082039182116123ee57565b634e487b7160e01b600052601160045260246000fd5b600260015414612415576002600155565b604051633ee5aeb560e01b8152600490fd5b1561242e57565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cd85b19481251608a1b6044820152606490fd5b1561246c57565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b91908110156122a85760051b0190565b356001600160a01b03811681036101bd5790565b156124cd57565b60405162461bcd60e51b815260206004820152600f60248201526e53616c65206e6f742061637469766560881b6044820152606490fd5b1561250b57565b60405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606490fd5b1561254a57565b60405162461bcd60e51b815260206004820152600a60248201526914d85b1948195b99195960b21b6044820152606490fd5b1561258357565b60405162461bcd60e51b81526020600482015260166024820152752132b637bb9036b4b71031b7b73a3934b13aba34b7b760511b6044820152606490fd5b156125c857565b60405162461bcd60e51b81526020600482015260116024820152702d32b9379031b7b73a3934b13aba34b7b760791b6044820152606490fd5b1561260857565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606490fd5b818102929181159184041417156123ee57565b811561265c570490565b634e487b7160e01b600052601260045260246000fd5b919082018092116123ee57565b1561268657565b60405162461bcd60e51b815260206004820152601660248201527504578636565647320746f6b656e2068617264206361760541b6044820152606490fd5b156126cb57565b60405162461bcd60e51b815260206004820152601860248201527f45786365656473206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b9061271a8261226d565b50600f81015460ff8160101c16156129415760081c60ff166129075760009280845260206005815260408086203387528252808620600260018201549101908154808211156128ce57600c87015460081c60ff16156128c557600e87015491600d8801546127888185612672565b8442106000146127a057505050505050505050509050565b421061289b57506127b192506123e1565b945b85156128595754825163a9059cbb60e01b815233600482015260248101879052908490829060449082908c906001600160a01b03165af1801561284f577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c9596979850612832575b50612827868254612672565b9055519384523393a3565b61284890843d86116103f9576103f18183612323565b503861281b565b83513d8a823e3d90fd5b60648484519062461bcd60e51b825280600483015260248201527f4e6f20746f6b656e7320636c61696d61626c6520617420746869732074696d656044820152fd5b6128b56128ba926128af6128bf96426123e1565b9061263f565b612652565b6123e1565b946127b3565b6128bf916123e1565b835162461bcd60e51b81526004810186905260126024820152714e6f20746f6b656e7320746f20636c61696d60701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481dd85cc818d85b98d95b1b195960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481b9bdd08199a5b985b1a5e995960721b6044820152606490fd5b906129858261226d565b5090600f82015460ff8160101c1615908115612a55575b50612a4d5760009283526005602052604083209060018060a01b0316835260205260408220600260018201549101549081811115612a4757600c83015460081c60ff1615612a3a57600d600e8401549301546129f88185612672565b844210600014612a0a57505050505090565b93945091929091904210612a265750612a2392506123e1565b90565b6128b56128ba926128af612a2396426123e1565b909150612a2392506123e1565b50505090565b505050600090565b60ff915060081c163861299c565b15612a6a57565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fdfea26469706673582212202bb1d862ae6303e820ae572722b24d2d90d3c235d966efd3e67e32403007152464736f6c63430008140033",
  "deployedBytecode": "0x610180604052600436101561001c575b361561001a57600080fd5b005b60003560e01c8063099a04e5146121fc578063178021e3146121de578063301e3ecb146120515780633089448a14611da957806346e04a2f14611d855780634b25bfce146116995780634b64218b14611d165780635b7baf6414611aa757806364b3b84414611793578063715018a61461173a57806377d235b2146116e65780637d22c35c146116995780638da5cb5b1461167057806394dc9cf314611386578063aa92938014611028578063b21ed4eb1461072e578063b5f522f714610561578063bd94b00514610453578063c24521c614610435578063c415b95c1461040c578063cea9d26f1461035c578063d2c35ce8146102a7578063e9c21a15146101f0578063f02a9df8146101c25763f2fde38b0361000f57346101bd5760203660031901126101bd5761014d612257565b6101556122be565b6001600160a01b039081169081156101a457600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346101bd5760403660031901126101bd5760206101e86101e0612241565b60043561297b565b604051908152f35b346101bd5760403660031901126101bd57610209612241565b6000606060405161021981612307565b8281528260208201528260408201520152600435600052600560205260406000209060018060a01b03166000526020526080604060002060405161025c81612307565b815491828252600181015460208301908152606060ff600360028501549460408701958652015416930192151583526040519384525160208401525160408301525115156060820152f35b346101bd5760203660031901126101bd576102c0612257565b6102c86122be565b6001600160a01b0390811690811561031757600254826001600160601b0360a01b821617600255167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38600080a3005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6c6c6563746f722061646472657373000000000000006044820152606490fd5b346101bd5760603660031901126101bd57600060206103c061037c612257565b610384612241565b61038c6122be565b60405163a9059cbb60e01b81526001600160a01b039091166004820152604480356024830152909485938492839190820190565b03926001600160a01b03165af18015610400576103d957005b61001a9060203d81116103f9575b6103f18183612323565b810190612345565b503d6103e7565b6040513d6000823e3d90fd5b346101bd5760003660031901126101bd576002546040516001600160a01b039091168152602090f35b346101bd5760003660031901126101bd576020600454604051908152f35b346101bd5760203660031901126101bd5760043561046f6122be565b6104fd602061047d8361226d565b50600f8101610100815460ff811680610552575b61049a906124c6565b61ffff191617905560018060a01b036104c881835416916013840154169260106003820154910154906123e1565b60405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529092839190829060009082906044820190565b03925af1801561040057610534575b507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a2005b61054b9060203d81116103f9576103f18183612323565b508161050c565b50600881901c60ff1615610491565b346101bd5760203660031901126101bd576004356004548110156101bd5761058a60ff9161226d565b5080610120528080838180808080808080808080600f600e600d600c600b600a60096008600760066005600460038d60018060a01b039054169d60018060a01b0360018201541661016052600281015460c05201549d01549d01549d01549d01549d01549d01549d01549d01549d01549d01549e01549e01549e6010810154610100526011810154608052601281015460e052601360018060a01b039101541660a05260405180610140525261016051602061014051015260c05160406101405101526060610140510152608061014051015260a061014051015260c061014051015260e061014051015261010061014051015261012061014051015261014080510152610160610140510152818116151561018061014051015260081c1615156101a06101405101526101c06101405101526101e06101405101528181161515610200610140510152818160081c16151561022061014051015260101c1615156102406101405101526101005161026061014051015260805161028061014051015260e0516102a061014051015260a0516102c06101405101526102e061014051f35b6102003660031901126101bd57610743612257565b61074b612241565b610184359081151582036101bd576101a43515156101a435036101bd57610770612404565b6003543410610ff0576001600160a01b03831615610fb35760443515610f7f5760643515610f475760843515610f0b5760a43515610ecd5760c43515610e915760e43515610e535760c43560843511610e0f5760e43560a43511610dbf576101043515610d7a57610104356101243510610d355742610144351115610cf15761014435610164351115610ca2576101a435610c55575b6040516323b872dd60e01b815233600482015230602482015260648035604483015260209082908160006001600160a01b0389165af180156104005761085491600091610c36575b5061235d565b6004549160405191610865836122ea565b6001600160a01b03858116845216602083015260443560408301526064356060830152608435608083015260a43560a083015260c43560c083015260e43560e08301526101043561010083015261012435610120830152610144356101408301526101643561016083015215156101808201526101a43515156101a08201526101c4356101c08201526101e4356101e08201526001610200820152600061022082018190526102408201819052610260820181905261028082018190526102a0820152336102c082015268010000000000000000821015610c2057600182016004556109508261226d565b610c0a5760139060018060a01b038351166001600160601b0360a01b8254161781556001810160018060a01b036020850151166001600160601b0360a01b82541617905560408301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151600682015560e0830151600782015561010083015160088201556101208301516009820155610140830151600a820155610160830151600b820155610a3c600c8201610a206101808601511515829060ff801983541691151516179055565b6101a0850151815461ff00191690151560081b61ff0016179055565b6101c0830151600d8201556101e0830151600e820155600f8101610a736102008501511515829060ff801983541691151516179055565b610220840151815461ff00191690151560081b61ff0016178155610240840151151562ff000082549160101b169062ff00001916179055610260830151601082015561028083015160118201556102a0830151601282015501906102c060018060a01b03910151166001600160601b0360a01b825416179055600080808060018060a01b0360025416600354905af1610b0a6123a1565b5015610bcf57600354803411610b74575b5060209160405160643581526101443584820152610164356040820152827f68196e1e9193049a9f69ac802f2e2bf089bfe2d7f7071e492205128671544d736060339460018060a01b031693a460018055604051908152f35b60008080610b838194346123e1565b335af1610b8e6123a1565b5015610b9a5782610b1b565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610c4f915060203d6020116103f9576103f18183612323565b8561084e565b6101c4356108065760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67206475726174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f456e642074696d65206d7573742062652061667465722073746172742074696d6044820152606560f81b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f53746172742074696d65206d75737420626520696e20746865206675747572656044820152fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206d696e20636f6e747269627574696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f546f6b656e20736f667420636170206d757374206265203c3d20686172642063604482015261061760f41b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f45544820736f667420636170206d757374206265203c3d2068617264206361706044820152fd5b60405162461bcd60e51b81526020600482015260166024820152750496e76616c696420746f6b656e2068617264206361760541b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152730496e76616c6964204554482068617264206361760641b6044820152606490fd5b60405162461bcd60e51b81526020600482015260166024820152750496e76616c696420746f6b656e20736f6674206361760541b6044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152730496e76616c69642045544820736f6674206361760641b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f0496e76616c69642068617264206361760841b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207261746560a01b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b346101bd576020806003193601126101bd5760043590611046612404565b61104f8261226d565b50600f81019182549160ff831680611377575b61106b906124c6565b600b81015442118015611365575b15611327576013810180546001600160a01b0395908616949161109d338714612465565b846001850196888854161560001461131557601186015460048701541115945b85156112a0575050825462ff000019166201000017835550600c84015460081c60ff16611295575b85548716858161122e57505061111360008080808b86541660118a0154905af161110d6123a1565b50612a63565b8461112760038601546010870154906123e1565b806111c4575b5050505b805460ff1916905515611196577f52c66055cf7320a956274f218515348b0138fe56ed320fef5d3d13e1f120dbef936040935416156000146111895760106011820154915b0154918351928352820152a25b60018055005b6010601282015491611176565b505050507f2c56893f6f6026d19bd17b7d05c9f15c522de1ae2b1c3a825f91a73c799321f2600080a2611183565b8554925460405163a9059cbb60e01b8152908a166001600160a01b0316600482015260248101919091529182908916816000816044810103925af1801561040057611211575b848161112d565b61122790853d87116103f9576103f18183612323565b508761120a565b8254601287015460405163a9059cbb60e01b8152918b166001600160a01b031660048301526024820152918290816000816044810103925af1801561040057611278575b50611113565b61128e90863d88116103f9576103f18183612323565b5088611272565b42600e8501556110e5565b61ff0019166101001784558554600387015460405163a9059cbb60e01b81526001600160a01b039093166004840152602483015290925082908916816000816044810103925af18015610400576112f8575b50611131565b61130e90853d87116103f9576103f18183612323565b50876112f2565b601286015460058701541115946110bd565b60405162461bcd60e51b815260048101839052601660248201527553616c65207374696c6c20696e2070726f677265737360501b6044820152606490fd5b50601081015460038201541115611079565b50600883901c60ff1615611062565b6020806003193601126101bd5760043561139e612404565b6113a78161226d565b50906113c2600f83015460ff81169081611661575b506124c6565b60018201546001600160a01b039390841661162b576113e7600a840154421015612504565b6113f7600b840154421115612543565b611407600884015434101561257c565b6114123415156125c1565b600c83019360ff855416611602575b670de0b6b3a764000061143860028601543461263f565b049360108101805461145961144d8883612672565b6003850154101561267f565b601183019182549161146b3484612672565b6006860154106115c65788999260ff94926114be8a9b6114c7946114ad9c60005260058c526040600020336000528c526114b960406000209d8e349054612672565b60098c015410156126c4565b612672565b90553490612672565b90556114d4348754612672565b8655600186016114e5898254612672565b90556040513481528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c16156115295760018055005b5460405163a9059cbb60e01b8152336004820152602481018790529391839185916044918391600091165af1908115610400577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c936002926115a9575b5001611593858254612672565b90556040519384523393a3808080808080611183565b6115bf90843d86116103f9576103f18183612323565b5086611586565b60405162461bcd60e51b8152600481018890526014602482015273045786365656473204554482068617264206361760641b6044820152606490fd5b8260005260068252604060002033600052825261162660ff60406000205416612601565b611421565b6064906040519062461bcd60e51b82526004820152600f60248201526e4e6f7420616e204554482073616c6560881b6044820152fd5b60ff915060081c1615856113bc565b346101bd5760003660031901126101bd576000546040516001600160a01b039091168152602090f35b346101bd5760403660031901126101bd576116b2612241565b600435600052600660205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101bd5760203660031901126101bd577fc1990e461c862d0f130619e2010621437b7c3c5aef23c1231fa4484dbbc4b6b860406004356117256122be565b600354908060035582519182526020820152a1005b346101bd5760003660031901126101bd576117536122be565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101bd5760203660031901126101bd5760006102c06040516117b5816122ea565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201528261016082015282610180820152826101a0820152826101c0820152826101e08201528261020082015282610220820152826102408201528261026082015282610280820152826102a082015201526102e061186260045461185d600435918210612427565b61226d565b5060405161186f816122ea565b60018060a01b038254169182825260018060a01b036001820154166020830152600281015460408301526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b81015461016083015260ff600c820154818116151561018085015260081c1615156101a0830152600d8101546101c0830152600e8101546101e083015260ff600f8201548181161515610200850152818160081c16151561022085015260101c1615156102408301526010810154610260830152601181015461028083015260128101546102a0830152601360018060a01b03910154166102c082015260405191825260018060a01b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010081015161010083015261012081015161012083015261014081015161014083015261016081015161016083015261018081015115156101808301526101a081015115156101a08301526101c08101516101c08301526101e08101516101e08301526102008101511515610200830152610220810151151561022083015261024081015115156102408301526102608101516102608301526102808101516102808301526102a08101516102a08301526102c060018060a01b03910151166102c0820152f35b346101bd576020806003193601126101bd57600435611ac4612404565b611acd8161226d565b5091600f83015460ff8116611cdd5760081c60ff1615611ca457816000526005815260406000203360005281526040600020928354938415611c6757600301805460ff8116611c2f5760ff1916600190811790915501546001600160a01b031680611bb45750600080808086335af1611b446123a1565b5015611b7c577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f905b6040519384523393a360018055005b6064906040519062461bcd60e51b825260048201526011602482015270115512081c99599d5b990819985a5b1959607a1b6044820152fd5b60405163a9059cbb60e01b81523360048201526024810185905291908190839060449082906000905af1918215610400577ffc8dc45aafeb84bf841ffa6c1b48653bea5b43662ab6685b9683e2e5b72fc74f92611c12575b50611b6d565b611c2890823d84116103f9576103f18183612323565b5084611c0c565b60405162461bcd60e51b815260048101859052601060248201526f105b1c9958591e481c99599d5b99195960821b6044820152606490fd5b60405162461bcd60e51b8152600481018490526015602482015274139bc818dbdb9d1c9a589d5d1a5bdb88199bdd5b99605a1b6044820152606490fd5b6064906040519062461bcd60e51b82526004820152601260248201527114d85b19481b9bdd0818d85b98d95b1b195960721b6044820152fd5b60405162461bcd60e51b815260048101839052601160248201527053616c65207374696c6c2061637469766560781b6044820152606490fd5b346101bd5760403660031901126101bd57611d2f612241565b600435600052600560205260406000209060018060a01b03166000526020526080604060002080549060018101549060ff6003600283015492015416916040519384526020840152604083015215156060820152f35b346101bd5760203660031901126101bd57611d9e612404565b611183600435612710565b346101bd5760403660031901126101bd57602435600435611dc8612404565b611dd18161226d565b50611dea600f82015460ff8116908161166157506124c6565b60018101546001600160a01b039081169390841561201957611e12600a840154421015612504565b611e22600b840154421115612543565b611e32600884015483101561257c565b611e3d8215156125c1565b600c83019260ff845416611fee575b670de0b6b3a7640000611e6360028301548561263f565b04956010820194611e7861144d898854612672565b6012830194611e88818754612672565b600785015410611fa95787600052602095600587526040600020336000528752604060002097611ec8611ebc848b54612672565b600988015410156126c4565b6040516323b872dd60e01b815233600482015230602482015260448101849052948890869060649082906000905af19485156104005760ff95611f1291600091611f8c575061235d565b611f1d8b8254612672565b9055611f2a828254612672565b9055611f37818854612672565b875560018701611f488a8254612672565b90556040519081528886820152877fe8d7e55108ae7ddb60173461d2950c7a8e22a7ac7f442825564fe84c8c6f9a3860403393a35460081c16156115295760018055005b611fa391508a3d8c116103f9576103f18183612323565b8d61084e565b60405162461bcd60e51b815260206004820152601e60248201527f4578636565647320746f6b656e207061796d656e7420686172642063617000006044820152606490fd5b84600052600660205260406000203360005260205261201460ff60406000205416612601565b611e4c565b60405162461bcd60e51b815260206004820152601060248201526f4e6f74206120746f6b656e2073616c6560801b6044820152606490fd5b346101bd5760603660031901126101bd576024803567ffffffffffffffff6004358183116101bd57366023840112156101bd5782600401359182116101bd57838301928436918460051b0101116101bd5760443591821515928381036101bd576120be6004548410612427565b6120c78361226d565b5060ff600f82015460101c166121a157601301546001600160a01b03906120f19082163314612465565b60005b8381106120fd57005b8460005286857f6ac489d45eb8bf1a970353adde961baf16a2ab4af3d2a8f0cb488b0cd30af85684612172612148868a6020976006895260406000208661214d6121488686866124a2565b6124b2565b16600052895261216d8c60406000209060ff801983541691151516179055565b6124a2565b16926040518a8152a3600019811461218c576001016120f4565b87634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b8152602060048201526016818901527514d85b1948185b1c9958591e48199a5b985b1a5e995960521b6044820152606490fd5b346101bd5760003660031901126101bd576020600354604051908152f35b346101bd5760403660031901126101bd576004356001600160a01b038116908190036101bd57600080808061001a946122336122be565b602435905af161110d6123a1565b602435906001600160a01b03821682036101bd57565b600435906001600160a01b03821682036101bd57565b6004548110156122a8576014906004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036122d257565b60405163118cdaa760e01b8152336004820152602490fd5b6102e0810190811067ffffffffffffffff821117610c2057604052565b6080810190811067ffffffffffffffff821117610c2057604052565b90601f8019910116810190811067ffffffffffffffff821117610c2057604052565b908160209103126101bd575180151581036101bd5790565b1561236457565b60405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b3d156123dc573d9067ffffffffffffffff8211610c2057604051916123d0601f8201601f191660200184612323565b82523d6000602084013e565b606090565b919082039182116123ee57565b634e487b7160e01b600052601160045260246000fd5b600260015414612415576002600155565b604051633ee5aeb560e01b8152600490fd5b1561242e57565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cd85b19481251608a1b6044820152606490fd5b1561246c57565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b91908110156122a85760051b0190565b356001600160a01b03811681036101bd5790565b156124cd57565b60405162461bcd60e51b815260206004820152600f60248201526e53616c65206e6f742061637469766560881b6044820152606490fd5b1561250b57565b60405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606490fd5b1561254a57565b60405162461bcd60e51b815260206004820152600a60248201526914d85b1948195b99195960b21b6044820152606490fd5b1561258357565b60405162461bcd60e51b81526020600482015260166024820152752132b637bb9036b4b71031b7b73a3934b13aba34b7b760511b6044820152606490fd5b156125c857565b60405162461bcd60e51b81526020600482015260116024820152702d32b9379031b7b73a3934b13aba34b7b760791b6044820152606490fd5b1561260857565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606490fd5b818102929181159184041417156123ee57565b811561265c570490565b634e487b7160e01b600052601260045260246000fd5b919082018092116123ee57565b1561268657565b60405162461bcd60e51b815260206004820152601660248201527504578636565647320746f6b656e2068617264206361760541b6044820152606490fd5b156126cb57565b60405162461bcd60e51b815260206004820152601860248201527f45786365656473206d617820636f6e747269627574696f6e00000000000000006044820152606490fd5b9061271a8261226d565b50600f81015460ff8160101c16156129415760081c60ff166129075760009280845260206005815260408086203387528252808620600260018201549101908154808211156128ce57600c87015460081c60ff16156128c557600e87015491600d8801546127888185612672565b8442106000146127a057505050505050505050509050565b421061289b57506127b192506123e1565b945b85156128595754825163a9059cbb60e01b815233600482015260248101879052908490829060449082908c906001600160a01b03165af1801561284f577f880f2ef2613b092f1a0a819f294155c98667eb294b7e6bf7a3810278142c1a1c9596979850612832575b50612827868254612672565b9055519384523393a3565b61284890843d86116103f9576103f18183612323565b503861281b565b83513d8a823e3d90fd5b60648484519062461bcd60e51b825280600483015260248201527f4e6f20746f6b656e7320636c61696d61626c6520617420746869732074696d656044820152fd5b6128b56128ba926128af6128bf96426123e1565b9061263f565b612652565b6123e1565b946127b3565b6128bf916123e1565b835162461bcd60e51b81526004810186905260126024820152714e6f20746f6b656e7320746f20636c61696d60701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481dd85cc818d85b98d95b1b195960721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527114d85b19481b9bdd08199a5b985b1a5e995960721b6044820152606490fd5b906129858261226d565b5090600f82015460ff8160101c1615908115612a55575b50612a4d5760009283526005602052604083209060018060a01b0316835260205260408220600260018201549101549081811115612a4757600c83015460081c60ff1615612a3a57600d600e8401549301546129f88185612672565b844210600014612a0a57505050505090565b93945091929091904210612a265750612a2392506123e1565b90565b6128b56128ba926128af612a2396426123e1565b909150612a2392506123e1565b50505090565b505050600090565b60ff915060081c163861299c565b15612a6a57565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fdfea26469706673582212202bb1d862ae6303e820ae572722b24d2d90d3c235d966efd3e67e32403007152464736f6c63430008140033",
  "devdoc": {
    "details": "Manages token sales with features like whitelisting, vesting, and caps",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "buyWithETH(uint256)": {
        "details": "Buy tokens with ETH"
      },
      "buyWithToken(uint256,uint256)": {
        "details": "Buy tokens with ERC20 tokens"
      },
      "cancelSale(uint256)": {
        "details": "Manual cancel sale (only owner)"
      },
      "claimRefund(uint256)": {
        "details": "Claim refund if sale was unsuccessful"
      },
      "claimTokens(uint256)": {
        "details": "Claim vested tokens"
      },
      "createSale(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,uint256,uint256)": {
        "details": "Create a new token sale"
      },
      "finalizeSale(uint256)": {
        "details": "Finalize a sale"
      },
      "getClaimableTokens(uint256,address)": {
        "details": "Get claimable tokens for a user"
      },
      "getParticipation(uint256,address)": {
        "details": "Get participant information"
      },
      "getSaleCount()": {
        "details": "Get the total number of sales"
      },
      "getSaleInfo(uint256)": {
        "details": "Get sale information by ID"
      },
      "isWhitelisted(uint256,address)": {
        "details": "Check if a user is whitelisted for a sale"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rescueETH(address,uint256)": {
        "details": "Emergency function to rescue ETH sent to this contract by mistake"
      },
      "rescueTokens(address,address,uint256)": {
        "details": "Emergency function to rescue ERC20 tokens sent to this contract by mistake"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFeeCollector(address)": {
        "details": "Update fee collector address"
      },
      "updateSaleFee(uint256)": {
        "details": "Update sale fee"
      },
      "updateWhitelist(uint256,address[],bool)": {
        "details": "Whitelist users for a sale"
      }
    },
    "title": "TokenSaleManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "saleFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 399,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "sales",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(SaleConfig)386_storage)dyn_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "participations",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Participation)395_storage))"
      },
      {
        "astId": 412,
        "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SaleConfig)386_storage)dyn_storage": {
        "base": "t_struct(SaleConfig)386_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenSaleManager.SaleConfig[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Participation)395_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenSaleManager.Participation)",
        "numberOfBytes": "32",
        "value": "t_struct(Participation)395_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Participation)395_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct TokenSaleManager.Participation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Participation)395_storage)"
      },
      "t_struct(Participation)395_storage": {
        "encoding": "inplace",
        "label": "struct TokenSaleManager.Participation",
        "members": [
          {
            "astId": 388,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "contribution",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 390,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokensOwed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 392,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokensClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 394,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "refunded",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SaleConfig)386_storage": {
        "encoding": "inplace",
        "label": "struct TokenSaleManager.SaleConfig",
        "members": [
          {
            "astId": 341,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 343,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "paymentToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 345,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "rate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 347,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "hardCap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 349,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "ethSoftCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 351,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokenSoftCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 353,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "ethHardCap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 355,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokenHardCap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 357,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "minContribution",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 359,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "maxContribution",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 361,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "startTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 363,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "endTime",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 365,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "whitelistEnabled",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 367,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "vestingEnabled",
            "offset": 1,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 369,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "vestingDuration",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 371,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "vestingStart",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 373,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "isActive",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 375,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "isCancelled",
            "offset": 1,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 377,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "isFinalized",
            "offset": 2,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 379,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokensSold",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 381,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "ethRaised",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 383,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "tokenRaised",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 385,
            "contract": "contracts/extensions/TokenSale.sol:TokenSaleManager",
            "label": "creator",
            "offset": 0,
            "slot": "19",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}