{
  "address": "0xcb2cCcC8738F5D6e47f2bAe9130D79e78B0b748E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PHASE_1_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PHASE_2_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PHASE_3_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPhase",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeRemainingInCurrentPhase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "phase1Duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phase2Duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phase3Duration",
          "type": "uint256"
        }
      ],
      "name": "updatePhaseDurations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5296ba3af7f4fc87207e38a6b87a5f1b3e2cfb82118aecc8f111e18c667668f6",
  "receipt": {
    "to": null,
    "from": "0xae6009Dd36eBBE2d36DBEBA64004e31517Cc48BB",
    "contractAddress": "0xcb2cCcC8738F5D6e47f2bAe9130D79e78B0b748E",
    "transactionIndex": 41,
    "gasUsed": "405152",
    "logsBloom": "0x
    "blockHash": "0xdcbc1ed583db425339c625de99fa8fda68cb82ab6cdb27f8598f81a9ba426db2",
    "transactionHash": "0x5296ba3af7f4fc87207e38a6b87a5f1b3e2cfb82118aecc8f111e18c667668f6",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 7994626,
        "transactionHash": "0x5296ba3af7f4fc87207e38a6b87a5f1b3e2cfb82118aecc8f111e18c667668f6",
        "address": "0xcb2cCcC8738F5D6e47f2bAe9130D79e78B0b748E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xdcbc1ed583db425339c625de99fa8fda68cb82ab6cdb27f8598f81a9ba426db2"
      }
    ],
    "blockNumber": 7994626,
    "cumulativeGasUsed": "6544521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "18b9be21a98ded387dcceca8ae29bdb7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PHASE_1_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHASE_2_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHASE_3_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeRemainingInCurrentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase1Duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase2Duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase3Duration\",\"type\":\"uint256\"}],\"name\":\"updatePhaseDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/TimeControl.sol\":\"TimeControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/utils/TimeControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract TimeControl is Ownable {\\r\\n    // uint256 private lastPhase;\\r\\n    // uint256 private lastPhaseUpdateTime;\\r\\n    uint256 public launchTime;\\r\\n    bool public tradingEnabled;\\r\\n    \\r\\n    // Time-based phases\\r\\n    uint256 public  PHASE_1_DURATION = 1 hours;\\r\\n    uint256 public  PHASE_2_DURATION = 6 hours;\\r\\n    uint256 public  PHASE_3_DURATION = 24 hours;\\r\\n    \\r\\n    modifier onlyAfterLaunch() {\\r\\n        require(tradingEnabled && block.timestamp >= launchTime, \\\"Trading not yet enabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n    \\r\\n    // Optional: Ability to adjust phase durations\\r\\n    function updatePhaseDurations(\\r\\n        uint256 phase1Duration,\\r\\n        uint256 phase2Duration,\\r\\n        uint256 phase3Duration\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            !tradingEnabled, \\r\\n            \\\"Cannot modify durations after trading is enabled\\\"\\r\\n        );\\r\\n        \\r\\n\\r\\n        PHASE_1_DURATION = phase1Duration;\\r\\n        PHASE_2_DURATION = phase2Duration;\\r\\n        PHASE_3_DURATION = phase3Duration;\\r\\n    }\\r\\n\\r\\n    function getCurrentPhase() public view returns (uint8) {\\r\\n        if (!tradingEnabled) return 0;\\r\\n        \\r\\n        uint256 timeSinceLaunch = block.timestamp - launchTime;\\r\\n        \\r\\n        if (timeSinceLaunch < PHASE_1_DURATION) {\\r\\n            return 1;\\r\\n        } else if (timeSinceLaunch < PHASE_1_DURATION + PHASE_2_DURATION) {\\r\\n            return 2;\\r\\n        } else if (timeSinceLaunch < PHASE_1_DURATION + PHASE_2_DURATION + PHASE_3_DURATION) {\\r\\n            return 3;\\r\\n        } else {\\r\\n            return 4;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Utility function to check time remaining in current phase\\r\\n    function getTimeRemainingInCurrentPhase() external view returns (uint256) {\\r\\n        if (!tradingEnabled) return 0;\\r\\n        \\r\\n        uint256 timeSinceLaunch = block.timestamp - launchTime;\\r\\n        uint8 currentPhase = getCurrentPhase();\\r\\n        \\r\\n        if (currentPhase == 1) {\\r\\n            return PHASE_1_DURATION - timeSinceLaunch;\\r\\n        } else if (currentPhase == 2) {\\r\\n            return (PHASE_1_DURATION + PHASE_2_DURATION) - timeSinceLaunch;\\r\\n        } else if (currentPhase == 3) {\\r\\n            return (PHASE_1_DURATION + PHASE_2_DURATION + PHASE_3_DURATION) - timeSinceLaunch;\\r\\n        }\\r\\n        \\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n// function getCurrentPhase() public returns (uint256) {\\r\\n//     if (block.timestamp > lastPhaseUpdateTime + 5 minutes) {  \\r\\n//         lastPhase = _calculatePhase();  // Now calling a private function\\r\\n//         lastPhaseUpdateTime = block.timestamp;\\r\\n//     }\\r\\n//     return lastPhase;\\r\\n// }\\r\\n\\r\\n\\r\\n// function calculatePhase() internal view returns (uint256) {\\r\\n//     uint256 elapsedTime = block.timestamp - launchTime;  \\r\\n\\r\\n//     if (elapsedTime < 1 hours) {\\r\\n//         return 1;  // Phase 1: Initial Launch\\r\\n//     } else if (elapsedTime < 6 hours) {\\r\\n//         return 2;  // Phase 2: Early Trading\\r\\n//     } else if (elapsedTime < 24 hours) {\\r\\n//         return 3;  // Phase 3: Market Stability\\r\\n//     } else {\\r\\n//         return 4;  // Phase 4: Fully Operational\\r\\n//     }\\r\\n// }\\r\\n\",\"keccak256\":\"0xb5df87a7b42c2968347e995e9e862f16bb16c737357ca5118ec170289f2dc2fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461008d5733156100775760008054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3610e10600355615460600455620151806005556104b290816100938239f35b631e4fbdf760e01b815260006004820152602490fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081634ada218b14610310575080635539aa86146102f15780636839c1bd146102d2578063715018a614610275578063790ca4131461025657806384825faa146101c25780638da5cb5b1461019a578063938ece891461017c57806395b8b71b14610158578063a3a40ea51461012d5763f2fde38b1461009d57600080fd5b34610129576020366003190112610129576001600160a01b03823581811693919290849003610125576100ce610331565b831561010f57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b83823461015457816003193601126101545760209060ff61014c61038d565b915191168152f35b5080fd5b8382346101545781600319360112610154576020906101756103fe565b9051908152f35b50903461012957826003193601126101295760209250549051908152f35b838234610154578160031936011261015457905490516001600160a01b039091168152602090f35b5034610129576060366003190112610129576101dc610331565b60ff600254166101fa57508035600355602435905560443560055580f35b906020608492519162461bcd60e51b8352820152603060248201527f43616e6e6f74206d6f64696679206475726174696f6e7320616674657220747260448201526f18591a5b99c81a5cc8195b98589b195960821b6064820152fd5b8382346101545781600319360112610154576020906001549051908152f35b83346102cf57806003193601126102cf5761028e610331565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8382346101545781600319360112610154576020906003549051908152f35b8382346101545781600319360112610154576020906005549051908152f35b84903461015457816003193601126101545760209060ff6002541615158152f35b6000546001600160a01b0316330361034557565b60405163118cdaa760e01b8152336004820152602490fd5b9190820391821161036a57565b634e487b7160e01b600052601160045260246000fd5b9190820180921161036a57565b60ff60025416156103f9576103a46001544261035d565b600354808210156103b6575050600190565b600454906103c48282610380565b8310156103d357505050600290565b6103e9916103e091610380565b60055490610380565b11156103f457600390565b600490565b600090565b60ff60025416156103f9576104156001544261035d565b60ff61041f61038d565b166001810361043857506104359060035461035d565b90565b6002810361045957506104359061045460035460045490610380565b61035d565b6003146104665750600090565b610435906104546103e06003546004549061038056fea2646970667358221220f66bc95ece83f88de088e50b23825c24525529e13bdc6c90d707bee50f459a6264736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c9081634ada218b14610310575080635539aa86146102f15780636839c1bd146102d2578063715018a614610275578063790ca4131461025657806384825faa146101c25780638da5cb5b1461019a578063938ece891461017c57806395b8b71b14610158578063a3a40ea51461012d5763f2fde38b1461009d57600080fd5b34610129576020366003190112610129576001600160a01b03823581811693919290849003610125576100ce610331565b831561010f57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b83823461015457816003193601126101545760209060ff61014c61038d565b915191168152f35b5080fd5b8382346101545781600319360112610154576020906101756103fe565b9051908152f35b50903461012957826003193601126101295760209250549051908152f35b838234610154578160031936011261015457905490516001600160a01b039091168152602090f35b5034610129576060366003190112610129576101dc610331565b60ff600254166101fa57508035600355602435905560443560055580f35b906020608492519162461bcd60e51b8352820152603060248201527f43616e6e6f74206d6f64696679206475726174696f6e7320616674657220747260448201526f18591a5b99c81a5cc8195b98589b195960821b6064820152fd5b8382346101545781600319360112610154576020906001549051908152f35b83346102cf57806003193601126102cf5761028e610331565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8382346101545781600319360112610154576020906003549051908152f35b8382346101545781600319360112610154576020906005549051908152f35b84903461015457816003193601126101545760209060ff6002541615158152f35b6000546001600160a01b0316330361034557565b60405163118cdaa760e01b8152336004820152602490fd5b9190820391821161036a57565b634e487b7160e01b600052601160045260246000fd5b9190820180921161036a57565b60ff60025416156103f9576103a46001544261035d565b600354808210156103b6575050600190565b600454906103c48282610380565b8310156103d357505050600290565b6103e9916103e091610380565b60055490610380565b11156103f457600390565b600490565b600090565b60ff60025416156103f9576104156001544261035d565b60ff61041f61038d565b166001810361043857506104359060035461035d565b90565b6002810361045957506104359061045460035460045490610380565b61035d565b6003146104665750600090565b610435906104546103e06003546004549061038056fea2646970667358221220f66bc95ece83f88de088e50b23825c24525529e13bdc6c90d707bee50f459a6264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/utils/TimeControl.sol:TimeControl",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5247,
        "contract": "contracts/utils/TimeControl.sol:TimeControl",
        "label": "launchTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5249,
        "contract": "contracts/utils/TimeControl.sol:TimeControl",
        "label": "tradingEnabled",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5252,
        "contract": "contracts/utils/TimeControl.sol:TimeControl",
        "label": "PHASE_1_DURATION",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5255,
        "contract": "contracts/utils/TimeControl.sol:TimeControl",
        "label": "PHASE_2_DURATION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5258,
        "contract": "contracts/utils/TimeControl.sol:TimeControl",
        "label": "PHASE_3_DURATION",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}