{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/extensions/TokenSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\n\r\n/**\r\n * @title TokenSaleManager\r\n * @dev Manages token sales with features like whitelisting, vesting, and caps\r\n */\r\ncontract TokenSaleManager is Ownable, ReentrancyGuard {\r\n    address public feeCollector;\r\n    uint256 public saleFee;\r\n\r\n    // Track sale configurations\r\n    struct SaleConfig {\r\n        address token; // Token being sold\r\n        address paymentToken; // Token used to buy (address(0) for ETH)\r\n        uint256 rate; // Rate of token per payment token (or ETH) in base units\r\n        uint256 hardCap; // Maximum tokens to sell\r\n        uint256 softCap; // Minimum tokens to sell for sale to be successful\r\n        uint256 minContribution; // Minimum contribution per buyer\r\n        uint256 maxContribution; // Maximum contribution per buyer\r\n        uint256 startTime; // Sale start timestamp\r\n        uint256 endTime; // Sale end timestamp\r\n        bool whitelistEnabled; // Whether whitelist is enabled\r\n        bool vestingEnabled; // Whether vesting is enabled\r\n        uint256 vestingDuration; // Vesting duration in seconds\r\n        uint256 vestingStart; // When vesting starts after sale ends\r\n        bool isActive; // Whether the sale is active\r\n        bool isCancelled; // Whether the sale is cancelled\r\n        bool isFinalized; // Whether the sale is finalized\r\n        uint256 tokensSold; // Total tokens sold\r\n        uint256 amountRaised; // Total amount raised\r\n    }\r\n\r\n    // Track participant contributions and vesting\r\n    struct Participation {\r\n        uint256 contribution; // How much they contributed\r\n        uint256 tokensOwed; // How many tokens they're owed\r\n        uint256 tokensClaimed; // How many tokens they've claimed\r\n        bool refunded; // Whether they've been refunded (if sale fails)\r\n    }\r\n\r\n    // All sales created\r\n    SaleConfig[] public sales;\r\n\r\n    // Mapping: saleId => participant address => participation\r\n    mapping(uint256 => mapping(address => Participation)) public participations;\r\n\r\n    // Mapping: saleId => participant address => whitelist status\r\n    mapping(uint256 => mapping(address => bool)) public whitelist;\r\n\r\n    // Events\r\n    event SaleCreated(\r\n        uint256 indexed saleId,\r\n        address indexed token,\r\n        address indexed creator,\r\n        uint256 hardCap,\r\n        uint256 startTime,\r\n        uint256 endTime\r\n    );\r\n    event WhitelistUpdated(\r\n        uint256 indexed saleId,\r\n        address indexed user,\r\n        bool status\r\n    );\r\n    event TokensPurchased(\r\n        uint256 indexed saleId,\r\n        address indexed buyer,\r\n        uint256 contribution,\r\n        uint256 tokensReceived\r\n    );\r\n    event TokensClaimed(\r\n        uint256 indexed saleId,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n    event SaleFinalized(\r\n        uint256 indexed saleId,\r\n        uint256 tokensSold,\r\n        uint256 amountRaised\r\n    );\r\n    event SaleCancelled(uint256 indexed saleId);\r\n    event ContributionRefunded(\r\n        uint256 indexed saleId,\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n    event FeeCollectorUpdated(\r\n        address indexed oldCollector,\r\n        address indexed newCollector\r\n    );\r\n    event SaleFeeUpdated(uint256 oldFee, uint256 newFee);\r\n\r\n    constructor(address _feeCollector, uint256 _saleFee) Ownable(msg.sender) {\r\n        require(_feeCollector != address(0), \"Invalid fee collector\");\r\n        feeCollector = _feeCollector;\r\n        saleFee = _saleFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new token sale\r\n     */\r\n    function createSale(\r\n        address token,\r\n        address paymentToken,\r\n        uint256 rate,\r\n        uint256 hardCap,\r\n        uint256 softCap,\r\n        uint256 minContribution,\r\n        uint256 maxContribution,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        bool whitelistEnabled,\r\n        bool vestingEnabled,\r\n        uint256 vestingDuration,\r\n        uint256 vestingStart\r\n    ) external payable nonReentrant returns (uint256) {\r\n        require(msg.value >= saleFee, \"Insufficient fee\");\r\n        require(token != address(0), \"Invalid token address\");\r\n        require(rate > 0, \"Invalid rate\");\r\n        require(hardCap > 0, \"Invalid hard cap\");\r\n        require(softCap > 0 && softCap <= hardCap, \"Invalid soft cap\");\r\n        require(minContribution > 0, \"Invalid min contribution\");\r\n        require(maxContribution >= minContribution, \"Invalid max contribution\");\r\n        require(\r\n            startTime > block.timestamp,\r\n            \"Start time must be in the future\"\r\n        );\r\n        require(endTime > startTime, \"End time must be after start time\");\r\n\r\n        if (vestingEnabled) {\r\n            require(vestingDuration > 0, \"Invalid vesting duration\");\r\n        }\r\n\r\n        // Transfer tokens from creator to this contract\r\n        IERC20 tokenContract = IERC20(token);\r\n        require(\r\n            tokenContract.transferFrom(msg.sender, address(this), hardCap),\r\n            \"Token transfer failed\"\r\n        );\r\n\r\n        // Create new sale\r\n        uint256 saleId = sales.length;\r\n        sales.push(\r\n            SaleConfig({\r\n                token: token,\r\n                paymentToken: paymentToken,\r\n                rate: rate,\r\n                hardCap: hardCap,\r\n                softCap: softCap,\r\n                minContribution: minContribution,\r\n                maxContribution: maxContribution,\r\n                startTime: startTime,\r\n                endTime: endTime,\r\n                whitelistEnabled: whitelistEnabled,\r\n                vestingEnabled: vestingEnabled,\r\n                vestingDuration: vestingDuration,\r\n                vestingStart: vestingStart,\r\n                isActive: true,\r\n                isCancelled: false,\r\n                isFinalized: false,\r\n                tokensSold: 0,\r\n                amountRaised: 0\r\n            })\r\n        );\r\n\r\n        // Pay fee to collector\r\n        (bool sent, ) = payable(feeCollector).call{value: saleFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n\r\n        // Refund excess fee\r\n        if (msg.value > saleFee) {\r\n            (bool refundSent, ) = payable(msg.sender).call{\r\n                value: msg.value - saleFee\r\n            }(\"\");\r\n            require(refundSent, \"Refund failed\");\r\n        }\r\n\r\n        emit SaleCreated(\r\n            saleId,\r\n            token,\r\n            msg.sender,\r\n            hardCap,\r\n            startTime,\r\n            endTime\r\n        );\r\n\r\n        return saleId;\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelist users for a sale\r\n     */\r\n    function updateWhitelist(\r\n        uint256 saleId,\r\n        address[] calldata users,\r\n        bool status\r\n    ) external {\r\n        require(saleId < sales.length, \"Invalid sale ID\");\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(!sale.isFinalized, \"Sale already finalized\");\r\n        require(\r\n            msg.sender == owner() || msg.sender == tx.origin,\r\n            \"Not authorized\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            whitelist[saleId][users[i]] = status;\r\n            emit WhitelistUpdated(saleId, users[i], status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens with ETH\r\n     */\r\n    function buyWithETH(uint256 saleId) external payable nonReentrant {\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\r\n        require(sale.paymentToken == address(0), \"Not an ETH sale\");\r\n        require(block.timestamp >= sale.startTime, \"Sale not started\");\r\n        require(block.timestamp <= sale.endTime, \"Sale ended\");\r\n        require(msg.value >= sale.minContribution, \"Below min contribution\");\r\n        require(msg.value > 0, \"Zero contribution\");\r\n\r\n        if (sale.whitelistEnabled) {\r\n            require(whitelist[saleId][msg.sender], \"Not whitelisted\");\r\n        }\r\n\r\n        // Calculate tokens to receive\r\n        uint256 tokenAmount = (msg.value * sale.rate) / 1 ether;\r\n        require(\r\n            sale.tokensSold + tokenAmount <= sale.hardCap,\r\n            \"Exceeds hard cap\"\r\n        );\r\n\r\n        // Check maximum contribution limit\r\n        Participation storage participation = participations[saleId][\r\n            msg.sender\r\n        ];\r\n        uint256 totalContribution = participation.contribution + msg.value;\r\n        require(\r\n            totalContribution <= sale.maxContribution,\r\n            \"Exceeds max contribution\"\r\n        );\r\n\r\n        // Update sale and participation state\r\n        sale.tokensSold += tokenAmount;\r\n        sale.amountRaised += msg.value;\r\n        participation.contribution += msg.value;\r\n        participation.tokensOwed += tokenAmount;\r\n\r\n        emit TokensPurchased(saleId, msg.sender, msg.value, tokenAmount);\r\n\r\n        // If vesting is not enabled, transfer tokens immediately\r\n        if (!sale.vestingEnabled) {\r\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\r\n            participation.tokensClaimed += tokenAmount;\r\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Buy tokens with ERC20 tokens\r\n     */\r\n    function buyWithToken(\r\n        uint256 saleId,\r\n        uint256 amount\r\n    ) external nonReentrant {\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\r\n        require(sale.paymentToken != address(0), \"Not a token sale\");\r\n        require(block.timestamp >= sale.startTime, \"Sale not started\");\r\n        require(block.timestamp <= sale.endTime, \"Sale ended\");\r\n        require(amount >= sale.minContribution, \"Below min contribution\");\r\n        require(amount > 0, \"Zero contribution\");\r\n\r\n        if (sale.whitelistEnabled) {\r\n            require(whitelist[saleId][msg.sender], \"Not whitelisted\");\r\n        }\r\n\r\n        // Calculate tokens to receive\r\n        uint256 tokenAmount = (amount * sale.rate) / 10 ** 18;\r\n        require(\r\n            sale.tokensSold + tokenAmount <= sale.hardCap,\r\n            \"Exceeds hard cap\"\r\n        );\r\n\r\n        // Check maximum contribution limit\r\n        Participation storage participation = participations[saleId][\r\n            msg.sender\r\n        ];\r\n        uint256 totalContribution = participation.contribution + amount;\r\n        require(\r\n            totalContribution <= sale.maxContribution,\r\n            \"Exceeds max contribution\"\r\n        );\r\n\r\n        // Transfer payment tokens from user to contract\r\n        IERC20 paymentToken = IERC20(sale.paymentToken);\r\n        require(\r\n            paymentToken.transferFrom(msg.sender, address(this), amount),\r\n            \"Token transfer failed\"\r\n        );\r\n\r\n        // Update sale and participation state\r\n        sale.tokensSold += tokenAmount;\r\n        sale.amountRaised += amount;\r\n        participation.contribution += amount;\r\n        participation.tokensOwed += tokenAmount;\r\n\r\n        emit TokensPurchased(saleId, msg.sender, amount, tokenAmount);\r\n\r\n        // If vesting is not enabled, transfer tokens immediately\r\n        if (!sale.vestingEnabled) {\r\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\r\n            participation.tokensClaimed += tokenAmount;\r\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Claim vested tokens\r\n     */\r\n    function claimTokens(uint256 saleId) external nonReentrant {\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(sale.isFinalized, \"Sale not finalized\");\r\n        require(!sale.isCancelled, \"Sale was cancelled\");\r\n\r\n        Participation storage participation = participations[saleId][\r\n            msg.sender\r\n        ];\r\n        require(\r\n            participation.tokensOwed > participation.tokensClaimed,\r\n            \"No tokens to claim\"\r\n        );\r\n\r\n        uint256 claimableTokens;\r\n\r\n        if (sale.vestingEnabled) {\r\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\r\n\r\n            if (block.timestamp < sale.vestingStart) {\r\n                // Vesting hasn't started yet\r\n                return;\r\n            } else if (block.timestamp >= vestingEndTime) {\r\n                // Vesting completed - claim all remaining tokens\r\n                claimableTokens =\r\n                    participation.tokensOwed -\r\n                    participation.tokensClaimed;\r\n            } else {\r\n                // Vesting in progress - calculate proportional amount\r\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\r\n                uint256 totalClaimable = (participation.tokensOwed *\r\n                    vestingElapsed) / sale.vestingDuration;\r\n                claimableTokens = totalClaimable - participation.tokensClaimed;\r\n            }\r\n        } else {\r\n            // No vesting - claim all tokens\r\n            claimableTokens =\r\n                participation.tokensOwed -\r\n                participation.tokensClaimed;\r\n        }\r\n\r\n        require(claimableTokens > 0, \"No tokens claimable at this time\");\r\n\r\n        // Transfer tokens to participant\r\n        IERC20(sale.token).transfer(msg.sender, claimableTokens);\r\n        participation.tokensClaimed += claimableTokens;\r\n\r\n        emit TokensClaimed(saleId, msg.sender, claimableTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Get claimable tokens for a user\r\n     */\r\n    function getClaimableTokens(\r\n        uint256 saleId,\r\n        address user\r\n    ) external view returns (uint256) {\r\n        SaleConfig storage sale = sales[saleId];\r\n        if (!sale.isFinalized || sale.isCancelled) {\r\n            return 0;\r\n        }\r\n\r\n        Participation storage participation = participations[saleId][user];\r\n        if (participation.tokensOwed <= participation.tokensClaimed) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 claimableTokens;\r\n\r\n        if (sale.vestingEnabled) {\r\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\r\n\r\n            if (block.timestamp < sale.vestingStart) {\r\n                // Vesting hasn't started yet\r\n                return 0;\r\n            } else if (block.timestamp >= vestingEndTime) {\r\n                // Vesting completed - all remaining tokens are claimable\r\n                claimableTokens =\r\n                    participation.tokensOwed -\r\n                    participation.tokensClaimed;\r\n            } else {\r\n                // Vesting in progress - calculate proportional amount\r\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\r\n                uint256 totalClaimable = (participation.tokensOwed *\r\n                    vestingElapsed) / sale.vestingDuration;\r\n                claimableTokens = totalClaimable - participation.tokensClaimed;\r\n            }\r\n        } else {\r\n            // No vesting - all tokens are claimable\r\n            claimableTokens =\r\n                participation.tokensOwed -\r\n                participation.tokensClaimed;\r\n        }\r\n\r\n        return claimableTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize a sale\r\n     */\r\n    function finalizeSale(uint256 saleId) external nonReentrant {\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\r\n        require(\r\n            block.timestamp > sale.endTime || sale.tokensSold >= sale.hardCap,\r\n            \"Sale still in progress\"\r\n        );\r\n        require(\r\n            msg.sender == owner() || msg.sender == tx.origin,\r\n            \"Not authorized\"\r\n        );\r\n\r\n        bool isSuccessful = sale.amountRaised >= sale.softCap;\r\n\r\n        if (isSuccessful) {\r\n            // Mark sale as finalized and set vesting start time if enabled\r\n            sale.isFinalized = true;\r\n            if (sale.vestingEnabled) {\r\n                sale.vestingStart = block.timestamp;\r\n            }\r\n\r\n            // Transfer raised funds to owner\r\n            if (sale.paymentToken == address(0)) {\r\n                // ETH sale\r\n                (bool sent, ) = payable(owner()).call{value: sale.amountRaised}(\r\n                    \"\"\r\n                );\r\n                require(sent, \"ETH transfer failed\");\r\n            } else {\r\n                // Token sale\r\n                IERC20(sale.paymentToken).transfer(owner(), sale.amountRaised);\r\n            }\r\n\r\n            // Return unsold tokens to owner\r\n            uint256 unsoldTokens = sale.hardCap - sale.tokensSold;\r\n            if (unsoldTokens > 0) {\r\n                IERC20(sale.token).transfer(owner(), unsoldTokens);\r\n            }\r\n        } else {\r\n            // Sale failed - mark as cancelled\r\n            sale.isCancelled = true;\r\n\r\n            // Return all tokens to owner\r\n            IERC20(sale.token).transfer(owner(), sale.hardCap);\r\n        }\r\n\r\n        sale.isActive = false;\r\n\r\n        if (isSuccessful) {\r\n            emit SaleFinalized(saleId, sale.tokensSold, sale.amountRaised);\r\n        } else {\r\n            emit SaleCancelled(saleId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Manual cancel sale (only owner)\r\n     */\r\n    function cancelSale(uint256 saleId) external onlyOwner {\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\r\n\r\n        // Mark sale as cancelled\r\n        sale.isActive = false;\r\n        sale.isCancelled = true;\r\n\r\n        // Return all tokens to owner\r\n        IERC20(sale.token).transfer(owner(), sale.hardCap - sale.tokensSold);\r\n\r\n        emit SaleCancelled(saleId);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim refund if sale was unsuccessful\r\n     */\r\n    function claimRefund(uint256 saleId) external nonReentrant {\r\n        SaleConfig storage sale = sales[saleId];\r\n        require(!sale.isActive, \"Sale still active\");\r\n        require(sale.isCancelled, \"Sale not cancelled\");\r\n\r\n        Participation storage participation = participations[saleId][\r\n            msg.sender\r\n        ];\r\n        require(participation.contribution > 0, \"No contribution found\");\r\n        require(!participation.refunded, \"Already refunded\");\r\n\r\n        uint256 refundAmount = participation.contribution;\r\n        participation.refunded = true;\r\n\r\n        if (sale.paymentToken == address(0)) {\r\n            // Refund ETH\r\n            (bool sent, ) = payable(msg.sender).call{value: refundAmount}(\"\");\r\n            require(sent, \"ETH refund failed\");\r\n        } else {\r\n            // Refund tokens\r\n            IERC20(sale.paymentToken).transfer(msg.sender, refundAmount);\r\n        }\r\n\r\n        emit ContributionRefunded(saleId, msg.sender, refundAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get sale information by ID\r\n     */\r\n    function getSaleInfo(\r\n        uint256 saleId\r\n    ) external view returns (SaleConfig memory) {\r\n        require(saleId < sales.length, \"Invalid sale ID\");\r\n        return sales[saleId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total number of sales\r\n     */\r\n    function getSaleCount() external view returns (uint256) {\r\n        return sales.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get participant information\r\n     */\r\n    function getParticipation(\r\n        uint256 saleId,\r\n        address user\r\n    ) external view returns (Participation memory) {\r\n        return participations[saleId][user];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a user is whitelisted for a sale\r\n     */\r\n    function isWhitelisted(\r\n        uint256 saleId,\r\n        address user\r\n    ) external view returns (bool) {\r\n        return whitelist[saleId][user];\r\n    }\r\n\r\n    /**\r\n     * @dev Update fee collector address\r\n     */\r\n    function updateFeeCollector(address _newCollector) external onlyOwner {\r\n        require(_newCollector != address(0), \"Invalid collector address\");\r\n        address oldCollector = feeCollector;\r\n        feeCollector = _newCollector;\r\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\r\n    }\r\n\r\n    /**\r\n     * @dev Update sale fee\r\n     */\r\n    function updateSaleFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = saleFee;\r\n        saleFee = _newFee;\r\n        emit SaleFeeUpdated(oldFee, _newFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\r\n     */\r\n    function rescueTokens(\r\n        address tokenAddress,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\r\n     */\r\n    function rescueETH(\r\n        address payable recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Handle received ETH\r\n     */\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IToken {\r\n    function enableTrading() external;\r\n    function setAntiBotEnabled(bool enabled) external;\r\n    function setMaxTxAmount(uint256 amount) external;\r\n    function setMaxWalletAmount(uint256 amount) external;\r\n    function excludeFromLimits(address account, bool excluded) external;\r\n    function completeInitialDistribution() external;\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}