{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/extensions/Airdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\n\r\n/**\r\n * @title AirdropManager\r\n * @dev Manages token airdrops for newly created tokens\r\n */\r\ncontract AirdropManager is Ownable {\r\n    address public feeCollector;\r\n    uint256 public airdropFee;\r\n    \r\n    // Track airdrop information\r\n    struct AirdropInfo {\r\n        address token;\r\n        uint256 totalAmount;\r\n        uint256 distributedAmount;\r\n        uint256 recipientCount;\r\n        uint256 timestamp;\r\n        bool completed;\r\n    }\r\n    \r\n    // Mapping to track airdrop history by token address\r\n    mapping(address => AirdropInfo[]) public airdropHistory;\r\n    \r\n    // Events\r\n    event AirdropExecuted(\r\n        address indexed token,\r\n        uint256 indexed airdropIndex,\r\n        uint256 totalAmount,\r\n        uint256 recipientCount\r\n    );\r\n    event AirdropCompleted(\r\n        address indexed token,\r\n        uint256 indexed airdropIndex,\r\n        uint256 totalAmount\r\n    );\r\n    event FeeCollectorUpdated(address indexed oldCollector, address indexed newCollector);\r\n    event AirdropFeeUpdated(uint256 oldFee, uint256 newFee);\r\n    \r\n    constructor(address _feeCollector, uint256 _airdropFee) Ownable(msg.sender) {\r\n        require(_feeCollector != address(0), \"Invalid fee collector\");\r\n        feeCollector = _feeCollector;\r\n        airdropFee = _airdropFee;\r\n    }\r\n    \r\n    /**\r\n     * @dev Execute an airdrop to multiple recipients\r\n     * @param token The token address to airdrop\r\n     * @param recipients Array of recipient addresses\r\n     * @param amounts Array of amounts to distribute to each recipient\r\n     */\r\n    function executeAirdrop(\r\n        address token,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external payable {\r\n        require(msg.value >= airdropFee, \"Insufficient fee\");\r\n        require(token != address(0), \"Invalid token address\");\r\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\r\n        require(recipients.length > 0, \"Empty recipients list\");\r\n        require(recipients.length <= 500, \"Too many recipients at once\");\r\n        \r\n        IERC20 tokenContract = IERC20(token);\r\n        \r\n        // Calculate total amount to distribute\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            totalAmount += amounts[i];\r\n        }\r\n        \r\n        require(totalAmount > 0, \"No tokens to distribute\");\r\n        \r\n        // Transfer tokens from sender to this contract\r\n        require(\r\n            tokenContract.transferFrom(msg.sender, address(this), totalAmount),\r\n            \"Token transfer failed\"\r\n        );\r\n        \r\n        // Create airdrop record\r\n        uint256 airdropIndex = airdropHistory[token].length;\r\n        airdropHistory[token].push(\r\n            AirdropInfo({\r\n                token: token,\r\n                totalAmount: totalAmount,\r\n                distributedAmount: 0,\r\n                recipientCount: recipients.length,\r\n                timestamp: block.timestamp,\r\n                completed: false\r\n            })\r\n        );\r\n        \r\n        // Distribute tokens batch by batch\r\n        _distributeTokens(token, airdropIndex, recipients, amounts);\r\n        \r\n        // Pay fee to collector\r\n        (bool sent, ) = payable(feeCollector).call{value: airdropFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n        \r\n        // Refund excess fee\r\n        if (msg.value > airdropFee) {\r\n            (bool refundSent, ) = payable(msg.sender).call{value: msg.value - airdropFee}(\"\");\r\n            require(refundSent, \"Refund failed\");\r\n        }\r\n        \r\n        emit AirdropExecuted(token, airdropIndex, totalAmount, recipients.length);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function to distribute tokens in batches\r\n     */\r\n    function _distributeTokens(\r\n        address token,\r\n        uint256 airdropIndex,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) internal {\r\n        IERC20 tokenContract = IERC20(token);\r\n        AirdropInfo storage airdropInfo = airdropHistory[token][airdropIndex];\r\n        \r\n        // Distribute tokens to recipients\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            if (recipients[i] != address(0) && amounts[i] > 0) {\r\n                require(\r\n                    tokenContract.transfer(recipients[i], amounts[i]),\r\n                    \"Token transfer failed\"\r\n                );\r\n                airdropInfo.distributedAmount += amounts[i];\r\n            }\r\n        }\r\n        \r\n        // Mark airdrop as completed\r\n        airdropInfo.completed = true;\r\n        \r\n        emit AirdropCompleted(token, airdropIndex, airdropInfo.distributedAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get total number of airdrops for a token\r\n     */\r\n    function getAirdropCount(address token) external view returns (uint256) {\r\n        return airdropHistory[token].length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get airdrop details by index\r\n     */\r\n    function getAirdropInfo(\r\n        address token,\r\n        uint256 index\r\n    ) external view returns (AirdropInfo memory) {\r\n        require(index < airdropHistory[token].length, \"Invalid airdrop index\");\r\n        return airdropHistory[token][index];\r\n    }\r\n    \r\n    /**\r\n     * @dev Admin function to update the fee collector address\r\n     */\r\n    function updateFeeCollector(address _newCollector) external onlyOwner {\r\n        require(_newCollector != address(0), \"Invalid collector address\");\r\n        address oldCollector = feeCollector;\r\n        feeCollector = _newCollector;\r\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\r\n    }\r\n    \r\n    /**\r\n     * @dev Admin function to update the airdrop fee\r\n     */\r\n    function updateAirdropFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = airdropFee;\r\n        airdropFee = _newFee;\r\n        emit AirdropFeeUpdated(oldFee, _newFee);\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\r\n     */\r\n    function rescueTokens(\r\n        address tokenAddress,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(recipient, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\r\n     */\r\n    function rescueETH(address payable recipient, uint256 amount) external onlyOwner {\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n}"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IToken {\r\n    function enableTrading() external;\r\n    function setAntiBotEnabled(bool enabled) external;\r\n    function setMaxTxAmount(uint256 amount) external;\r\n    function setMaxWalletAmount(uint256 amount) external;\r\n    function excludeFromLimits(address account, bool excluded) external;\r\n    function completeInitialDistribution() external;\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}