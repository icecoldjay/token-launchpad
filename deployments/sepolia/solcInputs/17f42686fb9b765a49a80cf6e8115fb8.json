{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/core/LaunchManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./TokenFactory.sol\";\r\nimport \"../extensions/LiquidityManager.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract LaunchManager {\r\n    TokenFactory public tokenFactory;\r\n    address payable public liquidityManagerAddress;\r\n\r\n    uint256 public launchFee;\r\n    address public feeCollector;\r\n\r\n    mapping(address => bytes32) public launchCommits;\r\n\r\n    // Base token parameters (common for both launch types)\r\n    struct TokenParams {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        address[] initialHolders;\r\n        uint256[] initialAmounts;\r\n        bool enableAntiBot;\r\n    }\r\n\r\n    // Parameters for ETH pair liquidity\r\n    struct EthPairParams {\r\n        uint256 tokenAmount; // Amount of our token for liquidity\r\n        uint256 ethAmount; // Amount of ETH for liquidity\r\n        uint256 tokenAmountMin; // Min amount of our token for slippage\r\n        uint256 ethAmountMin; // Min amount of ETH for slippage\r\n        uint256 lockDuration; // How long to lock liquidity for\r\n    }\r\n\r\n    // Parameters for custom token pair liquidity\r\n    struct TokenPairParams {\r\n        address pairToken; // The token to pair with (USDC, USDT, etc.)\r\n        uint256 tokenAmount; // Amount of our token for liquidity\r\n        uint256 pairAmount; // Amount of pair token for liquidity\r\n        uint256 tokenAmountMin; // Min amount of our token for slippage\r\n        uint256 pairAmountMin; // Min amount of pair token for slippage\r\n        uint256 lockDuration; // How long to lock liquidity for\r\n    }\r\n\r\n    event LaunchCompleted(\r\n        address indexed tokenAddress,\r\n        uint256 indexed liquidityTokenId\r\n    );\r\n    event TokenDistributed(\r\n        address indexed token,\r\n        address indexed holder,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(\r\n        address _tokenFactory,\r\n        address payable _liquidityManager,\r\n        address _feeCollector,\r\n        uint256 _launchFee\r\n    ) {\r\n        tokenFactory = TokenFactory(_tokenFactory);\r\n        liquidityManagerAddress = _liquidityManager;\r\n        feeCollector = _feeCollector;\r\n        launchFee = _launchFee;\r\n    }\r\n\r\n    // Launch with ETH pair\r\n    function instantLaunchWithEth(\r\n        TokenParams calldata tokenParams,\r\n        EthPairParams calldata ethParams\r\n    ) external payable {\r\n        // Get the token creation fee\r\n        uint256 tokenCreationFee = tokenFactory.creationFee();\r\n\r\n        // Check if enough ETH was sent (fee + token creation fee + amount for liquidity)\r\n        require(\r\n            msg.value >= launchFee + tokenCreationFee + ethParams.ethAmount,\r\n            \"Insufficient ETH\"\r\n        );\r\n\r\n        // Deduct fee\r\n        (bool sent, ) = feeCollector.call{value: launchFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n\r\n        // Create token - the token factory will mint all tokens to msg.sender and pre-approve\r\n        address tokenAddress = _createToken(tokenParams);\r\n\r\n        // Distribute tokens to initial holders\r\n        _distributeTokens(tokenAddress, tokenParams);\r\n\r\n        // Transfer tokens for liquidity from msg.sender to this contract\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(\r\n            token.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                ethParams.tokenAmount\r\n            ),\r\n            \"Liquidity token transfer failed\"\r\n        );\r\n\r\n        // Approve the liquidity manager to spend these tokens\r\n        token.approve(liquidityManagerAddress, ethParams.tokenAmount);\r\n\r\n        // Create ETH liquidity\r\n        uint256 ethForLiquidity = msg.value - launchFee - tokenCreationFee;\r\n        (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        ) = _createLiquidityWithEth(tokenAddress, ethParams, ethForLiquidity);\r\n\r\n        // Mark initial distribution as complete\r\n        _completeInitialDistribution(tokenAddress);\r\n\r\n        // Refund any excess ETH\r\n        if (address(this).balance > 0) {\r\n            (bool refunded, ) = msg.sender.call{value: address(this).balance}(\r\n                \"\"\r\n            );\r\n            require(refunded, \"Refund failed\");\r\n        }\r\n\r\n        emit LaunchCompleted(tokenAddress, liquidity);\r\n    }\r\n\r\n    // Launch with custom token pair\r\n    function instantLaunchWithToken(\r\n        TokenParams calldata tokenParams,\r\n        TokenPairParams calldata pairParams\r\n    ) external payable {\r\n        // Get the token creation fee\r\n        uint256 tokenCreationFee = tokenFactory.creationFee();\r\n\r\n        // Check if enough ETH was sent for both fees\r\n        require(msg.value >= launchFee + tokenCreationFee, \"Insufficient fee\");\r\n\r\n        // Deduct fee\r\n        (bool sent, ) = feeCollector.call{value: launchFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n\r\n        // Create token - the token factory will mint all tokens to msg.sender and pre-approve\r\n        address tokenAddress = _createToken(tokenParams);\r\n\r\n        // Distribute tokens to initial holders\r\n        _distributeTokens(tokenAddress, tokenParams);\r\n\r\n        // Create token pair liquidity\r\n        (\r\n            uint amountA,\r\n            uint amountB,\r\n            uint liquidity\r\n        ) = _createLiquidityWithToken(tokenAddress, pairParams);\r\n\r\n        // Mark initial distribution as complete\r\n        _completeInitialDistribution(tokenAddress);\r\n\r\n        // Refund any excess ETH\r\n        if (address(this).balance > 0) {\r\n            (bool refunded, ) = msg.sender.call{value: address(this).balance}(\r\n                \"\"\r\n            );\r\n            require(refunded, \"Refund failed\");\r\n        }\r\n\r\n        emit LaunchCompleted(tokenAddress, liquidity);\r\n    }\r\n\r\n    function _createToken(\r\n        TokenParams calldata params\r\n    ) private returns (address) {\r\n        return\r\n            tokenFactory.createToken{value: tokenFactory.creationFee()}(\r\n                params.name,\r\n                params.symbol,\r\n                params.totalSupply,\r\n                params.initialHolders,\r\n                params.initialAmounts,\r\n                liquidityManagerAddress, // Pass the liquidity manager address\r\n                address(this), // Pass this contract as the launch manager\r\n                true\r\n            );\r\n    }\r\n\r\n    function _distributeTokens(\r\n        address tokenAddress,\r\n        TokenParams calldata params\r\n    ) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n\r\n        // Transfer tokens from the token creator to initial holders\r\n        // The token has already pre-approved this contract to spend tokens from msg.sender\r\n        for (uint i = 0; i < params.initialHolders.length; i++) {\r\n            if (\r\n                params.initialHolders[i] != address(0) &&\r\n                params.initialAmounts[i] > 0\r\n            ) {\r\n                require(\r\n                    token.transferFrom(\r\n                        msg.sender,\r\n                        params.initialHolders[i],\r\n                        params.initialAmounts[i]\r\n                    ),\r\n                    \"Token transfer failed\"\r\n                );\r\n                emit TokenDistributed(\r\n                    tokenAddress,\r\n                    params.initialHolders[i],\r\n                    params.initialAmounts[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _completeInitialDistribution(address tokenAddress) private {\r\n        IToken(tokenAddress).completeInitialDistribution();\r\n    }\r\n\r\n    function _createLiquidityWithEth(\r\n        address tokenAddress,\r\n        EthPairParams calldata params,\r\n        uint256 ethAmount\r\n    ) private returns (uint amountToken, uint amountETH, uint liquidity) {\r\n        LiquidityManager liquidityManager = LiquidityManager(\r\n            liquidityManagerAddress\r\n        );\r\n\r\n        // The liquidity manager is already pre-approved in the token contract\r\n        // to spend tokens from msg.sender, so no need to transfer or approve again\r\n\r\n        return\r\n            liquidityManager.addLiquidityETH{value: ethAmount}(\r\n                tokenAddress, // token address (our newly created token)\r\n                params.tokenAmount, // amount of our token\r\n                params.tokenAmountMin, // min amount of our token (for slippage)\r\n                params.ethAmountMin, // min ETH amount (for slippage)\r\n                params.lockDuration // how long to lock liquidity\r\n            );\r\n    }\r\n\r\n    function _createLiquidityWithToken(\r\n        address tokenAddress,\r\n        TokenPairParams calldata params\r\n    ) private returns (uint amountA, uint amountB, uint liquidity) {\r\n        LiquidityManager liquidityManager = LiquidityManager(\r\n            liquidityManagerAddress\r\n        );\r\n\r\n        // The liquidity manager is already pre-approved in the token contract\r\n        // to spend tokens from msg.sender, so no need to transfer or approve again\r\n\r\n        // For the pair token, we need to transfer it from sender to liquidity manager\r\n        IERC20 pairToken = IERC20(params.pairToken);\r\n        require(\r\n            pairToken.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                params.pairAmount\r\n            ),\r\n            \"Pair token transfer failed\"\r\n        );\r\n\r\n        // Approve the liquidity manager to spend the pair token\r\n        pairToken.approve(liquidityManagerAddress, params.pairAmount);\r\n\r\n        return\r\n            liquidityManager.addLiquidity(\r\n                tokenAddress, // token A (our newly created token)\r\n                params.pairToken, // token B (the pair token)\r\n                params.tokenAmount, // amount of token A\r\n                params.pairAmount, // amount of token B\r\n                params.tokenAmountMin, // min amount of token A (for slippage)\r\n                params.pairAmountMin, // min amount of token B (for slippage)\r\n                params.lockDuration // how long to lock liquidity\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/core/TokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./TokenTemplate.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TokenFactory is Ownable {\r\n    address public feeCollector;\r\n    uint256 public creationFee;\r\n\r\n    mapping(address => address[]) public creatorTokens;\r\n    address[] public allTokens;\r\n\r\n    event TokenCreated(address indexed creator, address tokenAddress);\r\n    event FeeCollectorUpdated(\r\n        address indexed oldCollector,\r\n        address indexed newCollector\r\n    );\r\n    event CreationFeeUpdated(uint256 oldFee, uint256 newFee);\r\n\r\n    constructor(\r\n        address _feeCollector,\r\n        uint256 _creationFee\r\n    ) Ownable(msg.sender) {\r\n        // Use OZ Ownable's constructor implicitly\r\n        feeCollector = _feeCollector;\r\n        creationFee = _creationFee;\r\n    }\r\n\r\n    function createToken(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply,\r\n        address[] memory initialHolders,\r\n        uint256[] memory initialAmounts,\r\n        address liquidityManager,\r\n        address launchManager,\r\n        bool launchWithLiquidity\r\n    ) external payable returns (address) {\r\n        require(msg.value >= creationFee, \"Insufficient fee\");\r\n        require(\r\n            initialHolders.length == initialAmounts.length,\r\n            \"Holders and amounts mismatch\"\r\n        );\r\n\r\n        // Create new token contract\r\n        TokenTemplate token = new TokenTemplate(\r\n            name,\r\n            symbol,\r\n            totalSupply,\r\n            msg.sender,\r\n            initialHolders,\r\n            initialAmounts,\r\n            liquidityManager,\r\n            launchManager,\r\n            launchWithLiquidity\r\n        );\r\n\r\n        // Record token creation\r\n        creatorTokens[msg.sender].push(address(token));\r\n        allTokens.push(address(token));\r\n\r\n        // Pay fee to collector\r\n        (bool sent, ) = payable(feeCollector).call{value: creationFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n\r\n        // Refund excess fee\r\n        if (msg.value > creationFee) {\r\n            (bool refundSent, ) = payable(msg.sender).call{\r\n                value: msg.value - creationFee\r\n            }(\"\");\r\n            require(refundSent, \"Refund failed\");\r\n        }\r\n\r\n        emit TokenCreated(msg.sender, address(token));\r\n        return address(token);\r\n    }\r\n\r\n    function getCreatorTokens(\r\n        address creator\r\n    ) external view returns (address[] memory) {\r\n        return creatorTokens[creator];\r\n    }\r\n\r\n    function getCreatorTokenCount(\r\n        address creator\r\n    ) external view returns (uint256) {\r\n        return creatorTokens[creator].length;\r\n    }\r\n\r\n    function getTotalTokenCount() external view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    function updateFeeCollector(address _newCollector) external onlyOwner {\r\n        require(_newCollector != address(0), \"Invalid collector address\");\r\n        address oldCollector = feeCollector;\r\n        feeCollector = _newCollector;\r\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\r\n    }\r\n\r\n    function updateCreationFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = creationFee;\r\n        creationFee = _newFee;\r\n        emit CreationFeeUpdated(oldFee, _newFee);\r\n    }\r\n}\r\n"
    },
    "contracts/core/TokenTemplate.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TokenTemplate is ERC20, Ownable {\r\n    bool public tradingEnabled;\r\n    uint256 public launchTime;\r\n    uint256 public launchBlock;\r\n\r\n    // Flag to track initial distribution status\r\n    bool private _initialDistributionComplete;\r\n\r\n    // Store total tokens to be distributed\r\n    uint256 public tokensToDistribute;\r\n\r\n    // Simple whitelist for liquidity manager\r\n    mapping(address => bool) public isWhitelisted;\r\n    event TradingEnabled(uint256 timestamp);\r\n    event InitialDistributionComplete();\r\n    event AddressWhitelisted(address indexed account, bool status);\r\n    event LiquidityApproved(address indexed liquidityManager, uint256 amount);\r\n    event LaunchManagerApproved(address indexed launchManager, uint256 amount);\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply,\r\n        address _initialOwner,\r\n        address[] memory initialHolders,\r\n        uint256[] memory initialAmounts,\r\n        address liquidityManager,\r\n        address launchManager,\r\n        bool launchWithLiquidity \r\n    ) ERC20(name, symbol) Ownable(_initialOwner) {\r\n        require(\r\n            initialHolders.length == initialAmounts.length,\r\n            \"Arrays length mismatch\"\r\n        );\r\n        require(\r\n            initialHolders.length <= 10,\r\n            \"Maximum 10 initial holders allowed\"\r\n        );\r\n\r\n        // Calculate tokens to be distributed\r\n        tokensToDistribute = 0;\r\n        for (uint i = 0; i < initialHolders.length; i++) {\r\n            if (initialHolders[i] != address(0) && initialAmounts[i] > 0) {\r\n                tokensToDistribute += initialAmounts[i];\r\n            }\r\n        }\r\n\r\n        // Make sure we don't exceed total supply\r\n        require(\r\n            tokensToDistribute <= totalSupply,\r\n            \"Distribution exceeds total supply\"\r\n        );\r\n\r\n        // Mint all tokens to the initial owner\r\n        _mint(_initialOwner, totalSupply);\r\n\r\n        // Whitelist the owner by default\r\n        isWhitelisted[owner()] = true;\r\n\r\n        // Pre-approve the launch manager to spend tokens for distribution\r\n        // Approval strategy based on the launch type\r\n        if (launchManager != address(0)) {\r\n            if (launchWithLiquidity) {\r\n                // For launches that include liquidity: approve all tokens\r\n                _approve(_initialOwner, launchManager, totalSupply);\r\n                emit LaunchManagerApproved(launchManager, totalSupply);\r\n            } else {\r\n                // For distribution-only launches: approve only tokens to distribute\r\n                _approve(_initialOwner, launchManager, tokensToDistribute);\r\n                emit LaunchManagerApproved(launchManager, tokensToDistribute);\r\n            }\r\n        }\r\n\r\n        // Approve liquidity manager for liquidity provision with remaining tokens\r\n        if (liquidityManager != address(0)) {\r\n            // Calculate remaining tokens for liquidity\r\n            uint256 remainingTokens = totalSupply - tokensToDistribute;\r\n\r\n            // Approve for liquidity provision with remaining tokens\r\n            _approve(_initialOwner, liquidityManager, remainingTokens);\r\n            emit LiquidityApproved(liquidityManager, remainingTokens);\r\n\r\n            // Whitelist the liquidity manager\r\n            isWhitelisted[liquidityManager] = true;\r\n            emit AddressWhitelisted(liquidityManager, true);\r\n        }\r\n\r\n        // Whitelist the launch manager if provided and not already whitelisted\r\n        if (launchManager != address(0) && launchManager != liquidityManager) {\r\n            isWhitelisted[launchManager] = true;\r\n            emit AddressWhitelisted(launchManager, true);\r\n        }\r\n    }\r\n\r\n    function completeInitialDistribution() external {\r\n        require(\r\n            msg.sender == owner() || isWhitelisted[msg.sender],\r\n            \"Not authorized\"\r\n        );\r\n        require(\r\n            !_initialDistributionComplete,\r\n            \"Initial distribution already completed\"\r\n        );\r\n        _initialDistributionComplete = true;\r\n        emit InitialDistributionComplete();\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled\");\r\n        tradingEnabled = true;\r\n        launchTime = block.timestamp;\r\n        launchBlock = block.number;\r\n        emit TradingEnabled(launchTime);\r\n    }\r\n\r\n    function whitelistAddress(address account, bool status) public onlyOwner {\r\n        isWhitelisted[account] = status;\r\n        emit AddressWhitelisted(account, status);\r\n    }\r\n\r\n    function approveLiquidityManager(\r\n        address liquidityManager,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(\r\n            liquidityManager != address(0),\r\n            \"Invalid liquidityManager address\"\r\n        );\r\n        _approve(msg.sender, liquidityManager, amount);\r\n        emit LiquidityApproved(liquidityManager, amount);\r\n    }\r\n\r\n    function approveLaunchManager(\r\n        address launchManager,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(launchManager != address(0), \"Invalid launchManager address\");\r\n        _approve(msg.sender, launchManager, amount);\r\n        emit LaunchManagerApproved(launchManager, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/extensions/AntiBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title AntiBot\r\n * @dev Simplified anti-bot measures for token launches\r\n */\r\nlibrary AntiBot {\r\n    struct AntiBotConfig {\r\n        bool enabled;\r\n        uint256 maxTxAmount;\r\n        uint256 maxWalletAmount;\r\n        mapping(address => bool) blacklisted;\r\n    }\r\n    \r\n    /**\r\n     * @dev Initializes anti-bot configuration\r\n     * @param config Anti-bot config storage pointer\r\n     * @param _maxTxAmount Maximum transaction amount\r\n     * @param _maxWalletAmount Maximum wallet balance\r\n     */\r\n    function initialize(\r\n        AntiBotConfig storage config,\r\n        uint256 _maxTxAmount,\r\n        uint256 _maxWalletAmount\r\n    ) internal {\r\n        config.enabled = false; // Start disabled by default\r\n        config.maxTxAmount = _maxTxAmount;\r\n        config.maxWalletAmount = _maxWalletAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev Applies simplified anti-bot checks\r\n     */\r\n    function applyAntiBotLimits(\r\n        AntiBotConfig storage config,\r\n        address tokenAddress,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 recipientBalance,\r\n        uint256 launchTime,\r\n        uint256 launchBlock\r\n    ) internal view {\r\n        // Only apply limits if enabled\r\n        if (!config.enabled) {\r\n            return;\r\n        }\r\n        \r\n        // Basic transaction amount limit\r\n        require(amount <= config.maxTxAmount, \"Transfer exceeds transaction limit\");\r\n        \r\n        // Basic wallet balance limit\r\n        require(recipientBalance + amount <= config.maxWalletAmount, \"Transfer exceeds wallet limit\");\r\n    }\r\n\r\n    function blacklistAddress(AntiBotConfig storage config, address account) internal {\r\n        config.blacklisted[account] = true;\r\n    }\r\n    \r\n    function removeFromBlacklist(AntiBotConfig storage config, address account) internal {\r\n        config.blacklisted[account] = false;\r\n    }\r\n}"
    },
    "contracts/extensions/LiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract LiquidityManager is Ownable {\r\n    // State variables\r\n    IUniswapV2Router02 public immutable router;\r\n    address public immutable weth;\r\n    \r\n    // Structs for organizing data\r\n    struct LockInfo {\r\n        address pair;\r\n        uint256 unlockTime;\r\n    }\r\n    \r\n    struct LiquidityParams {\r\n        address tokenA;\r\n        address tokenB;\r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        uint256 amountAMin;\r\n        uint256 amountBMin;\r\n        uint256 lockDuration;\r\n        bool isEthPair;\r\n        address recipient;\r\n    }\r\n    \r\n    struct TokenPair {\r\n        address token0;\r\n        address token1;\r\n        bool isToken0Weth;\r\n        bool isToken1Weth;\r\n    }\r\n    \r\n    // Mappings\r\n    mapping(address => LockInfo) public liquidityLocks;\r\n    \r\n    // Events\r\n    event LiquidityAdded(\r\n        address indexed tokenA, \r\n        address indexed tokenB, \r\n        address pair, \r\n        uint amountA, \r\n        uint amountB, \r\n        uint liquidity\r\n    );\r\n    event LiquidityLocked(address indexed pair, uint256 unlockTime);\r\n    event LiquidityUnlocked(address indexed pair, address recipient);\r\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pair);\r\n    event TokensApproved(address token, uint256 amount);\r\n    event TokensTransferred(address token, address from, address to, uint256 amount);\r\n    event RefundSent(address token, address recipient, uint256 amount);\r\n    \r\n    constructor(address _router) Ownable(msg.sender) {\r\n        router = IUniswapV2Router02(_router);\r\n        weth = router.WETH();\r\n    }\r\n    \r\n    // Main entry point for adding liquidity with two ERC20 tokens\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 lockDuration\r\n    ) external payable returns (uint amountTokenA, uint amountTokenB, uint liquidity) {\r\n        require(!(_isWETH(tokenA) && _isWETH(tokenB)), \"Cannot create WETH/WETH pair\");\r\n        // Create the params struct\r\n        LiquidityParams memory params = LiquidityParams({\r\n            tokenA: tokenA,\r\n            tokenB: tokenB,\r\n            amountA: amountA,\r\n            amountB: amountB,\r\n            amountAMin: amountAMin,\r\n            amountBMin: amountBMin,\r\n            lockDuration: lockDuration,\r\n            isEthPair: false,\r\n            recipient: lockDuration > 0 ? address(this) : msg.sender\r\n        });\r\n        \r\n        // Step 1: Transfer tokens from user to this contract\r\n        _transferTokensToContract(params);\r\n        \r\n        // Step 2: Approve router to spend tokens\r\n        _approveTokensForRouter(params);\r\n        \r\n        // Step 3: Add liquidity through router\r\n        (amountTokenA, amountTokenB, liquidity) = _addLiquidityViaRouter(params);\r\n        \r\n        // Step 4: Refund excess tokens\r\n        _refundExcessTokens(params, amountTokenA, amountTokenB);\r\n        \r\n        // Step 5: Handle locking if needed\r\n        _handleLiquidityLocking(params, tokenA, tokenB);\r\n        \r\n        return (amountTokenA, amountTokenB, liquidity);\r\n    }\r\n    \r\n    // Main entry point for adding liquidity with ETH and an ERC20 token\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountToken,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 lockDuration\r\n    ) external payable returns (uint amountTokenOut, uint amountETH, uint liquidity) {\r\n        require(!_isWETH(token), \"Use addLiquidity for WETH pairs\");\r\n        // Create the params struct\r\n        LiquidityParams memory params = LiquidityParams({\r\n            tokenA: token,\r\n            tokenB: weth,\r\n            amountA: amountToken,\r\n            amountB: msg.value,\r\n            amountAMin: amountTokenMin,\r\n            amountBMin: amountETHMin,\r\n            lockDuration: lockDuration,\r\n            isEthPair: true,\r\n            recipient: lockDuration > 0 ? address(this) : msg.sender\r\n        });\r\n        \r\n        // Step 1: Transfer token from user to this contract (ETH is already here)\r\n        _transferTokenToContract(token, amountToken);\r\n        \r\n        // Step 2: Approve router to spend token\r\n        _approveTokenForRouter(token, amountToken);\r\n        \r\n        // Step 3: Add liquidity through router\r\n        (amountTokenOut, amountETH, liquidity) = _addLiquidityETHViaRouter(params);\r\n        \r\n        // Step 4: Refund excess tokens and ETH\r\n        _refundExcessTokenAndETH(params, amountTokenOut, amountETH);\r\n        \r\n        // Step 5: Handle locking if needed\r\n        _handleLiquidityLocking(params, token, weth);\r\n        \r\n        return (amountTokenOut, amountETH, liquidity);\r\n    }\r\n\r\n    function _isWETH(address token) private view returns (bool) {\r\n        return token == weth;\r\n    }\r\n    \r\n    // Helper function 1: Transfer tokens from user to contract\r\n    function _transferTokensToContract(LiquidityParams memory params) private {\r\n        if (!_isWETH(params.tokenA)) {\r\n            _transferTokenToContract(params.tokenA, params.amountA);\r\n        }\r\n        \r\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\r\n            _transferTokenToContract(params.tokenB, params.amountB);\r\n        }\r\n    }\r\n    \r\n    // Helper function for transferring a single token\r\n    function _transferTokenToContract(address token, uint256 amount) private {\r\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        require(success, \"Transfer of token failed\");\r\n        emit TokensTransferred(token, msg.sender, address(this), amount);\r\n    }\r\n    \r\n    // Helper function 2: Approve router to spend tokens\r\n    function _approveTokensForRouter(LiquidityParams memory params) private {\r\n        if (!_isWETH(params.tokenA)) {\r\n            _approveTokenForRouter(params.tokenA, params.amountA);\r\n        }\r\n        \r\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\r\n            _approveTokenForRouter(params.tokenB, params.amountB);\r\n        }\r\n    }\r\n    \r\n    // Helper function for approving a single token\r\n    function _approveTokenForRouter(address token, uint256 amount) private {\r\n        IERC20(token).approve(address(router), amount);\r\n        emit TokensApproved(token, amount);\r\n    }\r\n    \r\n    // Helper function 3A: Add liquidity through router for token pairs\r\n    function _addLiquidityViaRouter(LiquidityParams memory params) \r\n        private \r\n        returns (uint amountA, uint amountB, uint liquidity) \r\n    {\r\n        return router.addLiquidity(\r\n            params.tokenA,\r\n            params.tokenB,\r\n            params.amountA,\r\n            params.amountB,\r\n            params.amountAMin,\r\n            params.amountBMin,\r\n            params.recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n    \r\n    // Helper function 3B: Add liquidity through router for ETH pairs\r\n    function _addLiquidityETHViaRouter(LiquidityParams memory params) \r\n        private \r\n        returns (uint amountToken, uint amountETH, uint liquidity) \r\n    {\r\n        return router.addLiquidityETH{value: params.amountB}(\r\n            params.tokenA,\r\n            params.amountA,\r\n            params.amountAMin,\r\n            params.amountBMin,\r\n            params.recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n    \r\n    // Helper function 4A: Refund excess tokens\r\n    function _refundExcessTokens(\r\n        LiquidityParams memory params,\r\n        uint256 amountAUsed,\r\n        uint256 amountBUsed\r\n    ) private {\r\n        if (params.amountA > amountAUsed) {\r\n            uint256 refundAmount = params.amountA - amountAUsed;\r\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\r\n        }\r\n        \r\n        if (!params.isEthPair && params.amountB > amountBUsed) {\r\n            uint256 refundAmount = params.amountB - amountBUsed;\r\n            IERC20(params.tokenB).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenB, msg.sender, refundAmount);\r\n        }\r\n    }\r\n    \r\n    // Helper function 4B: Refund excess token and ETH\r\n    function _refundExcessTokenAndETH(\r\n        LiquidityParams memory params,\r\n        uint256 amountTokenUsed,\r\n        uint256 amountETHUsed\r\n    ) private {\r\n        if (params.amountA > amountTokenUsed) {\r\n            uint256 refundAmount = params.amountA - amountTokenUsed;\r\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\r\n        }\r\n        \r\n        if (params.amountB > amountETHUsed) {\r\n            uint256 refundAmount = params.amountB - amountETHUsed;\r\n            (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\r\n            require(success, \"ETH refund failed\");\r\n            emit RefundSent(address(0), msg.sender, refundAmount); // address(0) represents ETH\r\n        }\r\n    }\r\n    \r\n    // Helper function 5: Handle liquidity locking if needed\r\n    function _handleLiquidityLocking(\r\n        LiquidityParams memory params,\r\n        address tokenA,\r\n        address tokenB\r\n    ) private {\r\n        if (params.lockDuration > 0) {\r\n            // Get pair address\r\n            address pair = IUniswapV2Factory(router.factory()).getPair(tokenA, tokenB);\r\n            require(pair != address(0), \"Pair does not exist\");\r\n            \r\n            // Set up lock info\r\n            liquidityLocks[pair] = LockInfo({\r\n                pair: pair,\r\n                unlockTime: block.timestamp + params.lockDuration\r\n            });\r\n            \r\n            emit LiquidityLocked(pair, block.timestamp + params.lockDuration);\r\n        }\r\n    }\r\n    \r\n    // Function to unlock liquidity after the lock duration\r\n    function unlockLiquidity(address pair) external {\r\n        LockInfo storage lockInfo = liquidityLocks[pair];\r\n        require(lockInfo.pair == pair, \"Liquidity not locked\");\r\n        require(block.timestamp >= lockInfo.unlockTime, \"Liquidity still locked\");\r\n        require(msg.sender == owner(), \"Not authorized\");\r\n        \r\n        // Get liquidity amount\r\n        uint256 liquidity = IERC20(pair).balanceOf(address(this));\r\n        require(liquidity > 0, \"No liquidity to unlock\");\r\n        \r\n        // Transfer LP tokens back to sender\r\n        IERC20(pair).transfer(msg.sender, liquidity);\r\n        \r\n        // Clear lock info\r\n        delete liquidityLocks[pair];\r\n        \r\n        emit LiquidityUnlocked(pair, msg.sender);\r\n    }\r\n    \r\n    // Function to create a pair if it doesn't exist\r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        pair = factory.getPair(tokenA, tokenB);\r\n        \r\n        if (pair == address(0)) {\r\n            pair = factory.createPair(tokenA, tokenB);\r\n            emit PairCreated(tokenA, tokenB, pair);\r\n        }\r\n        \r\n        return pair;\r\n    }\r\n    \r\n    // Debug function to check token allowances\r\n    function checkAllowance(address token, address spender) external view returns (uint256) {\r\n        return IERC20(token).allowance(address(this), spender);\r\n    }\r\n    \r\n    // Debug function to check token balances\r\n    function checkBalance(address token, address account) external view returns (uint256) {\r\n        return IERC20(token).balanceOf(account);\r\n    }\r\n    \r\n    // Debug function to transfer tokens directly\r\n    function debugTransferToken(address token, address to, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n    \r\n    // Debug function to approve tokens directly\r\n    function debugApproveToken(address token, address spender, uint256 amount) external onlyOwner {\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n    \r\n    // Handle received ETH\r\n    receive() external payable {}\r\n}"
    },
    "contracts/extensions/TransactionBundler.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TransactionBundler is Ownable {\r\n\r\n    struct Transaction {\r\n        address target;\r\n        uint256 value;\r\n        bytes data;\r\n    }\r\n    \r\n    event BundleExecuted(uint256 indexed bundleId, address indexed executor, uint256 transactionCount);\r\n    event TransactionFailed(uint256 indexed bundleId, uint256 indexed transactionIndex, bytes reason);\r\n   \r\n    constructor(address _initialOwner) Ownable(_initialOwner) {}\r\n   \r\n    // Execute multiple transactions atomically\r\n    function executeBundle(Transaction[] calldata transactions) external payable returns (bool) {\r\n        uint256 bundleId = uint256(keccak256(abi.encode(transactions, block.timestamp)));\r\n       \r\n        for (uint256 i = 0; i < transactions.length; i++) {\r\n            Transaction calldata txn = transactions[i];\r\n            (bool success, bytes memory returnData) = txn.target.call{value: txn.value}(txn.data);\r\n            \r\n            if (!success) {\r\n                // Emit detailed error information\r\n                emit TransactionFailed(bundleId, i, returnData);\r\n                revert(string(returnData));\r\n            }\r\n        }\r\n       \r\n        // Refund any remaining ETH\r\n        if (address(this).balance > 0) {\r\n            (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(sent, \"ETH refund failed\");\r\n        }\r\n       \r\n        emit BundleExecuted(bundleId, msg.sender, transactions.length);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/interfaces/IAntiBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @title IAntiBot\r\n * @dev Interface for anti-bot protection mechanisms\r\n */\r\ninterface IAntiBot {\r\n    /**\r\n     * @dev Initializes anti-bot protection mechanisms\r\n     * @param maxTxAmount Maximum transaction amount\r\n     * @param maxWalletAmount Maximum wallet holding amount\r\n     */\r\n    function initialize(uint256 maxTxAmount, uint256 maxWalletAmount) external;\r\n    \r\n    /**\r\n     * @dev Checks if a transfer is allowed based on anti-bot rules\r\n     * @param from Sender address\r\n     * @param to Recipient address\r\n     * @param amount Transfer amount\r\n     * @return bool Whether the transfer is allowed\r\n     */\r\n    function checkTransfer(address from, address to, uint256 amount) external view returns (bool);\r\n    \r\n    /**\r\n     * @dev Adds an address to the blacklist\r\n     * @param account Address to blacklist\r\n     */\r\n    function blacklistAddress(address account) external;\r\n    \r\n    /**\r\n     * @dev Removes an address from the blacklist\r\n     * @param account Address to remove from blacklist\r\n     */\r\n    function removeFromBlacklist(address account) external;\r\n    \r\n    /**\r\n     * @dev Sets the maximum transaction amount\r\n     * @param amount Maximum transaction amount\r\n     */\r\n    function setMaxTxAmount(uint256 amount) external;\r\n    \r\n    /**\r\n     * @dev Sets the maximum wallet amount\r\n     * @param amount Maximum wallet amount\r\n     */\r\n    function setMaxWalletAmount(uint256 amount) external;\r\n    \r\n    /**\r\n     * @dev Excludes an address from transaction limits\r\n     * @param account Address to exclude\r\n     * @param excluded Whether the address should be excluded\r\n     */\r\n    function excludeFromLimits(address account, bool excluded) external;\r\n    \r\n    /**\r\n     * @dev Enables or disables anti-bot protection\r\n     * @param enabled Whether anti-bot protection should be enabled\r\n     */\r\n    function setEnabled(bool enabled) external;\r\n    \r\n    /**\r\n     * @dev Gets the current trading status\r\n     * @return bool Whether trading is enabled\r\n     */\r\n    function tradingEnabled() external view returns (bool);\r\n}"
    },
    "contracts/interfaces/ILiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @title ILiquidityManager\r\n * @dev Interface for liquidity pool creation and management\r\n */\r\ninterface ILiquidityManager {\r\n    /**\r\n     * @dev Struct to track liquidity lock information\r\n     */\r\n    struct LockInfo {\r\n        uint256 amount;      // Amount of LP tokens locked\r\n        uint256 unlockTime;  // Timestamp when tokens can be unlocked\r\n    }\r\n    \r\n    /**\r\n     * @dev Creates a liquidity pool for a token\r\n     * @param tokenAddress Address of the token contract\r\n     * @param pairWith Address of the token to pair with (0x0 for ETH)\r\n     * @param tokenAmount Amount of tokens to add to liquidity\r\n     * @param lockDuration Duration of liquidity lock in seconds (0 for no lock)\r\n     * @return address Address of the created liquidity pair\r\n     */\r\n    function createLiquidityPool(\r\n        address tokenAddress,\r\n        address pairWith,\r\n        uint256 tokenAmount,\r\n        uint256 lockDuration\r\n    ) external payable returns (address);\r\n    \r\n    /**\r\n     * @dev Unlocks liquidity after lock period\r\n     * @param pair Address of the liquidity pair\r\n     */\r\n    function unlockLiquidity(address pair) external;\r\n    \r\n    /**\r\n     * @dev Gets information about a locked liquidity pair\r\n     * @param pair Address of the liquidity pair\r\n     * @return LockInfo Struct containing lock information\r\n     */\r\n    function getLockInfo(address pair) external view returns (LockInfo memory);\r\n    \r\n    /**\r\n     * @dev Extends the lock duration for a liquidity pair\r\n     * @param pair Address of the liquidity pair\r\n     * @param additionalTime Additional time to lock in seconds\r\n     */\r\n    function extendLockDuration(address pair, uint256 additionalTime) external;\r\n    \r\n    /**\r\n     * @dev Adds more liquidity to an existing pair\r\n     * @param tokenAddress Address of the token contract\r\n     * @param pairWith Address of the paired token (0x0 for ETH)\r\n     * @param tokenAmount Amount of tokens to add\r\n     * @return uint256 Amount of LP tokens received\r\n     */\r\n    function addLiquidity(\r\n        address tokenAddress,\r\n        address pairWith,\r\n        uint256 tokenAmount\r\n    ) external payable returns (uint256);\r\n    \r\n    /**\r\n     * @dev Emergency withdraw function (only for owner)\r\n     * @param token Address of the token to withdraw\r\n     * @param amount Amount to withdraw\r\n     */\r\n    function emergencyWithdraw(address token, uint256 amount) external;\r\n}"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IToken {\r\n    function enableTrading() external;\r\n    function setAntiBotEnabled(bool enabled) external;\r\n    function setMaxTxAmount(uint256 amount) external;\r\n    function setMaxWalletAmount(uint256 amount) external;\r\n    function excludeFromLimits(address account, bool excluded) external;\r\n    function completeInitialDistribution() external;\r\n}"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n// Mock ERC20 contract for testing\r\ncontract MockERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n    \r\n    function mint(address to, uint256 amount) public {\r\n        balanceOf[to] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        return transferFrom(msg.sender, to, amount);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        if (from != msg.sender) {\r\n            require(allowance[from][msg.sender] >= amount, \"Insufficient allowance\");\r\n            allowance[from][msg.sender] -= amount;\r\n        }\r\n        \r\n        require(balanceOf[from] >= amount, \"Insufficient balance\");\r\n        \r\n        balanceOf[from] -= amount;\r\n        balanceOf[to] += amount;\r\n        \r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/mock/MockPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n// Mock LP Pair contract for testing\r\ncontract MockPair {\r\n    string public name = \"Uniswap V2 Pair\";\r\n    string public symbol = \"UNI-V2\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function mint(address to, uint256 amount) public {\r\n        balanceOf[to] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        if (from != msg.sender) {\r\n            require(allowance[from][msg.sender] >= amount, \"Insufficient allowance\");\r\n            allowance[from][msg.sender] -= amount;\r\n        }\r\n        \r\n        require(balanceOf[from] >= amount, \"Insufficient balance\");\r\n        balanceOf[from] -= amount;\r\n        balanceOf[to] += amount;\r\n        \r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/mock/MockUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract MockUniswapV2Factory {\r\n    address public feeTo;\r\n    address public feeToSetter;\r\n    mapping(address => mapping(address => address)) public getPair;\r\n    address[] public allPairs;\r\n    \r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    \r\n    constructor(address _feeToSetter) {\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n    \r\n    function allPairsLength() external view returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n    \r\n    function createPairMock(address tokenA, address tokenB) private returns (address pair) {\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\"pair\", tokenA, tokenB)))));\r\n        getPair[tokenA][tokenB] = pair;\r\n        getPair[tokenB][tokenA] = pair; // populate mapping in both directions\r\n        allPairs.push(pair);\r\n        emit PairCreated(tokenA, tokenB, pair, allPairs.length);\r\n    }\r\n    \r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        return createPairMock(tokenA, tokenB);\r\n    }\r\n}"
    },
    "contracts/mock/MockUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract MockUniswapV2Router02 {\r\n    address public factory;\r\n    address public WETH;\r\n    \r\n    constructor(address _factory, address _WETH) {\r\n        factory = _factory;\r\n        WETH = _WETH;\r\n    }\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity) {\r\n        amountToken = amountTokenDesired;\r\n        amountETH = msg.value;\r\n        liquidity = amountToken * amountETH / 1e18;\r\n        return (amountToken, amountETH, liquidity);\r\n    }\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity) {\r\n        amountA = amountADesired;\r\n        amountB = amountBDesired;\r\n        liquidity = amountA * amountB / 1e18;\r\n        return (amountA, amountB, liquidity);\r\n    }\r\n}"
    },
    "contracts/mock/MockWeth.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract MockWETH {\r\n    string public name = \"Wrapped Ether\";\r\n    string public symbol = \"WETH\";\r\n    uint8 public decimals = 18;\r\n    \r\n    event Deposit(address indexed dst, uint wad);\r\n    event Withdrawal(address indexed src, uint wad);\r\n    \r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n    \r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        payable(msg.sender).transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\r\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint).max) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n        \r\n        require(balanceOf[src] >= wad);\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n        return true;\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/utils/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract TokenAccessControl is AccessControl {\r\n    // Predefined roles\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    // Events for role management\r\n    event AdminRoleGranted(address indexed account, address indexed sender);\r\n    event OperatorRoleGranted(address indexed account, address indexed sender);\r\n\r\n    constructor() {\r\n        // Grant DEFAULT_ADMIN_ROLE and ADMIN_ROLE to contract deployer\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    // Modifiers for role-based access control\r\n    modifier onlyAdmin() {\r\n        _checkRole(ADMIN_ROLE, msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        _checkRole(ADMIN_ROLE, msg.sender);\r\n        _checkRole(OPERATOR_ROLE, msg.sender);\r\n        _;\r\n    }\r\n\r\n    // Enhanced role management functions\r\n    function grantAdminRole(address account) external onlyAdmin {\r\n        grantRole(ADMIN_ROLE, account);\r\n        emit AdminRoleGranted(account, msg.sender);\r\n    }\r\n\r\n    function grantOperatorRole(address account) external onlyAdmin {\r\n        grantRole(OPERATOR_ROLE, account);\r\n        emit OperatorRoleGranted(account, msg.sender);\r\n    }\r\n\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyAdmin {\r\n        super.revokeRole(role, account);\r\n        emit RoleRevoked(role, account, msg.sender);\r\n    }\r\n\r\n    // Optional renounce role with admin approval\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(\r\n            account == msg.sender || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Cannot renounce role for another account\"\r\n        );\r\n        super.renounceRole(role, account);\r\n    }\r\n}"
    },
    "contracts/utils/SecurityUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SecurityUtils\r\n * @dev Simplified security utility functions for token contracts\r\n */\r\nlibrary SecurityUtils {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Struct to store contract security settings\r\n     */\r\n    struct SecuritySettings {\r\n        bool pausable;\r\n        bool paused;\r\n        bool blockContractsByDefault;\r\n        mapping(address => bool) blockedContracts;\r\n        mapping(address => bool) trustedContracts;\r\n    }\r\n    \r\n    /**\r\n     * @dev Initializes security settings with minimal defaults\r\n     * @param settings Security settings storage pointer\r\n     */\r\n    function initialize(SecuritySettings storage settings) internal {\r\n        settings.pausable = true;\r\n        settings.paused = false; // Start unpaused by default\r\n        settings.blockContractsByDefault = false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Simplified security check that only blocks explicitly blacklisted contracts\r\n     * @param settings Security settings storage pointer\r\n     * @param from Sender address\r\n     * @param to Recipient address\r\n     * @return bool Whether the transfer passes security checks\r\n     */\r\n    function isSecureTransfer(\r\n        SecuritySettings storage settings,\r\n        address from,\r\n        address to\r\n    ) internal view returns (bool) {\r\n        // Only block if explicitly paused\r\n        if (settings.pausable && settings.paused) {\r\n            return false;\r\n        }\r\n        \r\n        // Only block explicitly blacklisted contracts\r\n        if (isContract(from) && settings.blockedContracts[from]) {\r\n            return false;\r\n        }\r\n        \r\n        // Allow all other transfers\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if an address is a contract\r\n     * @param addr Address to check\r\n     * @return bool Whether the address is a contract\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        return addr.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates an address is not zero address\r\n     * @param addr Address to validate\r\n     * @return bool Whether the address is valid\r\n     */\r\n    function isValidAddress(address addr) internal pure returns (bool) {\r\n        return addr != address(0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets a contract as trusted or blocked\r\n     * @param settings Security settings storage pointer\r\n     * @param contractAddr Contract address\r\n     * @param trusted Whether the contract should be trusted\r\n     * @param blocked Whether the contract should be blocked\r\n     */\r\n    function setContractStatus(\r\n        SecuritySettings storage settings,\r\n        address contractAddr,\r\n        bool trusted,\r\n        bool blocked\r\n    ) internal {\r\n        require(isContract(contractAddr), \"Address is not a contract\");\r\n        settings.trustedContracts[contractAddr] = trusted;\r\n        settings.blockedContracts[contractAddr] = blocked;\r\n    }\r\n    \r\n    /**\r\n     * @dev Toggles the paused state\r\n     * @param settings Security settings storage pointer\r\n     * @param paused Whether the contract should be paused\r\n     */\r\n    function setPaused(SecuritySettings storage settings, bool paused) internal {\r\n        require(settings.pausable, \"Contract is not pausable\");\r\n        settings.paused = paused;\r\n    }\r\n\r\n    function setBlockContractsByDefault(\r\n        SecuritySettings storage settings,\r\n        bool blocked\r\n    ) internal {\r\n        settings.blockContractsByDefault = blocked;\r\n    }\r\n}"
    },
    "contracts/utils/TimeControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TimeControl is Ownable {\r\n    // uint256 private lastPhase;\r\n    // uint256 private lastPhaseUpdateTime;\r\n    uint256 public launchTime;\r\n    bool public tradingEnabled;\r\n    \r\n    // Time-based phases\r\n    uint256 public  PHASE_1_DURATION = 1 hours;\r\n    uint256 public  PHASE_2_DURATION = 6 hours;\r\n    uint256 public  PHASE_3_DURATION = 24 hours;\r\n    \r\n    modifier onlyAfterLaunch() {\r\n        require(tradingEnabled && block.timestamp >= launchTime, \"Trading not yet enabled\");\r\n        _;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {}\r\n    \r\n    // Optional: Ability to adjust phase durations\r\n    function updatePhaseDurations(\r\n        uint256 phase1Duration,\r\n        uint256 phase2Duration,\r\n        uint256 phase3Duration\r\n    ) external onlyOwner {\r\n        require(\r\n            !tradingEnabled, \r\n            \"Cannot modify durations after trading is enabled\"\r\n        );\r\n        \r\n\r\n        PHASE_1_DURATION = phase1Duration;\r\n        PHASE_2_DURATION = phase2Duration;\r\n        PHASE_3_DURATION = phase3Duration;\r\n    }\r\n\r\n    function getCurrentPhase() public view returns (uint8) {\r\n        if (!tradingEnabled) return 0;\r\n        \r\n        uint256 timeSinceLaunch = block.timestamp - launchTime;\r\n        \r\n        if (timeSinceLaunch < PHASE_1_DURATION) {\r\n            return 1;\r\n        } else if (timeSinceLaunch < PHASE_1_DURATION + PHASE_2_DURATION) {\r\n            return 2;\r\n        } else if (timeSinceLaunch < PHASE_1_DURATION + PHASE_2_DURATION + PHASE_3_DURATION) {\r\n            return 3;\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    // Utility function to check time remaining in current phase\r\n    function getTimeRemainingInCurrentPhase() external view returns (uint256) {\r\n        if (!tradingEnabled) return 0;\r\n        \r\n        uint256 timeSinceLaunch = block.timestamp - launchTime;\r\n        uint8 currentPhase = getCurrentPhase();\r\n        \r\n        if (currentPhase == 1) {\r\n            return PHASE_1_DURATION - timeSinceLaunch;\r\n        } else if (currentPhase == 2) {\r\n            return (PHASE_1_DURATION + PHASE_2_DURATION) - timeSinceLaunch;\r\n        } else if (currentPhase == 3) {\r\n            return (PHASE_1_DURATION + PHASE_2_DURATION + PHASE_3_DURATION) - timeSinceLaunch;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n}\r\n\r\n// function getCurrentPhase() public returns (uint256) {\r\n//     if (block.timestamp > lastPhaseUpdateTime + 5 minutes) {  \r\n//         lastPhase = _calculatePhase();  // Now calling a private function\r\n//         lastPhaseUpdateTime = block.timestamp;\r\n//     }\r\n//     return lastPhase;\r\n// }\r\n\r\n\r\n// function calculatePhase() internal view returns (uint256) {\r\n//     uint256 elapsedTime = block.timestamp - launchTime;  \r\n\r\n//     if (elapsedTime < 1 hours) {\r\n//         return 1;  // Phase 1: Initial Launch\r\n//     } else if (elapsedTime < 6 hours) {\r\n//         return 2;  // Phase 2: Early Trading\r\n//     } else if (elapsedTime < 24 hours) {\r\n//         return 3;  // Phase 3: Market Stability\r\n//     } else {\r\n//         return 4;  // Phase 4: Fully Operational\r\n//     }\r\n// }\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}