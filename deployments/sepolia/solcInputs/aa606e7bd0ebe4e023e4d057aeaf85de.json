{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/extensions/LiquidityManagerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract LiquidityManagerV2 is Ownable {\r\n    // State variables\r\n    IUniswapV2Router02 public immutable router;\r\n    address public immutable weth;\r\n    \r\n    // Structs for organizing data\r\n    struct LockInfo {\r\n        address pair;\r\n        uint256 unlockTime;\r\n    }\r\n    \r\n    struct LiquidityParams {\r\n        address tokenA;\r\n        address tokenB;\r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        uint256 amountAMin;\r\n        uint256 amountBMin;\r\n        uint256 lockDuration;\r\n        bool isEthPair;\r\n        address recipient;\r\n    }\r\n    \r\n    struct TokenPair {\r\n        address token0;\r\n        address token1;\r\n        bool isToken0Weth;\r\n        bool isToken1Weth;\r\n    }\r\n    \r\n    // Mappings\r\n    mapping(address => LockInfo) public liquidityLocks;\r\n    \r\n    // Events\r\n    event LiquidityAdded(\r\n        address indexed tokenA, \r\n        address indexed tokenB, \r\n        address pair, \r\n        uint amountA, \r\n        uint amountB, \r\n        uint liquidity\r\n    );\r\n    event LiquidityLocked(address indexed pair, uint256 unlockTime);\r\n    event LiquidityUnlocked(address indexed pair, address recipient);\r\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pair);\r\n    event TokensApproved(address token, uint256 amount);\r\n    event TokensTransferred(address token, address from, address to, uint256 amount);\r\n    event RefundSent(address token, address recipient, uint256 amount);\r\n    \r\n    constructor(address _router) Ownable(msg.sender) {\r\n        router = IUniswapV2Router02(_router);\r\n        weth = router.WETH();\r\n    }\r\n    \r\n    // Main entry point for adding liquidity with two ERC20 tokens\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 lockDuration\r\n    ) external returns (uint amountTokenA, uint amountTokenB, uint liquidity) {\r\n        require(!(_isWETH(tokenA) && _isWETH(tokenB)), \"Cannot create WETH/WETH pair\");\r\n        // Create the params struct\r\n        LiquidityParams memory params = LiquidityParams({\r\n            tokenA: tokenA,\r\n            tokenB: tokenB,\r\n            amountA: amountA,\r\n            amountB: amountB,\r\n            amountAMin: amountAMin,\r\n            amountBMin: amountBMin,\r\n            lockDuration: lockDuration,\r\n            isEthPair: false,\r\n            recipient: lockDuration > 0 ? address(this) : msg.sender\r\n        });\r\n        \r\n        // Step 1: Transfer tokens from user to this contract\r\n        _transferTokensToContract(params);\r\n        \r\n        // Step 2: Approve router to spend tokens\r\n        _approveTokensForRouter(params);\r\n        \r\n        // Step 3: Add liquidity through router\r\n        (amountTokenA, amountTokenB, liquidity) = _addLiquidityViaRouter(params);\r\n        \r\n        // Step 4: Refund excess tokens\r\n        _refundExcessTokens(params, amountTokenA, amountTokenB);\r\n        \r\n        // Step 5: Handle locking if needed\r\n        _handleLiquidityLocking(params, tokenA, tokenB);\r\n        \r\n        return (amountTokenA, amountTokenB, liquidity);\r\n    }\r\n    \r\n    // Main entry point for adding liquidity with ETH and an ERC20 token\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountToken,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 lockDuration\r\n    ) external payable returns (uint amountTokenOut, uint amountETH, uint liquidity) {\r\n        require(!_isWETH(token), \"Use addLiquidity for WETH pairs\");\r\n        // Create the params struct\r\n        LiquidityParams memory params = LiquidityParams({\r\n            tokenA: token,\r\n            tokenB: weth,\r\n            amountA: amountToken,\r\n            amountB: msg.value,\r\n            amountAMin: amountTokenMin,\r\n            amountBMin: amountETHMin,\r\n            lockDuration: lockDuration,\r\n            isEthPair: true,\r\n            recipient: lockDuration > 0 ? address(this) : msg.sender\r\n        });\r\n        \r\n        // Step 1: Transfer token from user to this contract (ETH is already here)\r\n        _transferTokenToContract(token, amountToken);\r\n        \r\n        // Step 2: Approve router to spend token\r\n        _approveTokenForRouter(token, amountToken);\r\n        \r\n        // Step 3: Add liquidity through router\r\n        (amountTokenOut, amountETH, liquidity) = _addLiquidityETHViaRouter(params);\r\n        \r\n        // Step 4: Refund excess tokens and ETH\r\n        _refundExcessTokenAndETH(params, amountTokenOut, amountETH);\r\n        \r\n        // Step 5: Handle locking if needed\r\n        _handleLiquidityLocking(params, token, weth);\r\n        \r\n        return (amountTokenOut, amountETH, liquidity);\r\n    }\r\n\r\n    function _isWETH(address token) private view returns (bool) {\r\n        return token == weth;\r\n    }\r\n    \r\n    // Helper function 1: Transfer tokens from user to contract\r\n    function _transferTokensToContract(LiquidityParams memory params) private {\r\n        if (!_isWETH(params.tokenA)) {\r\n            _transferTokenToContract(params.tokenA, params.amountA);\r\n        }\r\n        \r\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\r\n            _transferTokenToContract(params.tokenB, params.amountB);\r\n        }\r\n    }\r\n    \r\n    // Helper function for transferring a single token\r\n    function _transferTokenToContract(address token, uint256 amount) private {\r\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        require(success, \"Transfer of token failed\");\r\n        emit TokensTransferred(token, msg.sender, address(this), amount);\r\n    }\r\n    \r\n    // Helper function 2: Approve router to spend tokens\r\n    function _approveTokensForRouter(LiquidityParams memory params) private {\r\n        if (!_isWETH(params.tokenA)) {\r\n            _approveTokenForRouter(params.tokenA, params.amountA);\r\n        }\r\n        \r\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\r\n            _approveTokenForRouter(params.tokenB, params.amountB);\r\n        }\r\n    }\r\n    \r\n    // Helper function for approving a single token\r\n    function _approveTokenForRouter(address token, uint256 amount) private {\r\n        IERC20(token).approve(address(router), amount);\r\n        emit TokensApproved(token, amount);\r\n    }\r\n    \r\n    // Helper function 3A: Add liquidity through router for token pairs\r\n    function _addLiquidityViaRouter(LiquidityParams memory params) \r\n        private \r\n        returns (uint amountA, uint amountB, uint liquidity) \r\n    {\r\n        return router.addLiquidity(\r\n            params.tokenA,\r\n            params.tokenB,\r\n            params.amountA,\r\n            params.amountB,\r\n            params.amountAMin,\r\n            params.amountBMin,\r\n            params.recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n    \r\n    // Helper function 3B: Add liquidity through router for ETH pairs\r\n    function _addLiquidityETHViaRouter(LiquidityParams memory params) \r\n        private \r\n        returns (uint amountToken, uint amountETH, uint liquidity) \r\n    {\r\n        return router.addLiquidityETH{value: params.amountB}(\r\n            params.tokenA,\r\n            params.amountA,\r\n            params.amountAMin,\r\n            params.amountBMin,\r\n            params.recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n    \r\n    // Helper function 4A: Refund excess tokens\r\n    function _refundExcessTokens(\r\n        LiquidityParams memory params,\r\n        uint256 amountAUsed,\r\n        uint256 amountBUsed\r\n    ) private {\r\n        if (params.amountA > amountAUsed) {\r\n            uint256 refundAmount = params.amountA - amountAUsed;\r\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\r\n        }\r\n        \r\n        if (!params.isEthPair && params.amountB > amountBUsed) {\r\n            uint256 refundAmount = params.amountB - amountBUsed;\r\n            IERC20(params.tokenB).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenB, msg.sender, refundAmount);\r\n        }\r\n    }\r\n    \r\n    // Helper function 4B: Refund excess token and ETH\r\n    function _refundExcessTokenAndETH(\r\n        LiquidityParams memory params,\r\n        uint256 amountTokenUsed,\r\n        uint256 amountETHUsed\r\n    ) private {\r\n        if (params.amountA > amountTokenUsed) {\r\n            uint256 refundAmount = params.amountA - amountTokenUsed;\r\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\r\n        }\r\n        \r\n        if (params.amountB > amountETHUsed) {\r\n            uint256 refundAmount = params.amountB - amountETHUsed;\r\n            (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\r\n            require(success, \"ETH refund failed\");\r\n            emit RefundSent(address(0), msg.sender, refundAmount); // address(0) represents ETH\r\n        }\r\n    }\r\n    \r\n    // Helper function 5: Handle liquidity locking if needed\r\n    function _handleLiquidityLocking(\r\n        LiquidityParams memory params,\r\n        address tokenA,\r\n        address tokenB\r\n    ) private {\r\n        if (params.lockDuration > 0) {\r\n            // Get pair address\r\n            address pair = IUniswapV2Factory(router.factory()).getPair(tokenA, tokenB);\r\n            require(pair != address(0), \"Pair does not exist\");\r\n            \r\n            // Set up lock info\r\n            liquidityLocks[pair] = LockInfo({\r\n                pair: pair,\r\n                unlockTime: block.timestamp + params.lockDuration\r\n            });\r\n            \r\n            emit LiquidityLocked(pair, block.timestamp + params.lockDuration);\r\n        }\r\n    }\r\n    \r\n    // Function to unlock liquidity after the lock duration\r\n    function unlockLiquidity(address pair) external {\r\n        LockInfo storage lockInfo = liquidityLocks[pair];\r\n        require(lockInfo.pair == pair, \"Liquidity not locked\");\r\n        require(block.timestamp >= lockInfo.unlockTime, \"Liquidity still locked\");\r\n        require(msg.sender == owner(), \"Not authorized\");\r\n        \r\n        // Get liquidity amount\r\n        uint256 liquidity = IERC20(pair).balanceOf(address(this));\r\n        require(liquidity > 0, \"No liquidity to unlock\");\r\n        \r\n        // Transfer LP tokens back to sender\r\n        IERC20(pair).transfer(msg.sender, liquidity);\r\n        \r\n        // Clear lock info\r\n        delete liquidityLocks[pair];\r\n        \r\n        emit LiquidityUnlocked(pair, msg.sender);\r\n    }\r\n    \r\n    // Function to create a pair if it doesn't exist\r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        pair = factory.getPair(tokenA, tokenB);\r\n        \r\n        if (pair == address(0)) {\r\n            pair = factory.createPair(tokenA, tokenB);\r\n            emit PairCreated(tokenA, tokenB, pair);\r\n        }\r\n        \r\n        return pair;\r\n    }\r\n    \r\n    // Debug function to check token allowances\r\n    function checkAllowance(address token, address spender) external view returns (uint256) {\r\n        return IERC20(token).allowance(address(this), spender);\r\n    }\r\n    \r\n    // Debug function to check token balances\r\n    function checkBalance(address token, address account) external view returns (uint256) {\r\n        return IERC20(token).balanceOf(account);\r\n    }\r\n    \r\n    // Debug function to transfer tokens directly\r\n    function debugTransferToken(address token, address to, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n    \r\n    // Debug function to approve tokens directly\r\n    function debugApproveToken(address token, address spender, uint256 amount) external onlyOwner {\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n    \r\n    // Handle received ETH\r\n    receive() external payable {}\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}