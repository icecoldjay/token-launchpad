{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/extensions/TokenSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract TokenSwapContract is ReentrancyGuard, Ownable, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IUniswapV2Router public immutable uniswapRouter;\r\n\r\n    uint256 public feePercentage = 30; // 0.3% fee (30 basis points)\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n    struct LimitOrder {\r\n        address user;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountIn;\r\n        uint256 minAmountOut;\r\n        uint256 expiry;\r\n        bool executed;\r\n        bool cancelled;\r\n    }\r\n\r\n    mapping(uint256 => LimitOrder) public limitOrders;\r\n    mapping(address => uint256[]) public userOrders;\r\n    mapping(address => bool) public authorizedExecutors; // Off-chain service addresses\r\n    uint256 public nextOrderId;\r\n\r\n    event MarketSwap(\r\n        address indexed user,\r\n        address indexed tokenIn,\r\n        address indexed tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        uint256 fee\r\n    );\r\n\r\n    event LimitOrderCreated(\r\n        uint256 indexed orderId,\r\n        address indexed user,\r\n        address indexed tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        uint256 expiry\r\n    );\r\n\r\n    event LimitOrderExecuted(\r\n        uint256 indexed orderId,\r\n        address indexed user,\r\n        address indexed executor,\r\n        uint256 amountOut\r\n    );\r\n\r\n    event LimitOrderCancelled(uint256 indexed orderId, address indexed user);\r\n\r\n    modifier onlyAuthorizedExecutor() {\r\n        require(authorizedExecutors[msg.sender], \"Not authorized executor\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _uniswapRouter) Ownable(msg.sender) {\r\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\r\n    }\r\n\r\n    // Market Order Functions\r\n    function marketSwapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        uint256 deadline\r\n    ) external nonReentrant whenNotPaused {\r\n        require(amountIn > 0, \"Amount must be greater than 0\");\r\n        require(deadline >= block.timestamp, \"Deadline exceeded\");\r\n\r\n        IERC20(tokenIn).safeTransfer(address(this), amountIn);\r\n\r\n        // Calculate fee\r\n        uint256 fee = (amountIn * feePercentage) / FEE_DENOMINATOR;\r\n        uint256 swapAmount = amountIn - fee;\r\n\r\n        // Approve router\r\n        IERC20(tokenIn).approve(address(uniswapRouter), swapAmount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n\r\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\r\n            swapAmount,\r\n            minAmountOut,\r\n            path,\r\n            msg.sender,\r\n            deadline\r\n        );\r\n\r\n        emit MarketSwap(\r\n            msg.sender,\r\n            tokenIn,\r\n            tokenOut,\r\n            amountIn,\r\n            amounts[1],\r\n            fee\r\n        );\r\n    }\r\n\r\n    function marketSwapTokensForExactTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 maxAmountIn,\r\n        uint256 deadline\r\n    ) external nonReentrant whenNotPaused {\r\n        require(amountOut > 0, \"Amount must be greater than 0\");\r\n        require(deadline >= block.timestamp, \"Deadline exceeded\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n\r\n        // Get required input amount\r\n        uint256[] memory amounts = uniswapRouter.getAmountsIn(amountOut, path);\r\n        uint256 requiredAmountIn = amounts[0];\r\n\r\n        // Add fee\r\n        uint256 totalAmountIn = (requiredAmountIn * FEE_DENOMINATOR) /\r\n            (FEE_DENOMINATOR - feePercentage);\r\n        require(totalAmountIn <= maxAmountIn, \"Excessive input amount\");\r\n\r\n        IERC20(tokenIn).safeTransfer(address(this), totalAmountIn);\r\n\r\n        uint256 fee = totalAmountIn - requiredAmountIn;\r\n\r\n        // Approve router\r\n        IERC20(tokenIn).approve(address(uniswapRouter), requiredAmountIn);\r\n\r\n        uint256[] memory swapAmounts = uniswapRouter.swapTokensForExactTokens(\r\n            amountOut,\r\n            requiredAmountIn,\r\n            path,\r\n            msg.sender,\r\n            deadline\r\n        );\r\n\r\n        emit MarketSwap(\r\n            msg.sender,\r\n            tokenIn,\r\n            tokenOut,\r\n            totalAmountIn,\r\n            amountOut,\r\n            fee\r\n        );\r\n    }\r\n\r\n    // Limit Order Functions (for off-chain service to trigger)\r\n    function createLimitOrder(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 minAmountOut,\r\n        uint256 expiry\r\n    ) external nonReentrant whenNotPaused returns (uint256 orderId) {\r\n        require(amountIn > 0, \"Amount must be greater than 0\");\r\n        require(expiry > block.timestamp, \"Invalid expiry\");\r\n\r\n        IERC20(tokenIn).safeTransfer(address(this), amountIn);\r\n\r\n        orderId = nextOrderId++;\r\n\r\n        limitOrders[orderId] = LimitOrder({\r\n            user: msg.sender,\r\n            tokenIn: tokenIn,\r\n            tokenOut: tokenOut,\r\n            amountIn: amountIn,\r\n            minAmountOut: minAmountOut,\r\n            expiry: expiry,\r\n            executed: false,\r\n            cancelled: false\r\n        });\r\n\r\n        userOrders[msg.sender].push(orderId);\r\n\r\n        emit LimitOrderCreated(\r\n            orderId,\r\n            msg.sender,\r\n            tokenIn,\r\n            tokenOut,\r\n            amountIn,\r\n            minAmountOut,\r\n            expiry\r\n        );\r\n    }\r\n\r\n    // This function will be called by your off-chain service when price conditions are met\r\n    function executeLimitOrder(\r\n        uint256 orderId\r\n    ) external nonReentrant onlyAuthorizedExecutor {\r\n        LimitOrder storage order = limitOrders[orderId];\r\n        require(!order.executed && !order.cancelled, \"Order not executable\");\r\n        require(order.expiry > block.timestamp, \"Order expired\");\r\n\r\n        // Calculate fee\r\n        uint256 fee = (order.amountIn * feePercentage) / FEE_DENOMINATOR;\r\n        uint256 swapAmount = order.amountIn - fee;\r\n\r\n        // Approve router\r\n        IERC20(order.tokenIn).approve(address(uniswapRouter), swapAmount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = order.tokenIn;\r\n        path[1] = order.tokenOut;\r\n\r\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\r\n            swapAmount,\r\n            order.minAmountOut,\r\n            path,\r\n            order.user,\r\n            block.timestamp + 300 // 5 minute deadline\r\n        );\r\n\r\n        order.executed = true;\r\n\r\n        emit LimitOrderExecuted(orderId, order.user, msg.sender, amounts[1]);\r\n    }\r\n\r\n    // Batch execution for efficiency\r\n    function executeBatchLimitOrders(\r\n        uint256[] calldata orderIds\r\n    ) external nonReentrant onlyAuthorizedExecutor {\r\n        for (uint256 i = 0; i < orderIds.length; i++) {\r\n            uint256 orderId = orderIds[i];\r\n            LimitOrder storage order = limitOrders[orderId];\r\n\r\n            if (\r\n                order.executed ||\r\n                order.cancelled ||\r\n                order.expiry <= block.timestamp\r\n            ) {\r\n                continue; // Skip invalid orders\r\n            }\r\n\r\n            // Calculate fee\r\n            uint256 fee = (order.amountIn * feePercentage) / FEE_DENOMINATOR;\r\n            uint256 swapAmount = order.amountIn - fee;\r\n\r\n            // Approve router\r\n            IERC20(order.tokenIn).approve(address(uniswapRouter), swapAmount);\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = order.tokenIn;\r\n            path[1] = order.tokenOut;\r\n\r\n            try\r\n                uniswapRouter.swapExactTokensForTokens(\r\n                    swapAmount,\r\n                    order.minAmountOut,\r\n                    path,\r\n                    order.user,\r\n                    block.timestamp + 300\r\n                )\r\n            returns (uint256[] memory amounts) {\r\n                order.executed = true;\r\n                emit LimitOrderExecuted(\r\n                    orderId,\r\n                    order.user,\r\n                    msg.sender,\r\n                    amounts[1]\r\n                );\r\n            } catch {\r\n                // If swap fails (e.g., slippage), continue to next order\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n\r\n    function cancelLimitOrder(uint256 orderId) external nonReentrant {\r\n        LimitOrder storage order = limitOrders[orderId];\r\n        require(order.user == msg.sender, \"Not order owner\");\r\n        require(!order.executed && !order.cancelled, \"Order not cancellable\");\r\n\r\n        // Return tokens to user\r\n        IERC20(order.tokenIn).safeTransfer(order.user, order.amountIn);\r\n\r\n        order.cancelled = true;\r\n\r\n        emit LimitOrderCancelled(orderId, msg.sender);\r\n    }\r\n\r\n    // View Functions\r\n    function getQuote(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut, uint256 fee) {\r\n        fee = (amountIn * feePercentage) / FEE_DENOMINATOR;\r\n        uint256 swapAmount = amountIn - fee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n\r\n        uint256[] memory amounts = uniswapRouter.getAmountsOut(\r\n            swapAmount,\r\n            path\r\n        );\r\n        amountOut = amounts[1];\r\n    }\r\n\r\n    function getUserOrders(\r\n        address user\r\n    ) external view returns (uint256[] memory) {\r\n        return userOrders[user];\r\n    }\r\n\r\n    function getOrderDetails(\r\n        uint256 orderId\r\n    ) external view returns (LimitOrder memory) {\r\n        return limitOrders[orderId];\r\n    }\r\n\r\n    function getActiveOrdersByUser(\r\n        address user\r\n    ) external view returns (uint256[] memory activeOrders) {\r\n        uint256[] memory allOrders = userOrders[user];\r\n        uint256 activeCount = 0;\r\n\r\n        // Count active orders\r\n        for (uint256 i = 0; i < allOrders.length; i++) {\r\n            LimitOrder memory order = limitOrders[allOrders[i]];\r\n            if (\r\n                !order.executed &&\r\n                !order.cancelled &&\r\n                order.expiry > block.timestamp\r\n            ) {\r\n                activeCount++;\r\n            }\r\n        }\r\n\r\n        // Build active orders array\r\n        activeOrders = new uint256[](activeCount);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < allOrders.length; i++) {\r\n            LimitOrder memory order = limitOrders[allOrders[i]];\r\n            if (\r\n                !order.executed &&\r\n                !order.cancelled &&\r\n                order.expiry > block.timestamp\r\n            ) {\r\n                activeOrders[index] = allOrders[i];\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Admin Functions\r\n    function addAuthorizedExecutor(address executor) external onlyOwner {\r\n        authorizedExecutors[executor] = true;\r\n    }\r\n\r\n    function removeAuthorizedExecutor(address executor) external onlyOwner {\r\n        authorizedExecutors[executor] = false;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _feePercentage) external onlyOwner {\r\n        require(_feePercentage <= 500, \"Fee too high\"); // Max 5%\r\n        feePercentage = _feePercentage;\r\n    }\r\n\r\n    function withdrawFees(address token, address to) external onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        // Calculate approximate fees (this is imprecise but gives an estimate)\r\n        IERC20(token).safeTransfer(to, balance);\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    // Emergency function to recover stuck tokens or cancel expired orders\r\n    function emergencyWithdraw(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(token).safeTransfer(to, amount);\r\n    }\r\n\r\n    function cleanupExpiredOrder(uint256 orderId) external {\r\n        LimitOrder storage order = limitOrders[orderId];\r\n        require(order.expiry <= block.timestamp, \"Order not expired\");\r\n        require(!order.executed && !order.cancelled, \"Order already processed\");\r\n\r\n        // Return tokens to user\r\n        IERC20(order.tokenIn).safeTransfer(order.user, order.amountIn);\r\n        order.cancelled = true;\r\n\r\n        emit LimitOrderCancelled(orderId, order.user);\r\n    }\r\n}\r\n"
    },
    "contracts/mock/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n// Mock ERC20 Token\r\ncontract ERC20Mock {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 initialSupply\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        totalSupply += amount;\r\n        balanceOf[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            balanceOf[msg.sender] >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            balanceOf[sender] >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        require(\r\n            allowance[sender][msg.sender] >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n\r\n        balanceOf[sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        allowance[sender][msg.sender] -= amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/FailingERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.20;\r\n\r\n// Mock ERC20 Token that fails transferFrom\r\ncontract FailingERC20Mock {\r\n    string public name;\r\n    string public symbol;\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        return false; // Always fail\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockReciver.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.20;\r\n\r\n// Mock contract for testing refund failures\r\ncontract MockReceiver {\r\n    // Reject all incoming ETH transfers\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n}\r\n"
    },
    "contracts/mock/UniswapV2FactoryMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract UniswapV2FactoryMock {\r\n    mapping(address => mapping(address => address)) public getPair;\r\n    address public createPairResponse;\r\n\r\n    constructor() {}\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair) {\r\n        require(tokenA != tokenB, \"UniswapV2: IDENTICAL_ADDRESSES\");\r\n        (address token0, address token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2: ZERO_ADDRESS\");\r\n\r\n        // Mock response from pair creation\r\n        pair = createPairResponse;\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair;\r\n        return pair;\r\n    }\r\n\r\n    // Helper function for testing to set pair mapping\r\n    function setPair(address tokenA, address tokenB, address pair) external {\r\n        getPair[tokenA][tokenB] = pair;\r\n        getPair[tokenB][tokenA] = pair;\r\n    }\r\n\r\n    // Helper function for testing to set createPair response\r\n    function setCreatePairResponse(address pairAddress) external {\r\n        createPairResponse = pairAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/UniswapV2RouterMock.sol": {
      "content": "// Mock Uniswap V2 Router\r\ncontract UniswapV2Router02Mock {\r\n    address public immutable factory;\r\n    address public immutable WETH;\r\n\r\n    struct AddLiquidityResponse {\r\n        uint amountA;\r\n        uint amountB;\r\n        uint liquidity;\r\n    }\r\n\r\n    struct AddLiquidityETHResponse {\r\n        uint amountToken;\r\n        uint amountETH;\r\n        uint liquidity;\r\n    }\r\n\r\n    AddLiquidityResponse public addLiquidityResponse;\r\n    AddLiquidityETHResponse public addLiquidityETHResponse;\r\n\r\n    constructor(address _factory, address _WETH) {\r\n        factory = _factory;\r\n        WETH = _WETH;\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity) {\r\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\r\n        require(\r\n            amountADesired >= amountAMin,\r\n            \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\r\n        );\r\n        require(\r\n            amountBDesired >= amountBMin,\r\n            \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\r\n        );\r\n\r\n        // Return mock values\r\n        return (\r\n            addLiquidityResponse.amountA,\r\n            addLiquidityResponse.amountB,\r\n            addLiquidityResponse.liquidity\r\n        );\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity)\r\n    {\r\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\r\n        require(\r\n            amountTokenDesired >= amountTokenMin,\r\n            \"UniswapV2Router: INSUFFICIENT_TOKEN_AMOUNT\"\r\n        );\r\n        require(\r\n            msg.value >= amountETHMin,\r\n            \"UniswapV2Router: INSUFFICIENT_ETH_AMOUNT\"\r\n        );\r\n\r\n        // Return mock values\r\n        return (\r\n            addLiquidityETHResponse.amountToken,\r\n            addLiquidityETHResponse.amountETH,\r\n            addLiquidityETHResponse.liquidity\r\n        );\r\n    }\r\n\r\n    // Helper function for testing to set addLiquidity response\r\n    function setAddLiquidityResponse(\r\n        AddLiquidityResponse memory response\r\n    ) external {\r\n        addLiquidityResponse = response;\r\n    }\r\n\r\n    // Helper function for testing to set addLiquidityETH response\r\n    function setAddLiquidityETHResponse(\r\n        AddLiquidityETHResponse memory response\r\n    ) external {\r\n        addLiquidityETHResponse = response;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/WethMock.sol": {
      "content": "// Mock WETH for testing\r\ncontract WETHMock {\r\n    string public name = \"Wrapped ETH\";\r\n    string public symbol = \"WETH\";\r\n    uint8 public decimals = 18;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() {}\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Transfer(address(0), msg.sender, msg.value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(balanceOf[msg.sender] >= value, \"WETH: insufficient balance\");\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}