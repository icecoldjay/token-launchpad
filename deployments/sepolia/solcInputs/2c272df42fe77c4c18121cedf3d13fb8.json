{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/core/LaunchManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./TokenFactory.sol\";\r\nimport \"../extensions/LiquidityManager.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract LaunchManager {\r\n    TokenFactory public tokenFactory;\r\n    address payable public liquidityManagerAddress;\r\n    \r\n    uint256 public launchFee;\r\n    address public feeCollector;\r\n\r\n    mapping(address => bytes32) public launchCommits;\r\n    \r\n    // Base token parameters (common for both launch types)\r\n    struct TokenParams {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        address[] initialHolders;\r\n        uint256[] initialAmounts;\r\n        bool enableAntiBot;\r\n    }\r\n    \r\n    // Parameters for ETH pair liquidity\r\n    struct EthPairParams {\r\n        uint256 tokenAmount;      // Amount of our token for liquidity\r\n        uint256 ethAmount;        // Amount of ETH for liquidity\r\n        uint256 tokenAmountMin;   // Min amount of our token for slippage\r\n        uint256 ethAmountMin;     // Min amount of ETH for slippage\r\n        uint256 lockDuration;     // How long to lock liquidity for\r\n    }\r\n    \r\n    // Parameters for custom token pair liquidity\r\n    struct TokenPairParams {\r\n        address pairToken;        // The token to pair with (USDC, USDT, etc.)\r\n        uint256 tokenAmount;      // Amount of our token for liquidity\r\n        uint256 pairAmount;       // Amount of pair token for liquidity\r\n        uint256 tokenAmountMin;   // Min amount of our token for slippage\r\n        uint256 pairAmountMin;    // Min amount of pair token for slippage\r\n        uint256 lockDuration;     // How long to lock liquidity for\r\n    }\r\n    \r\n    event LaunchCompleted(address indexed tokenAddress, uint256 indexed liquidityTokenId);\r\n    event TokenDistributed(address indexed token, address indexed holder, uint256 amount);\r\n    \r\n    constructor(\r\n        address _tokenFactory,\r\n        address payable _liquidityManager,\r\n        address _feeCollector,\r\n        uint256 _launchFee\r\n    ) {\r\n        tokenFactory = TokenFactory(_tokenFactory);\r\n        liquidityManagerAddress = _liquidityManager;\r\n        feeCollector = _feeCollector;\r\n        launchFee = _launchFee;\r\n    }\r\n    \r\n    // Launch with ETH pair\r\n    function instantLaunchWithEth(\r\n        TokenParams calldata tokenParams, \r\n        EthPairParams calldata ethParams\r\n    ) external payable {\r\n        // Get the token creation fee\r\n        uint256 tokenCreationFee = tokenFactory.creationFee();\r\n        \r\n        // Check if enough ETH was sent (fee + token creation fee + amount for liquidity)\r\n        require(msg.value >= launchFee + tokenCreationFee + ethParams.ethAmount, \"Insufficient ETH\");\r\n\r\n        // Deduct fee\r\n        (bool sent, ) = feeCollector.call{value: launchFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n        \r\n        // Create token - the token factory will mint all tokens to msg.sender and pre-approve\r\n        address tokenAddress = _createToken(tokenParams);\r\n        \r\n        // Distribute tokens to initial holders\r\n        _distributeTokens(tokenAddress, tokenParams);\r\n        \r\n        // Create ETH liquidity\r\n        uint256 ethForLiquidity = msg.value - launchFee - tokenCreationFee;\r\n        (uint amountToken, uint amountETH, uint liquidity) = _createLiquidityWithEth(\r\n            tokenAddress, \r\n            ethParams, \r\n            ethForLiquidity\r\n        );\r\n        \r\n        // Mark initial distribution as complete\r\n        _completeInitialDistribution(tokenAddress);\r\n        \r\n        // Refund any excess ETH\r\n        if (address(this).balance > 0) {\r\n            (bool refunded, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(refunded, \"Refund failed\");\r\n        }\r\n\r\n        emit LaunchCompleted(tokenAddress, liquidity);\r\n    }\r\n    \r\n    // Launch with custom token pair\r\n    function instantLaunchWithToken(\r\n        TokenParams calldata tokenParams, \r\n        TokenPairParams calldata pairParams\r\n    ) external payable {\r\n        // Get the token creation fee\r\n        uint256 tokenCreationFee = tokenFactory.creationFee();\r\n        \r\n        // Check if enough ETH was sent for both fees\r\n        require(msg.value >= launchFee + tokenCreationFee, \"Insufficient fee\");\r\n\r\n        // Deduct fee\r\n        (bool sent, ) = feeCollector.call{value: launchFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n        \r\n        // Create token - the token factory will mint all tokens to msg.sender and pre-approve\r\n        address tokenAddress = _createToken(tokenParams);\r\n        \r\n        // Distribute tokens to initial holders\r\n        _distributeTokens(tokenAddress, tokenParams);\r\n        \r\n        // Create token pair liquidity\r\n        (uint amountA, uint amountB, uint liquidity) = _createLiquidityWithToken(\r\n            tokenAddress, \r\n            pairParams\r\n        );\r\n        \r\n        // Mark initial distribution as complete\r\n        _completeInitialDistribution(tokenAddress);\r\n        \r\n        // Refund any excess ETH\r\n        if (address(this).balance > 0) {\r\n            (bool refunded, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(refunded, \"Refund failed\");\r\n        }\r\n\r\n        emit LaunchCompleted(tokenAddress, liquidity);\r\n    }\r\n\r\n    function _createToken(TokenParams calldata params) private returns (address) {\r\n        return tokenFactory.createToken{value: tokenFactory.creationFee()}(\r\n            params.name,\r\n            params.symbol,\r\n            params.totalSupply,\r\n            params.initialHolders,\r\n            params.initialAmounts,\r\n            liquidityManagerAddress, // Pass the liquidity manager address\r\n            address(this),         // Pass this contract as the launch manager\r\n            true\r\n        );\r\n    }\r\n    \r\n    function _distributeTokens(address tokenAddress, TokenParams calldata params) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        \r\n        // Transfer tokens from the token creator to initial holders\r\n        // The token has already pre-approved this contract to spend tokens from msg.sender\r\n        for (uint i = 0; i < params.initialHolders.length; i++) {\r\n            if (params.initialHolders[i] != address(0) && params.initialAmounts[i] > 0) {\r\n                require(\r\n                    token.transferFrom(msg.sender, params.initialHolders[i], params.initialAmounts[i]),\r\n                    \"Token transfer failed\"\r\n                );\r\n                emit TokenDistributed(tokenAddress, params.initialHolders[i], params.initialAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _completeInitialDistribution(address tokenAddress) private {\r\n        IToken(tokenAddress).completeInitialDistribution();\r\n    }\r\n\r\n    function _createLiquidityWithEth(\r\n        address tokenAddress, \r\n        EthPairParams calldata params,\r\n        uint256 ethAmount\r\n    ) private returns (uint amountToken, uint amountETH, uint liquidity) {\r\n        LiquidityManager liquidityManager = LiquidityManager(liquidityManagerAddress);\r\n        \r\n        // The liquidity manager is already pre-approved in the token contract\r\n        // to spend tokens from msg.sender, so no need to transfer or approve again\r\n        \r\n        return liquidityManager.addLiquidityETH{value: ethAmount}(\r\n            tokenAddress,              // token address (our newly created token)\r\n            params.tokenAmount,        // amount of our token\r\n            params.tokenAmountMin,     // min amount of our token (for slippage)\r\n            params.ethAmountMin,       // min ETH amount (for slippage)\r\n            params.lockDuration        // how long to lock liquidity\r\n        );\r\n    }\r\n\r\n    function _createLiquidityWithToken(\r\n        address tokenAddress, \r\n        TokenPairParams calldata params\r\n    ) private returns (uint amountA, uint amountB, uint liquidity) {\r\n        LiquidityManager liquidityManager = LiquidityManager(liquidityManagerAddress);\r\n        \r\n        // The liquidity manager is already pre-approved in the token contract\r\n        // to spend tokens from msg.sender, so no need to transfer or approve again\r\n        \r\n        // For the pair token, we need to transfer it from sender to liquidity manager\r\n        IERC20 pairToken = IERC20(params.pairToken);\r\n        require(\r\n            pairToken.transferFrom(msg.sender, address(this), params.pairAmount),\r\n            \"Pair token transfer failed\"\r\n        );\r\n        \r\n        // Approve the liquidity manager to spend the pair token\r\n        pairToken.approve(liquidityManagerAddress, params.pairAmount);\r\n        \r\n        return liquidityManager.addLiquidity(\r\n            tokenAddress,              // token A (our newly created token)\r\n            params.pairToken,          // token B (the pair token)\r\n            params.tokenAmount,        // amount of token A\r\n            params.pairAmount,         // amount of token B \r\n            params.tokenAmountMin,     // min amount of token A (for slippage)\r\n            params.pairAmountMin,      // min amount of token B (for slippage)\r\n            params.lockDuration        // how long to lock liquidity\r\n        );\r\n    }\r\n}"
    },
    "contracts/core/TokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./TokenTemplate.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TokenFactory is Ownable {\r\n    address public feeCollector;\r\n    uint256 public creationFee;\r\n\r\n    mapping(address => address[]) public creatorTokens;\r\n    address[] public allTokens;\r\n\r\n    event TokenCreated(address indexed creator, address tokenAddress);\r\n    event FeeCollectorUpdated(\r\n        address indexed oldCollector,\r\n        address indexed newCollector\r\n    );\r\n    event CreationFeeUpdated(uint256 oldFee, uint256 newFee);\r\n\r\n    constructor(\r\n        address _feeCollector,\r\n        uint256 _creationFee\r\n    ) Ownable(msg.sender) {\r\n        // Use OZ Ownable's constructor implicitly\r\n        feeCollector = _feeCollector;\r\n        creationFee = _creationFee;\r\n    }\r\n\r\n    function createToken(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply,\r\n        address[] memory initialHolders,\r\n        uint256[] memory initialAmounts,\r\n        address liquidityManager,\r\n        address launchManager,\r\n        bool launchWithLiquidity\r\n    ) external payable returns (address) {\r\n        require(msg.value >= creationFee, \"Insufficient fee\");\r\n        require(\r\n            initialHolders.length == initialAmounts.length,\r\n            \"Holders and amounts mismatch\"\r\n        );\r\n\r\n        // Create new token contract\r\n        TokenTemplate token = new TokenTemplate(\r\n            name,\r\n            symbol,\r\n            totalSupply,\r\n            msg.sender,\r\n            initialHolders,\r\n            initialAmounts,\r\n            liquidityManager,\r\n            launchManager,\r\n            launchWithLiquidity\r\n        );\r\n\r\n        // Record token creation\r\n        creatorTokens[msg.sender].push(address(token));\r\n        allTokens.push(address(token));\r\n\r\n        // Pay fee to collector\r\n        (bool sent, ) = payable(feeCollector).call{value: creationFee}(\"\");\r\n        require(sent, \"Fee transfer failed\");\r\n\r\n        // Refund excess fee\r\n        if (msg.value > creationFee) {\r\n            (bool refundSent, ) = payable(msg.sender).call{\r\n                value: msg.value - creationFee\r\n            }(\"\");\r\n            require(refundSent, \"Refund failed\");\r\n        }\r\n\r\n        emit TokenCreated(msg.sender, address(token));\r\n        return address(token);\r\n    }\r\n\r\n    function getCreatorTokens(\r\n        address creator\r\n    ) external view returns (address[] memory) {\r\n        return creatorTokens[creator];\r\n    }\r\n\r\n    function getCreatorTokenCount(\r\n        address creator\r\n    ) external view returns (uint256) {\r\n        return creatorTokens[creator].length;\r\n    }\r\n\r\n    function getTotalTokenCount() external view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    function updateFeeCollector(address _newCollector) external onlyOwner {\r\n        require(_newCollector != address(0), \"Invalid collector address\");\r\n        address oldCollector = feeCollector;\r\n        feeCollector = _newCollector;\r\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\r\n    }\r\n\r\n    function updateCreationFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = creationFee;\r\n        creationFee = _newFee;\r\n        emit CreationFeeUpdated(oldFee, _newFee);\r\n    }\r\n}\r\n"
    },
    "contracts/core/TokenTemplate.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TokenTemplate is ERC20, Ownable {\r\n    bool public tradingEnabled;\r\n    uint256 public launchTime;\r\n    uint256 public launchBlock;\r\n\r\n    // Flag to track initial distribution status\r\n    bool private _initialDistributionComplete;\r\n\r\n    // Store total tokens to be distributed\r\n    uint256 public tokensToDistribute;\r\n\r\n    // Simple whitelist for liquidity manager\r\n    mapping(address => bool) public isWhitelisted;\r\n    event TradingEnabled(uint256 timestamp);\r\n    event InitialDistributionComplete();\r\n    event AddressWhitelisted(address indexed account, bool status);\r\n    event LiquidityApproved(address indexed liquidityManager, uint256 amount);\r\n    event LaunchManagerApproved(address indexed launchManager, uint256 amount);\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply,\r\n        address _initialOwner,\r\n        address[] memory initialHolders,\r\n        uint256[] memory initialAmounts,\r\n        address liquidityManager,\r\n        address launchManager,\r\n        bool launchWithLiquidity \r\n    ) ERC20(name, symbol) Ownable(_initialOwner) {\r\n        require(\r\n            initialHolders.length == initialAmounts.length,\r\n            \"Arrays length mismatch\"\r\n        );\r\n        require(\r\n            initialHolders.length <= 10,\r\n            \"Maximum 10 initial holders allowed\"\r\n        );\r\n\r\n        // Calculate tokens to be distributed\r\n        tokensToDistribute = 0;\r\n        for (uint i = 0; i < initialHolders.length; i++) {\r\n            if (initialHolders[i] != address(0) && initialAmounts[i] > 0) {\r\n                tokensToDistribute += initialAmounts[i];\r\n            }\r\n        }\r\n\r\n        // Make sure we don't exceed total supply\r\n        require(\r\n            tokensToDistribute <= totalSupply,\r\n            \"Distribution exceeds total supply\"\r\n        );\r\n\r\n        // Mint all tokens to the initial owner\r\n        _mint(_initialOwner, totalSupply);\r\n\r\n        // Whitelist the owner by default\r\n        isWhitelisted[owner()] = true;\r\n\r\n        // Pre-approve the launch manager to spend tokens for distribution\r\n        // Approval strategy based on the launch type\r\n        if (launchManager != address(0)) {\r\n            if (launchWithLiquidity) {\r\n                // For launches that include liquidity: approve all tokens\r\n                _approve(_initialOwner, launchManager, totalSupply);\r\n                emit LaunchManagerApproved(launchManager, totalSupply);\r\n            } else {\r\n                // For distribution-only launches: approve only tokens to distribute\r\n                _approve(_initialOwner, launchManager, tokensToDistribute);\r\n                emit LaunchManagerApproved(launchManager, tokensToDistribute);\r\n            }\r\n        }\r\n\r\n        // Approve liquidity manager for liquidity provision with remaining tokens\r\n        if (liquidityManager != address(0)) {\r\n            // Calculate remaining tokens for liquidity\r\n            uint256 remainingTokens = totalSupply - tokensToDistribute;\r\n\r\n            // Approve for liquidity provision with remaining tokens\r\n            _approve(_initialOwner, liquidityManager, remainingTokens);\r\n            emit LiquidityApproved(liquidityManager, remainingTokens);\r\n\r\n            // Whitelist the liquidity manager\r\n            isWhitelisted[liquidityManager] = true;\r\n            emit AddressWhitelisted(liquidityManager, true);\r\n        }\r\n\r\n        // Whitelist the launch manager if provided and not already whitelisted\r\n        if (launchManager != address(0) && launchManager != liquidityManager) {\r\n            isWhitelisted[launchManager] = true;\r\n            emit AddressWhitelisted(launchManager, true);\r\n        }\r\n    }\r\n\r\n    function completeInitialDistribution() external {\r\n        require(\r\n            msg.sender == owner() || isWhitelisted[msg.sender],\r\n            \"Not authorized\"\r\n        );\r\n        require(\r\n            !_initialDistributionComplete,\r\n            \"Initial distribution already completed\"\r\n        );\r\n        _initialDistributionComplete = true;\r\n        emit InitialDistributionComplete();\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled\");\r\n        tradingEnabled = true;\r\n        launchTime = block.timestamp;\r\n        launchBlock = block.number;\r\n        emit TradingEnabled(launchTime);\r\n    }\r\n\r\n    function whitelistAddress(address account, bool status) public onlyOwner {\r\n        isWhitelisted[account] = status;\r\n        emit AddressWhitelisted(account, status);\r\n    }\r\n\r\n    function approveLiquidityManager(\r\n        address liquidityManager,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(\r\n            liquidityManager != address(0),\r\n            \"Invalid liquidityManager address\"\r\n        );\r\n        _approve(msg.sender, liquidityManager, amount);\r\n        emit LiquidityApproved(liquidityManager, amount);\r\n    }\r\n\r\n    function approveLaunchManager(\r\n        address launchManager,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(launchManager != address(0), \"Invalid launchManager address\");\r\n        _approve(msg.sender, launchManager, amount);\r\n        emit LaunchManagerApproved(launchManager, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/extensions/LiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract LiquidityManager is Ownable {\r\n    // State variables\r\n    IUniswapV2Router02 public immutable router;\r\n    address public immutable weth;\r\n    \r\n    // Structs for organizing data\r\n    struct LockInfo {\r\n        address pair;\r\n        uint256 unlockTime;\r\n    }\r\n    \r\n    struct LiquidityParams {\r\n        address tokenA;\r\n        address tokenB;\r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        uint256 amountAMin;\r\n        uint256 amountBMin;\r\n        uint256 lockDuration;\r\n        bool isEthPair;\r\n        address recipient;\r\n    }\r\n    \r\n    struct TokenPair {\r\n        address token0;\r\n        address token1;\r\n        bool isToken0Weth;\r\n        bool isToken1Weth;\r\n    }\r\n    \r\n    // Mappings\r\n    mapping(address => LockInfo) public liquidityLocks;\r\n    \r\n    // Events\r\n    event LiquidityAdded(\r\n        address indexed tokenA, \r\n        address indexed tokenB, \r\n        address pair, \r\n        uint amountA, \r\n        uint amountB, \r\n        uint liquidity\r\n    );\r\n    event LiquidityLocked(address indexed pair, uint256 unlockTime);\r\n    event LiquidityUnlocked(address indexed pair, address recipient);\r\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pair);\r\n    event TokensApproved(address token, uint256 amount);\r\n    event TokensTransferred(address token, address from, address to, uint256 amount);\r\n    event RefundSent(address token, address recipient, uint256 amount);\r\n    \r\n    constructor(address _router) Ownable(msg.sender) {\r\n        router = IUniswapV2Router02(_router);\r\n        weth = router.WETH();\r\n    }\r\n    \r\n    // Main entry point for adding liquidity with two ERC20 tokens\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        uint256 lockDuration\r\n    ) external payable returns (uint amountTokenA, uint amountTokenB, uint liquidity) {\r\n        require(!(_isWETH(tokenA) && _isWETH(tokenB)), \"Cannot create WETH/WETH pair\");\r\n        // Create the params struct\r\n        LiquidityParams memory params = LiquidityParams({\r\n            tokenA: tokenA,\r\n            tokenB: tokenB,\r\n            amountA: amountA,\r\n            amountB: amountB,\r\n            amountAMin: amountAMin,\r\n            amountBMin: amountBMin,\r\n            lockDuration: lockDuration,\r\n            isEthPair: false,\r\n            recipient: lockDuration > 0 ? address(this) : msg.sender\r\n        });\r\n        \r\n        // Step 1: Transfer tokens from user to this contract\r\n        _transferTokensToContract(params);\r\n        \r\n        // Step 2: Approve router to spend tokens\r\n        _approveTokensForRouter(params);\r\n        \r\n        // Step 3: Add liquidity through router\r\n        (amountTokenA, amountTokenB, liquidity) = _addLiquidityViaRouter(params);\r\n        \r\n        // Step 4: Refund excess tokens\r\n        _refundExcessTokens(params, amountTokenA, amountTokenB);\r\n        \r\n        // Step 5: Handle locking if needed\r\n        _handleLiquidityLocking(params, tokenA, tokenB);\r\n        \r\n        return (amountTokenA, amountTokenB, liquidity);\r\n    }\r\n    \r\n    // Main entry point for adding liquidity with ETH and an ERC20 token\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountToken,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        uint256 lockDuration\r\n    ) external payable returns (uint amountTokenOut, uint amountETH, uint liquidity) {\r\n        require(!_isWETH(token), \"Use addLiquidity for WETH pairs\");\r\n        // Create the params struct\r\n        LiquidityParams memory params = LiquidityParams({\r\n            tokenA: token,\r\n            tokenB: weth,\r\n            amountA: amountToken,\r\n            amountB: msg.value,\r\n            amountAMin: amountTokenMin,\r\n            amountBMin: amountETHMin,\r\n            lockDuration: lockDuration,\r\n            isEthPair: true,\r\n            recipient: lockDuration > 0 ? address(this) : msg.sender\r\n        });\r\n        \r\n        // Step 1: Transfer token from user to this contract (ETH is already here)\r\n        _transferTokenToContract(token, amountToken);\r\n        \r\n        // Step 2: Approve router to spend token\r\n        _approveTokenForRouter(token, amountToken);\r\n        \r\n        // Step 3: Add liquidity through router\r\n        (amountTokenOut, amountETH, liquidity) = _addLiquidityETHViaRouter(params);\r\n        \r\n        // Step 4: Refund excess tokens and ETH\r\n        _refundExcessTokenAndETH(params, amountTokenOut, amountETH);\r\n        \r\n        // Step 5: Handle locking if needed\r\n        _handleLiquidityLocking(params, token, weth);\r\n        \r\n        return (amountTokenOut, amountETH, liquidity);\r\n    }\r\n\r\n    function _isWETH(address token) private view returns (bool) {\r\n        return token == weth;\r\n    }\r\n    \r\n    // Helper function 1: Transfer tokens from user to contract\r\n    function _transferTokensToContract(LiquidityParams memory params) private {\r\n        if (!_isWETH(params.tokenA)) {\r\n            _transferTokenToContract(params.tokenA, params.amountA);\r\n        }\r\n        \r\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\r\n            _transferTokenToContract(params.tokenB, params.amountB);\r\n        }\r\n    }\r\n    \r\n    // Helper function for transferring a single token\r\n    function _transferTokenToContract(address token, uint256 amount) private {\r\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        require(success, \"Transfer of token failed\");\r\n        emit TokensTransferred(token, msg.sender, address(this), amount);\r\n    }\r\n    \r\n    // Helper function 2: Approve router to spend tokens\r\n    function _approveTokensForRouter(LiquidityParams memory params) private {\r\n        if (!_isWETH(params.tokenA)) {\r\n            _approveTokenForRouter(params.tokenA, params.amountA);\r\n        }\r\n        \r\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\r\n            _approveTokenForRouter(params.tokenB, params.amountB);\r\n        }\r\n    }\r\n    \r\n    // Helper function for approving a single token\r\n    function _approveTokenForRouter(address token, uint256 amount) private {\r\n        IERC20(token).approve(address(router), amount);\r\n        emit TokensApproved(token, amount);\r\n    }\r\n    \r\n    // Helper function 3A: Add liquidity through router for token pairs\r\n    function _addLiquidityViaRouter(LiquidityParams memory params) \r\n        private \r\n        returns (uint amountA, uint amountB, uint liquidity) \r\n    {\r\n        return router.addLiquidity(\r\n            params.tokenA,\r\n            params.tokenB,\r\n            params.amountA,\r\n            params.amountB,\r\n            params.amountAMin,\r\n            params.amountBMin,\r\n            params.recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n    \r\n    // Helper function 3B: Add liquidity through router for ETH pairs\r\n    function _addLiquidityETHViaRouter(LiquidityParams memory params) \r\n        private \r\n        returns (uint amountToken, uint amountETH, uint liquidity) \r\n    {\r\n        return router.addLiquidityETH{value: params.amountB}(\r\n            params.tokenA,\r\n            params.amountA,\r\n            params.amountAMin,\r\n            params.amountBMin,\r\n            params.recipient,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n    \r\n    // Helper function 4A: Refund excess tokens\r\n    function _refundExcessTokens(\r\n        LiquidityParams memory params,\r\n        uint256 amountAUsed,\r\n        uint256 amountBUsed\r\n    ) private {\r\n        if (params.amountA > amountAUsed) {\r\n            uint256 refundAmount = params.amountA - amountAUsed;\r\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\r\n        }\r\n        \r\n        if (!params.isEthPair && params.amountB > amountBUsed) {\r\n            uint256 refundAmount = params.amountB - amountBUsed;\r\n            IERC20(params.tokenB).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenB, msg.sender, refundAmount);\r\n        }\r\n    }\r\n    \r\n    // Helper function 4B: Refund excess token and ETH\r\n    function _refundExcessTokenAndETH(\r\n        LiquidityParams memory params,\r\n        uint256 amountTokenUsed,\r\n        uint256 amountETHUsed\r\n    ) private {\r\n        if (params.amountA > amountTokenUsed) {\r\n            uint256 refundAmount = params.amountA - amountTokenUsed;\r\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\r\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\r\n        }\r\n        \r\n        if (params.amountB > amountETHUsed) {\r\n            uint256 refundAmount = params.amountB - amountETHUsed;\r\n            (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\r\n            require(success, \"ETH refund failed\");\r\n            emit RefundSent(address(0), msg.sender, refundAmount); // address(0) represents ETH\r\n        }\r\n    }\r\n    \r\n    // Helper function 5: Handle liquidity locking if needed\r\n    function _handleLiquidityLocking(\r\n        LiquidityParams memory params,\r\n        address tokenA,\r\n        address tokenB\r\n    ) private {\r\n        if (params.lockDuration > 0) {\r\n            // Get pair address\r\n            address pair = IUniswapV2Factory(router.factory()).getPair(tokenA, tokenB);\r\n            require(pair != address(0), \"Pair does not exist\");\r\n            \r\n            // Set up lock info\r\n            liquidityLocks[pair] = LockInfo({\r\n                pair: pair,\r\n                unlockTime: block.timestamp + params.lockDuration\r\n            });\r\n            \r\n            emit LiquidityLocked(pair, block.timestamp + params.lockDuration);\r\n        }\r\n    }\r\n    \r\n    // Function to unlock liquidity after the lock duration\r\n    function unlockLiquidity(address pair) external {\r\n        LockInfo storage lockInfo = liquidityLocks[pair];\r\n        require(lockInfo.pair == pair, \"Liquidity not locked\");\r\n        require(block.timestamp >= lockInfo.unlockTime, \"Liquidity still locked\");\r\n        require(msg.sender == owner(), \"Not authorized\");\r\n        \r\n        // Get liquidity amount\r\n        uint256 liquidity = IERC20(pair).balanceOf(address(this));\r\n        require(liquidity > 0, \"No liquidity to unlock\");\r\n        \r\n        // Transfer LP tokens back to sender\r\n        IERC20(pair).transfer(msg.sender, liquidity);\r\n        \r\n        // Clear lock info\r\n        delete liquidityLocks[pair];\r\n        \r\n        emit LiquidityUnlocked(pair, msg.sender);\r\n    }\r\n    \r\n    // Function to create a pair if it doesn't exist\r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\r\n        pair = factory.getPair(tokenA, tokenB);\r\n        \r\n        if (pair == address(0)) {\r\n            pair = factory.createPair(tokenA, tokenB);\r\n            emit PairCreated(tokenA, tokenB, pair);\r\n        }\r\n        \r\n        return pair;\r\n    }\r\n    \r\n    // Debug function to check token allowances\r\n    function checkAllowance(address token, address spender) external view returns (uint256) {\r\n        return IERC20(token).allowance(address(this), spender);\r\n    }\r\n    \r\n    // Debug function to check token balances\r\n    function checkBalance(address token, address account) external view returns (uint256) {\r\n        return IERC20(token).balanceOf(account);\r\n    }\r\n    \r\n    // Debug function to transfer tokens directly\r\n    function debugTransferToken(address token, address to, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n    \r\n    // Debug function to approve tokens directly\r\n    function debugApproveToken(address token, address spender, uint256 amount) external onlyOwner {\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n    \r\n    // Handle received ETH\r\n    receive() external payable {}\r\n}"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IToken {\r\n    function enableTrading() external;\r\n    function setAntiBotEnabled(bool enabled) external;\r\n    function setMaxTxAmount(uint256 amount) external;\r\n    function setMaxWalletAmount(uint256 amount) external;\r\n    function excludeFromLimits(address account, bool excluded) external;\r\n    function completeInitialDistribution() external;\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}