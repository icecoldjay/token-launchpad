{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/extensions/TokenSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../interfaces/IToken.sol\";\n\n/**\n * @title TokenSaleManager\n * @dev Manages token sales with features like whitelisting, vesting, and caps\n */\ncontract TokenSaleManager is Ownable, ReentrancyGuard {\n    address public feeCollector;\n    uint256 public saleFee;\n\n    // Track sale configurations\n    struct SaleConfig {\n        address token; // Token being sold\n        address paymentToken; // Token used to buy (address(0) for ETH)\n        uint256 rate; // Rate of token per payment token (or ETH) in base units\n        uint256 hardCap; // Maximum tokens to sell\n        uint256 softCap; // Minimum tokens to sell for sale to be successful\n        uint256 minContribution; // Minimum contribution per buyer\n        uint256 maxContribution; // Maximum contribution per buyer\n        uint256 startTime; // Sale start timestamp\n        uint256 endTime; // Sale end timestamp\n        bool whitelistEnabled; // Whether whitelist is enabled\n        bool vestingEnabled; // Whether vesting is enabled\n        uint256 vestingDuration; // Vesting duration in seconds\n        uint256 vestingStart; // When vesting starts after sale ends\n        bool isActive; // Whether the sale is active\n        bool isCancelled; // Whether the sale is cancelled\n        bool isFinalized; // Whether the sale is finalized\n        uint256 tokensSold; // Total tokens sold\n        uint256 ethRaised; // Total ETH raised (in wei)\n        uint256 tokenRaised; // Total token amount raised (in token's native units)\n        address creator; // Creator of the sale who controls finalization and whitelist\n    }\n\n    // Track participant contributions and vesting\n    struct Participation {\n        uint256 contribution; // How much they contributed\n        uint256 tokensOwed; // How many tokens they're owed\n        uint256 tokensClaimed; // How many tokens they've claimed\n        bool refunded; // Whether they've been refunded (if sale fails)\n    }\n\n    // All sales created\n    SaleConfig[] public sales;\n\n    // Mapping: saleId => participant address => participation\n    mapping(uint256 => mapping(address => Participation)) public participations;\n\n    // Mapping: saleId => participant address => whitelist status\n    mapping(uint256 => mapping(address => bool)) public whitelist;\n\n    // Events\n    event SaleCreated(\n        uint256 indexed saleId,\n        address indexed token,\n        address indexed creator,\n        uint256 hardCap,\n        uint256 startTime,\n        uint256 endTime\n    );\n    event WhitelistUpdated(\n        uint256 indexed saleId,\n        address indexed user,\n        bool status\n    );\n    event TokensPurchased(\n        uint256 indexed saleId,\n        address indexed buyer,\n        uint256 contribution,\n        uint256 tokensReceived\n    );\n    event TokensClaimed(\n        uint256 indexed saleId,\n        address indexed user,\n        uint256 amount\n    );\n    event SaleFinalized(\n        uint256 indexed saleId,\n        uint256 tokensSold,\n        uint256 amountRaised\n    );\n    event SaleCancelled(uint256 indexed saleId);\n    event ContributionRefunded(\n        uint256 indexed saleId,\n        address indexed user,\n        uint256 amount\n    );\n    event FeeCollectorUpdated(\n        address indexed oldCollector,\n        address indexed newCollector\n    );\n    event SaleFeeUpdated(uint256 oldFee, uint256 newFee);\n\n    constructor(address _feeCollector, uint256 _saleFee) Ownable(msg.sender) {\n        require(_feeCollector != address(0), \"Invalid fee collector\");\n        feeCollector = _feeCollector;\n        saleFee = _saleFee;\n    }\n\n    /**\n     * @dev Create a new token sale\n     */\n    function createSale(\n        address token,\n        address paymentToken,\n        uint256 rate,\n        uint256 hardCap,\n        uint256 softCap,\n        uint256 minContribution,\n        uint256 maxContribution,\n        uint256 startTime,\n        uint256 endTime,\n        bool whitelistEnabled,\n        bool vestingEnabled,\n        uint256 vestingDuration,\n        uint256 vestingStart\n    ) external payable nonReentrant returns (uint256) {\n        require(msg.value >= saleFee, \"Insufficient fee\");\n        require(token != address(0), \"Invalid token address\");\n        require(rate > 0, \"Invalid rate\");\n        require(hardCap > 0, \"Invalid hard cap\");\n        require(softCap > 0 && softCap <= hardCap, \"Invalid soft cap\");\n        require(minContribution > 0, \"Invalid min contribution\");\n        require(maxContribution >= minContribution, \"Invalid max contribution\");\n        require(\n            startTime > block.timestamp,\n            \"Start time must be in the future\"\n        );\n        require(endTime > startTime, \"End time must be after start time\");\n\n        if (vestingEnabled) {\n            require(vestingDuration > 0, \"Invalid vesting duration\");\n        }\n\n        // Transfer tokens from creator to this contract\n        IERC20 tokenContract = IERC20(token);\n        require(\n            tokenContract.transferFrom(msg.sender, address(this), hardCap),\n            \"Token transfer failed\"\n        );\n\n        // Create new sale\n        uint256 saleId = sales.length;\n        sales.push(\n            SaleConfig({\n                token: token,\n                paymentToken: paymentToken,\n                rate: rate,\n                hardCap: hardCap,\n                softCap: softCap,\n                minContribution: minContribution,\n                maxContribution: maxContribution,\n                startTime: startTime,\n                endTime: endTime,\n                whitelistEnabled: whitelistEnabled,\n                vestingEnabled: vestingEnabled,\n                vestingDuration: vestingDuration,\n                vestingStart: vestingStart,\n                isActive: true,\n                isCancelled: false,\n                isFinalized: false,\n                tokensSold: 0,\n                ethRaised: 0,\n                tokenRaised: 0,\n                creator: msg.sender\n            })\n        );\n\n        // Pay fee to collector\n        (bool sent, ) = payable(feeCollector).call{value: saleFee}(\"\");\n        require(sent, \"Fee transfer failed\");\n\n        // Refund excess fee\n        if (msg.value > saleFee) {\n            (bool refundSent, ) = payable(msg.sender).call{\n                value: msg.value - saleFee\n            }(\"\");\n            require(refundSent, \"Refund failed\");\n        }\n\n        emit SaleCreated(\n            saleId,\n            token,\n            msg.sender,\n            hardCap,\n            startTime,\n            endTime\n        );\n\n        return saleId;\n    }\n\n    /**\n     * @dev Whitelist users for a sale\n     */\n    function updateWhitelist(\n        uint256 saleId,\n        address[] calldata users,\n        bool status\n    ) external {\n        require(saleId < sales.length, \"Invalid sale ID\");\n        SaleConfig storage sale = sales[saleId];\n        require(!sale.isFinalized, \"Sale already finalized\");\n        require(\n            msg.sender == sale.creator || msg.sender == tx.origin,\n            \"Not authorized\"\n        );\n\n        for (uint256 i = 0; i < users.length; i++) {\n            whitelist[saleId][users[i]] = status;\n            emit WhitelistUpdated(saleId, users[i], status);\n        }\n    }\n\n    /**\n     * @dev Buy tokens with ETH\n     */\n    function buyWithETH(uint256 saleId) external payable nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n        require(sale.paymentToken == address(0), \"Not an ETH sale\");\n        require(block.timestamp >= sale.startTime, \"Sale not started\");\n        require(block.timestamp <= sale.endTime, \"Sale ended\");\n        require(msg.value >= sale.minContribution, \"Below min contribution\");\n        require(msg.value > 0, \"Zero contribution\");\n\n        if (sale.whitelistEnabled) {\n            require(whitelist[saleId][msg.sender], \"Not whitelisted\");\n        }\n\n        // Calculate tokens to receive\n        uint256 tokenAmount = (msg.value * sale.rate) / 1 ether;\n        require(\n            sale.tokensSold + tokenAmount <= sale.hardCap,\n            \"Exceeds hard cap\"\n        );\n\n        // Check maximum contribution limit\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        uint256 totalContribution = participation.contribution + msg.value;\n        require(\n            totalContribution <= sale.maxContribution,\n            \"Exceeds max contribution\"\n        );\n\n        // Update sale and participation state\n        sale.tokensSold += tokenAmount;\n        sale.ethRaised += msg.value;\n        participation.contribution += msg.value;\n        participation.tokensOwed += tokenAmount;\n\n        emit TokensPurchased(saleId, msg.sender, msg.value, tokenAmount);\n\n        // If vesting is not enabled, transfer tokens immediately\n        if (!sale.vestingEnabled) {\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\n            participation.tokensClaimed += tokenAmount;\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Buy tokens with ERC20 tokens\n     */\n    function buyWithToken(\n        uint256 saleId,\n        uint256 amount\n    ) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n        require(sale.paymentToken != address(0), \"Not a token sale\");\n        require(block.timestamp >= sale.startTime, \"Sale not started\");\n        require(block.timestamp <= sale.endTime, \"Sale ended\");\n        require(amount >= sale.minContribution, \"Below min contribution\");\n        require(amount > 0, \"Zero contribution\");\n\n        if (sale.whitelistEnabled) {\n            require(whitelist[saleId][msg.sender], \"Not whitelisted\");\n        }\n\n        // Calculate tokens to receive\n        uint256 tokenAmount = (amount * sale.rate) / 10 ** 18;\n        require(\n            sale.tokensSold + tokenAmount <= sale.hardCap,\n            \"Exceeds hard cap\"\n        );\n\n        // Check maximum contribution limit\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        uint256 totalContribution = participation.contribution + amount;\n        require(\n            totalContribution <= sale.maxContribution,\n            \"Exceeds max contribution\"\n        );\n\n        // Transfer payment tokens from user to contract\n        IERC20 paymentToken = IERC20(sale.paymentToken);\n        require(\n            paymentToken.transferFrom(msg.sender, address(this), amount),\n            \"Token transfer failed\"\n        );\n\n        // Update sale and participation state\n        sale.tokensSold += tokenAmount;\n        sale.tokenRaised += amount;\n        participation.contribution += amount;\n        participation.tokensOwed += tokenAmount;\n\n        emit TokensPurchased(saleId, msg.sender, amount, tokenAmount);\n\n        // If vesting is not enabled, transfer tokens immediately\n        if (!sale.vestingEnabled) {\n            IERC20(sale.token).transfer(msg.sender, tokenAmount);\n            participation.tokensClaimed += tokenAmount;\n            emit TokensClaimed(saleId, msg.sender, tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Claim vested tokens\n     */\n    function claimTokens(uint256 saleId) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isFinalized, \"Sale not finalized\");\n        require(!sale.isCancelled, \"Sale was cancelled\");\n\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        require(\n            participation.tokensOwed > participation.tokensClaimed,\n            \"No tokens to claim\"\n        );\n\n        uint256 claimableTokens;\n\n        if (sale.vestingEnabled) {\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\n\n            if (block.timestamp < sale.vestingStart) {\n                // Vesting hasn't started yet\n                return;\n            } else if (block.timestamp >= vestingEndTime) {\n                // Vesting completed - claim all remaining tokens\n                claimableTokens =\n                    participation.tokensOwed -\n                    participation.tokensClaimed;\n            } else {\n                // Vesting in progress - calculate proportional amount\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\n                uint256 totalClaimable = (participation.tokensOwed *\n                    vestingElapsed) / sale.vestingDuration;\n                claimableTokens = totalClaimable - participation.tokensClaimed;\n            }\n        } else {\n            // No vesting - claim all tokens\n            claimableTokens =\n                participation.tokensOwed -\n                participation.tokensClaimed;\n        }\n\n        require(claimableTokens > 0, \"No tokens claimable at this time\");\n\n        // Transfer tokens to participant\n        IERC20(sale.token).transfer(msg.sender, claimableTokens);\n        participation.tokensClaimed += claimableTokens;\n\n        emit TokensClaimed(saleId, msg.sender, claimableTokens);\n    }\n\n    /**\n     * @dev Get claimable tokens for a user\n     */\n    function getClaimableTokens(\n        uint256 saleId,\n        address user\n    ) external view returns (uint256) {\n        SaleConfig storage sale = sales[saleId];\n        if (!sale.isFinalized || sale.isCancelled) {\n            return 0;\n        }\n\n        Participation storage participation = participations[saleId][user];\n        if (participation.tokensOwed <= participation.tokensClaimed) {\n            return 0;\n        }\n\n        uint256 claimableTokens;\n\n        if (sale.vestingEnabled) {\n            uint256 vestingEndTime = sale.vestingStart + sale.vestingDuration;\n\n            if (block.timestamp < sale.vestingStart) {\n                // Vesting hasn't started yet\n                return 0;\n            } else if (block.timestamp >= vestingEndTime) {\n                // Vesting completed - all remaining tokens are claimable\n                claimableTokens =\n                    participation.tokensOwed -\n                    participation.tokensClaimed;\n            } else {\n                // Vesting in progress - calculate proportional amount\n                uint256 vestingElapsed = block.timestamp - sale.vestingStart;\n                uint256 totalClaimable = (participation.tokensOwed *\n                    vestingElapsed) / sale.vestingDuration;\n                claimableTokens = totalClaimable - participation.tokensClaimed;\n            }\n        } else {\n            // No vesting - all tokens are claimable\n            claimableTokens =\n                participation.tokensOwed -\n                participation.tokensClaimed;\n        }\n\n        return claimableTokens;\n    }\n\n    /**\n     * @dev Finalize a sale\n     */\n    function finalizeSale(uint256 saleId) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n        require(\n            block.timestamp > sale.endTime || sale.tokensSold >= sale.hardCap,\n            \"Sale still in progress\"\n        );\n        require(\n            msg.sender == sale.creator || msg.sender == tx.origin,\n            \"Not authorized\"\n        );\n\n        bool isSuccessful = (sale.paymentToken == address(0) ? sale.ethRaised : sale.tokenRaised) >= sale.softCap;\n\n        if (isSuccessful) {\n            // Mark sale as finalized and set vesting start time if enabled\n            sale.isFinalized = true;\n            if (sale.vestingEnabled) {\n                sale.vestingStart = block.timestamp;\n            }\n\n            // Transfer raised funds to creator\n            if (sale.paymentToken == address(0)) {\n                // ETH sale\n                (bool sent, ) = payable(sale.creator).call{value: sale.ethRaised}(\n                    \"\"\n                );\n                require(sent, \"ETH transfer failed\");\n            } else {\n                // Token sale\n                IERC20(sale.paymentToken).transfer(sale.creator, sale.tokenRaised);\n            }\n\n            // Return unsold tokens to creator\n            uint256 unsoldTokens = sale.hardCap - sale.tokensSold;\n            if (unsoldTokens > 0) {\n                IERC20(sale.token).transfer(sale.creator, unsoldTokens);\n            }\n        } else {\n            // Sale failed - mark as cancelled\n            sale.isCancelled = true;\n\n            // Return all tokens to creator\n            IERC20(sale.token).transfer(sale.creator, sale.hardCap);\n        }\n\n        sale.isActive = false;\n\n        if (isSuccessful) {\n            uint256 totalRaised = sale.paymentToken == address(0) ? sale.ethRaised : sale.tokenRaised;\n            emit SaleFinalized(saleId, sale.tokensSold, totalRaised);\n        } else {\n            emit SaleCancelled(saleId);\n        }\n    }\n\n    /**\n     * @dev Manual cancel sale (only owner)\n     */\n    function cancelSale(uint256 saleId) external onlyOwner {\n        SaleConfig storage sale = sales[saleId];\n        require(sale.isActive && !sale.isCancelled, \"Sale not active\");\n\n        // Mark sale as cancelled\n        sale.isActive = false;\n        sale.isCancelled = true;\n\n        // Return all tokens to creator\n        IERC20(sale.token).transfer(sale.creator, sale.hardCap - sale.tokensSold);\n\n        emit SaleCancelled(saleId);\n    }\n\n    /**\n     * @dev Claim refund if sale was unsuccessful\n     */\n    function claimRefund(uint256 saleId) external nonReentrant {\n        SaleConfig storage sale = sales[saleId];\n        require(!sale.isActive, \"Sale still active\");\n        require(sale.isCancelled, \"Sale not cancelled\");\n\n        Participation storage participation = participations[saleId][\n            msg.sender\n        ];\n        require(participation.contribution > 0, \"No contribution found\");\n        require(!participation.refunded, \"Already refunded\");\n\n        uint256 refundAmount = participation.contribution;\n        participation.refunded = true;\n\n        if (sale.paymentToken == address(0)) {\n            // Refund ETH\n            (bool sent, ) = payable(msg.sender).call{value: refundAmount}(\"\");\n            require(sent, \"ETH refund failed\");\n        } else {\n            // Refund tokens\n            IERC20(sale.paymentToken).transfer(msg.sender, refundAmount);\n        }\n\n        emit ContributionRefunded(saleId, msg.sender, refundAmount);\n    }\n\n    /**\n     * @dev Get sale information by ID\n     */\n    function getSaleInfo(\n        uint256 saleId\n    ) external view returns (SaleConfig memory) {\n        require(saleId < sales.length, \"Invalid sale ID\");\n        return sales[saleId];\n    }\n\n    /**\n     * @dev Get the total number of sales\n     */\n    function getSaleCount() external view returns (uint256) {\n        return sales.length;\n    }\n\n    /**\n     * @dev Get participant information\n     */\n    function getParticipation(\n        uint256 saleId,\n        address user\n    ) external view returns (Participation memory) {\n        return participations[saleId][user];\n    }\n\n    /**\n     * @dev Check if a user is whitelisted for a sale\n     */\n    function isWhitelisted(\n        uint256 saleId,\n        address user\n    ) external view returns (bool) {\n        return whitelist[saleId][user];\n    }\n\n    /**\n     * @dev Update fee collector address\n     */\n    function updateFeeCollector(address _newCollector) external onlyOwner {\n        require(_newCollector != address(0), \"Invalid collector address\");\n        address oldCollector = feeCollector;\n        feeCollector = _newCollector;\n        emit FeeCollectorUpdated(oldCollector, _newCollector);\n    }\n\n    /**\n     * @dev Update sale fee\n     */\n    function updateSaleFee(uint256 _newFee) external onlyOwner {\n        uint256 oldFee = saleFee;\n        saleFee = _newFee;\n        emit SaleFeeUpdated(oldFee, _newFee);\n    }\n\n    /**\n     * @dev Emergency function to rescue ERC20 tokens sent to this contract by mistake\n     */\n    function rescueTokens(\n        address tokenAddress,\n        address recipient,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(tokenAddress).transfer(recipient, amount);\n    }\n\n\n\n    /**\n     * @dev Emergency function to rescue ETH sent to this contract by mistake\n     */\n    function rescueETH(\n        address payable recipient,\n        uint256 amount\n    ) external onlyOwner {\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n    }\n\n    /**\n     * @dev Handle received ETH\n     */\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IToken {\n    function enableTrading() external;\n    function setAntiBotEnabled(bool enabled) external;\n    function setMaxTxAmount(uint256 amount) external;\n    function setMaxWalletAmount(uint256 amount) external;\n    function excludeFromLimits(address account, bool excluded) external;\n    function completeInitialDistribution() external;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}