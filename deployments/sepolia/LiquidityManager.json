{
  "address": "0xebc9642aD5A355D3D4183243A870F71d4fA9564E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "LiquidityLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LiquidityUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RefundSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountTokenOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "checkAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "debugApproveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "debugTransferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityLocks",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "unlockLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x058ffed01f59eb21bb74f5887e40631d4c6ad7637e53d91a789dc0e1ddda67dc",
  "receipt": {
    "to": null,
    "from": "0xae6009Dd36eBBE2d36DBEBA64004e31517Cc48BB",
    "contractAddress": "0xebc9642aD5A355D3D4183243A870F71d4fA9564E",
    "transactionIndex": 66,
    "gasUsed": "1341489",
    "logsBloom": "0x
    "blockHash": "0x3506f306d370be94ac1659015cdf2d1c3eb4c227fba304334fc0a0e136dbd29b",
    "transactionHash": "0x058ffed01f59eb21bb74f5887e40631d4c6ad7637e53d91a789dc0e1ddda67dc",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 8121742,
        "transactionHash": "0x058ffed01f59eb21bb74f5887e40631d4c6ad7637e53d91a789dc0e1ddda67dc",
        "address": "0xebc9642aD5A355D3D4183243A870F71d4fA9564E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae6009dd36ebbe2d36dbeba64004e31517cc48bb"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x3506f306d370be94ac1659015cdf2d1c3eb4c227fba304334fc0a0e136dbd29b"
      }
    ],
    "blockNumber": 8121742,
    "cumulativeGasUsed": "7005538",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeE567Fe1712Faf6149d80dA1E6934E354124CfE3"
  ],
  "numDeployments": 18,
  "solcInputHash": "de39a025b7c413f4f3b4f509a791adcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"checkAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"debugApproveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"debugTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"unlockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/LiquidityManager.sol\":\"LiquidityManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/extensions/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    \\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    \\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract LiquidityManager is Ownable {\\r\\n    // State variables\\r\\n    IUniswapV2Router02 public immutable router;\\r\\n    address public immutable weth;\\r\\n    \\r\\n    // Structs for organizing data\\r\\n    struct LockInfo {\\r\\n        address pair;\\r\\n        uint256 unlockTime;\\r\\n    }\\r\\n    \\r\\n    struct LiquidityParams {\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        uint256 amountAMin;\\r\\n        uint256 amountBMin;\\r\\n        uint256 lockDuration;\\r\\n        bool isEthPair;\\r\\n        address recipient;\\r\\n    }\\r\\n    \\r\\n    struct TokenPair {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        bool isToken0Weth;\\r\\n        bool isToken1Weth;\\r\\n    }\\r\\n    \\r\\n    // Mappings\\r\\n    mapping(address => LockInfo) public liquidityLocks;\\r\\n    \\r\\n    // Events\\r\\n    event LiquidityAdded(\\r\\n        address indexed tokenA, \\r\\n        address indexed tokenB, \\r\\n        address pair, \\r\\n        uint amountA, \\r\\n        uint amountB, \\r\\n        uint liquidity\\r\\n    );\\r\\n    event LiquidityLocked(address indexed pair, uint256 unlockTime);\\r\\n    event LiquidityUnlocked(address indexed pair, address recipient);\\r\\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pair);\\r\\n    event TokensApproved(address token, uint256 amount);\\r\\n    event TokensTransferred(address token, address from, address to, uint256 amount);\\r\\n    event RefundSent(address token, address recipient, uint256 amount);\\r\\n    \\r\\n    constructor(address _router) Ownable(msg.sender) {\\r\\n        router = IUniswapV2Router02(_router);\\r\\n        weth = router.WETH();\\r\\n    }\\r\\n    \\r\\n    // Main entry point for adding liquidity with two ERC20 tokens\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 lockDuration\\r\\n    ) external payable returns (uint amountTokenA, uint amountTokenB, uint liquidity) {\\r\\n        require(!(_isWETH(tokenA) && _isWETH(tokenB)), \\\"Cannot create WETH/WETH pair\\\");\\r\\n        // Create the params struct\\r\\n        LiquidityParams memory params = LiquidityParams({\\r\\n            tokenA: tokenA,\\r\\n            tokenB: tokenB,\\r\\n            amountA: amountA,\\r\\n            amountB: amountB,\\r\\n            amountAMin: amountAMin,\\r\\n            amountBMin: amountBMin,\\r\\n            lockDuration: lockDuration,\\r\\n            isEthPair: false,\\r\\n            recipient: lockDuration > 0 ? address(this) : msg.sender\\r\\n        });\\r\\n        \\r\\n        // Step 1: Transfer tokens from user to this contract\\r\\n        _transferTokensToContract(params);\\r\\n        \\r\\n        // Step 2: Approve router to spend tokens\\r\\n        _approveTokensForRouter(params);\\r\\n        \\r\\n        // Step 3: Add liquidity through router\\r\\n        (amountTokenA, amountTokenB, liquidity) = _addLiquidityViaRouter(params);\\r\\n        \\r\\n        // Step 4: Refund excess tokens\\r\\n        _refundExcessTokens(params, amountTokenA, amountTokenB);\\r\\n        \\r\\n        // Step 5: Handle locking if needed\\r\\n        _handleLiquidityLocking(params, tokenA, tokenB);\\r\\n        \\r\\n        return (amountTokenA, amountTokenB, liquidity);\\r\\n    }\\r\\n    \\r\\n    // Main entry point for adding liquidity with ETH and an ERC20 token\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountToken,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        uint256 lockDuration\\r\\n    ) external payable returns (uint amountTokenOut, uint amountETH, uint liquidity) {\\r\\n        require(!_isWETH(token), \\\"Use addLiquidity for WETH pairs\\\");\\r\\n        // Create the params struct\\r\\n        LiquidityParams memory params = LiquidityParams({\\r\\n            tokenA: token,\\r\\n            tokenB: weth,\\r\\n            amountA: amountToken,\\r\\n            amountB: msg.value,\\r\\n            amountAMin: amountTokenMin,\\r\\n            amountBMin: amountETHMin,\\r\\n            lockDuration: lockDuration,\\r\\n            isEthPair: true,\\r\\n            recipient: lockDuration > 0 ? address(this) : msg.sender\\r\\n        });\\r\\n        \\r\\n        // Step 1: Transfer token from user to this contract (ETH is already here)\\r\\n        _transferTokenToContract(token, amountToken);\\r\\n        \\r\\n        // Step 2: Approve router to spend token\\r\\n        _approveTokenForRouter(token, amountToken);\\r\\n        \\r\\n        // Step 3: Add liquidity through router\\r\\n        (amountTokenOut, amountETH, liquidity) = _addLiquidityETHViaRouter(params);\\r\\n        \\r\\n        // Step 4: Refund excess tokens and ETH\\r\\n        _refundExcessTokenAndETH(params, amountTokenOut, amountETH);\\r\\n        \\r\\n        // Step 5: Handle locking if needed\\r\\n        _handleLiquidityLocking(params, token, weth);\\r\\n        \\r\\n        return (amountTokenOut, amountETH, liquidity);\\r\\n    }\\r\\n\\r\\n    function _isWETH(address token) private view returns (bool) {\\r\\n        return token == weth;\\r\\n    }\\r\\n    \\r\\n    // Helper function 1: Transfer tokens from user to contract\\r\\n    function _transferTokensToContract(LiquidityParams memory params) private {\\r\\n        if (!_isWETH(params.tokenA)) {\\r\\n            _transferTokenToContract(params.tokenA, params.amountA);\\r\\n        }\\r\\n        \\r\\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\\r\\n            _transferTokenToContract(params.tokenB, params.amountB);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Helper function for transferring a single token\\r\\n    function _transferTokenToContract(address token, uint256 amount) private {\\r\\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\\r\\n        require(success, \\\"Transfer of token failed\\\");\\r\\n        emit TokensTransferred(token, msg.sender, address(this), amount);\\r\\n    }\\r\\n    \\r\\n    // Helper function 2: Approve router to spend tokens\\r\\n    function _approveTokensForRouter(LiquidityParams memory params) private {\\r\\n        if (!_isWETH(params.tokenA)) {\\r\\n            _approveTokenForRouter(params.tokenA, params.amountA);\\r\\n        }\\r\\n        \\r\\n        if (!params.isEthPair && !_isWETH(params.tokenB)) {\\r\\n            _approveTokenForRouter(params.tokenB, params.amountB);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Helper function for approving a single token\\r\\n    function _approveTokenForRouter(address token, uint256 amount) private {\\r\\n        IERC20(token).approve(address(router), amount);\\r\\n        emit TokensApproved(token, amount);\\r\\n    }\\r\\n    \\r\\n    // Helper function 3A: Add liquidity through router for token pairs\\r\\n    function _addLiquidityViaRouter(LiquidityParams memory params) \\r\\n        private \\r\\n        returns (uint amountA, uint amountB, uint liquidity) \\r\\n    {\\r\\n        return router.addLiquidity(\\r\\n            params.tokenA,\\r\\n            params.tokenB,\\r\\n            params.amountA,\\r\\n            params.amountB,\\r\\n            params.amountAMin,\\r\\n            params.amountBMin,\\r\\n            params.recipient,\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    // Helper function 3B: Add liquidity through router for ETH pairs\\r\\n    function _addLiquidityETHViaRouter(LiquidityParams memory params) \\r\\n        private \\r\\n        returns (uint amountToken, uint amountETH, uint liquidity) \\r\\n    {\\r\\n        return router.addLiquidityETH{value: params.amountB}(\\r\\n            params.tokenA,\\r\\n            params.amountA,\\r\\n            params.amountAMin,\\r\\n            params.amountBMin,\\r\\n            params.recipient,\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    // Helper function 4A: Refund excess tokens\\r\\n    function _refundExcessTokens(\\r\\n        LiquidityParams memory params,\\r\\n        uint256 amountAUsed,\\r\\n        uint256 amountBUsed\\r\\n    ) private {\\r\\n        if (params.amountA > amountAUsed) {\\r\\n            uint256 refundAmount = params.amountA - amountAUsed;\\r\\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\\r\\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\\r\\n        }\\r\\n        \\r\\n        if (!params.isEthPair && params.amountB > amountBUsed) {\\r\\n            uint256 refundAmount = params.amountB - amountBUsed;\\r\\n            IERC20(params.tokenB).transfer(msg.sender, refundAmount);\\r\\n            emit RefundSent(params.tokenB, msg.sender, refundAmount);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Helper function 4B: Refund excess token and ETH\\r\\n    function _refundExcessTokenAndETH(\\r\\n        LiquidityParams memory params,\\r\\n        uint256 amountTokenUsed,\\r\\n        uint256 amountETHUsed\\r\\n    ) private {\\r\\n        if (params.amountA > amountTokenUsed) {\\r\\n            uint256 refundAmount = params.amountA - amountTokenUsed;\\r\\n            IERC20(params.tokenA).transfer(msg.sender, refundAmount);\\r\\n            emit RefundSent(params.tokenA, msg.sender, refundAmount);\\r\\n        }\\r\\n        \\r\\n        if (params.amountB > amountETHUsed) {\\r\\n            uint256 refundAmount = params.amountB - amountETHUsed;\\r\\n            (bool success, ) = msg.sender.call{value: refundAmount}(\\\"\\\");\\r\\n            require(success, \\\"ETH refund failed\\\");\\r\\n            emit RefundSent(address(0), msg.sender, refundAmount); // address(0) represents ETH\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Helper function 5: Handle liquidity locking if needed\\r\\n    function _handleLiquidityLocking(\\r\\n        LiquidityParams memory params,\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) private {\\r\\n        if (params.lockDuration > 0) {\\r\\n            // Get pair address\\r\\n            address pair = IUniswapV2Factory(router.factory()).getPair(tokenA, tokenB);\\r\\n            require(pair != address(0), \\\"Pair does not exist\\\");\\r\\n            \\r\\n            // Set up lock info\\r\\n            liquidityLocks[pair] = LockInfo({\\r\\n                pair: pair,\\r\\n                unlockTime: block.timestamp + params.lockDuration\\r\\n            });\\r\\n            \\r\\n            emit LiquidityLocked(pair, block.timestamp + params.lockDuration);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // Function to unlock liquidity after the lock duration\\r\\n    function unlockLiquidity(address pair) external {\\r\\n        LockInfo storage lockInfo = liquidityLocks[pair];\\r\\n        require(lockInfo.pair == pair, \\\"Liquidity not locked\\\");\\r\\n        require(block.timestamp >= lockInfo.unlockTime, \\\"Liquidity still locked\\\");\\r\\n        require(msg.sender == owner(), \\\"Not authorized\\\");\\r\\n        \\r\\n        // Get liquidity amount\\r\\n        uint256 liquidity = IERC20(pair).balanceOf(address(this));\\r\\n        require(liquidity > 0, \\\"No liquidity to unlock\\\");\\r\\n        \\r\\n        // Transfer LP tokens back to sender\\r\\n        IERC20(pair).transfer(msg.sender, liquidity);\\r\\n        \\r\\n        // Clear lock info\\r\\n        delete liquidityLocks[pair];\\r\\n        \\r\\n        emit LiquidityUnlocked(pair, msg.sender);\\r\\n    }\\r\\n    \\r\\n    // Function to create a pair if it doesn't exist\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\r\\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\\r\\n        pair = factory.getPair(tokenA, tokenB);\\r\\n        \\r\\n        if (pair == address(0)) {\\r\\n            pair = factory.createPair(tokenA, tokenB);\\r\\n            emit PairCreated(tokenA, tokenB, pair);\\r\\n        }\\r\\n        \\r\\n        return pair;\\r\\n    }\\r\\n    \\r\\n    // Debug function to check token allowances\\r\\n    function checkAllowance(address token, address spender) external view returns (uint256) {\\r\\n        return IERC20(token).allowance(address(this), spender);\\r\\n    }\\r\\n    \\r\\n    // Debug function to check token balances\\r\\n    function checkBalance(address token, address account) external view returns (uint256) {\\r\\n        return IERC20(token).balanceOf(account);\\r\\n    }\\r\\n    \\r\\n    // Debug function to transfer tokens directly\\r\\n    function debugTransferToken(address token, address to, uint256 amount) external onlyOwner {\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n    \\r\\n    // Debug function to approve tokens directly\\r\\n    function debugApproveToken(address token, address spender, uint256 amount) external onlyOwner {\\r\\n        IERC20(token).approve(spender, amount);\\r\\n    }\\r\\n    \\r\\n    // Handle received ETH\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x6248de2d21cd40e2c4641d7ba047ddde900c25e2cf21270bc8a542a8623aed84\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c080604052346200017e576200003090620018a2803803809162000025828562000183565b8339810190620001bd565b3315620001655760008054336001600160a01b03198216811783556040519293602092849260049284926001600160a01b03929083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a31660808190526315ab88c960e31b82525afa91821562000159579162000124575b5060a0526040516116c39081620001df823960805181818160d0015281816102340152818161080f01528181610c030152818161138d01526114c2015260a0518181816101260152818161029501528181610a8601528181610b3f01528181610e3701528181610ea701528181610f4e015261111e0152f35b6200014a915060203d811162000151575b62000141818362000183565b810190620001bd565b38620000ab565b503d62000135565b604051903d90823e3d90fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620001a757604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126200017e57516001600160a01b03811681036200017e579056fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80633edf9a381461114d5780633fc8cef31461110857806346f2335e146110835780636cf5bb6314611032578063715018a614610fd957806377b76ec314610f765780637ae06e5814610a5c5780638b099b23146109ac5780638da5cb5b14610983578063c9c65396146107cd578063d58c66ab146105a1578063f2fde38b14610513578063f6f1e306146101045763f887ea400361000e57346100ff5760003660031901126100ff576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b60a03660031901126100ff576101186111a2565b608435906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116919081166024358184146104ce5784156104c75730905b6040519261016b8461122f565b8352602094858401528060408401523460608401526101c36080840191604435835260a0850197606435895260c0860152600160e086015261010085019360018060a01b031684526101bd8187611286565b85611376565b6060830151835160408501519251975193516001600160a01b0390811694929116904261012c8101106104b15760609460c4936040519a8b96879563f305d71960e01b87526004870152602486015260448501526064840152608483015261012c420160a483015260018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af191821561046b57600093600095600094610477575b506040830151858082116103b9575b50508560608401518181116102dc575b50856102d8866102bb7f0000000000000000000000000000000000000000000000000000000000000000878961148d565b604051938493846040919493926060820195825260208201520152565b0390f35b906102e691611461565b600080808084335af13d156103b4573d67ffffffffffffffff811161039e576040519061031c601f8201601f191686018361124c565b81526000843d92013e5b15610365579160008051602061166e83398151915260606102d89695936102bb95604051916000835233908301526040820152a191509192858761028a565b60405162461bcd60e51b8152600481018390526011602482015270115512081c99599d5b990819985a5b1959607a1b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b610326565b6103c291611461565b835160405163a9059cbb60e01b81523360048201526024810183905291908390839060449082906000906001600160a01b03165af191821561046b5760008051602061166e8339815191529261043e575b508451604080516001600160a01b039092168252336020830152810191909152606090a1868561027a565b61045d90843d8611610464575b610455818361124c565b81019061126e565b5088610413565b503d61044b565b6040513d6000823e3d90fd5b919450925061049e91945060603d81116104aa575b610496818361124c565b810190611446565b9491939094928661026b565b503d61048c565b634e487b7160e01b600052601160045260246000fd5b339061015e565b60405162461bcd60e51b815260206004820152601f60248201527f557365206164644c697175696469747920666f722057455448207061697273006044820152606490fd5b346100ff5760203660031901126100ff5761052c6111a2565b610534611203565b6001600160a01b0390811690811561058857600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346100ff576020806003193601126100ff576001600160a01b0390816105c56111a2565b169182600052600182526040600020838282541603610791576001015442106107535760005416330361071e576040516370a0823160e01b81523060048201528181602481865afa90811561046b576000916106f1575b5080156106b35760405163a9059cbb60e01b815233600482015260248101919091529080826044816000875af191821561046b577ffe96c81c48e39035c6e8009a9b1089e8c7a168b29219e979a16351116d080b7b92610696575b50826000526001815260006001604082208281550155604051338152a2005b6106ac90823d841161046457610455818361124c565b5083610677565b60405162461bcd60e51b81526004810183905260166024820152754e6f206c697175696469747920746f20756e6c6f636b60501b6044820152606490fd5b90508181813d8311610717575b610708818361124c565b810103126100ff57518361061c565b503d6106fe565b6064906040519062461bcd60e51b82526004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152fd5b60405162461bcd60e51b8152600481018390526016602482015275131a5c5d5a591a5d1e481cdd1a5b1b081b1bd8dad95960521b6044820152606490fd5b60405162461bcd60e51b8152600481018490526014602482015273131a5c5d5a591a5d1e481b9bdd081b1bd8dad95960621b6044820152606490fd5b346100ff5760403660031901126100ff576107e66111a2565b6107ee6111b8565b60405163c45a015560e01b8152602092916001600160a01b039184816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561046b578391600091610966575b5060405163e6a4390560e01b81526001600160a01b038681166004830152841660248201529491168585604481845afa94851561046b57600095610947575b5083851615610897575b50505060405191168152f35b6040516364e329cb60e11b81526001600160a01b038381166004830152841660248201529294509091908590829060449082906000905af190811561046b5760009161091a575b507fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c948584808497816040519616865216941692a383808061088b565b61093a9150853d8711610940575b610932818361124c565b81019061146e565b856108de565b503d610928565b61095f919550863d881161094057610932818361124c565b9386610881565b61097d9150863d881161094057610932818361124c565b86610842565b346100ff5760003660031901126100ff576000546040516001600160a01b039091168152602090f35b346100ff5760403660031901126100ff57610a0460206109ca6111a2565b6109d26111b8565b604051636eb1769f60e11b81523060048201526001600160a01b03909116602482015292839190829081906044820190565b03916001600160a01b03165afa801561046b57600090610a2a575b602090604051908152f35b506020813d8211610a54575b81610a436020938361124c565b810103126100ff5760209051610a1f565b3d9150610a36565b60e03660031901126100ff57610a706111a2565b610a786111b8565b906001600160a01b038082167f000000000000000000000000000000000000000000000000000000000000000090911614908180610f40575b610efb5760c43515610ef45730915b60405192610acd8461122f565b6001600160a01b038381168552858116602086015260443560408601526064356060860152608435608086015260a43560a086015260c43560c0860152600060e08601521661010084015215610eda575b60e08201511580610e9f575b610e7e575b81516001600160a01b03908116907f0000000000000000000000000000000000000000000000000000000000000000168103610e6a575b5060e08201511580610e2f575b610e0e575b8151602083015160408401516060850151608086015160a08701516101008801516001600160a01b03968716999690811695919492939291164261012c8101106104b15760405162e8e33760e81b8152600481019a909a5260248a015260448901526064880152608487015260a486015260c48501524261012c0160e48501526060846101048160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561046b57600093600095600093610de5575b50604081015185808211610d40575b505060e08101511580610d33575b610c72575b906102d8936102bb9261148d565b90610c81866060840151611461565b60208381015160405163a9059cbb60e01b815233600482015260248101849052929692949190859060449082906000906001600160a01b03165af1801561046b576102d8966102bb9560008051602061166e83398151915292610d14575b50602083810151604080516001600160a01b039092168252339282019290925290810191909152606090a19192509350610c64565b610d2c9060203d60201161046457610455818361124c565b508a610cdf565b5085606082015111610c5f565b610d4991611461565b815160405163a9059cbb60e01b8152336004820152602481018390529190602090839060449082906000906001600160a01b03165af191821561046b5760008051602061166e83398151915292610dc6575b508251604080516001600160a01b039092168252336020830152810191909152606090a18685610c51565b610dde9060203d60201161046457610455818361124c565b5088610d9b565b9194509450610e02915060603d81116104aa57610496818361124c565b94919390949186610c42565b60208201516060830151610e2a916001600160a01b0316611376565b610b78565b5060208201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161415610b73565b6040830151610e7891611376565b83610b66565b60208201516060830151610e9a916001600160a01b0316611286565b610b2f565b5060208201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161415610b2a565b610eef6044356001600160a01b038316611286565b610b1e565b3391610ac0565b60405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742063726561746520574554482f574554482070616972000000006044820152606490fd5b506001600160a01b038381167f000000000000000000000000000000000000000000000000000000000000000090911614610ab1565b346100ff5760403660031901126100ff57610f8f6111a2565b6020610f996111b8565b6040516370a0823160e01b81526001600160a01b0391821660048201529283916024918391165afa801561046b57600090610a2a57602090604051908152f35b346100ff5760003660031901126100ff57610ff2611203565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100ff5760203660031901126100ff576001600160a01b03806110546111a2565b1660009081526001602081815260409283902080549201548351949092166001600160a01b0316845283015290f35b346100ff576110d86020611096366111ce565b91906110a0611203565b60405163095ea7b360e01b81526001600160a01b03909116600482015260248101929092529092839190829060009082906044820190565b03926001600160a01b03165af1801561046b576110f157005b6100199060203d811161046457610455818361124c565b346100ff5760003660031901126100ff576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100ff576110d86020611160366111ce565b919061116a611203565b60405163a9059cbb60e01b81526001600160a01b03909116600482015260248101929092529092839190829060009082906044820190565b600435906001600160a01b03821682036100ff57565b602435906001600160a01b03821682036100ff57565b60609060031901126100ff576001600160a01b039060043582811681036100ff579160243590811681036100ff579060443590565b6000546001600160a01b0316330361121757565b60405163118cdaa760e01b8152336004820152602490fd5b610120810190811067ffffffffffffffff82111761039e57604052565b90601f8019910116810190811067ffffffffffffffff82111761039e57604052565b908160209103126100ff575180151581036100ff5790565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b039190911691906020816064816000875af190811561046b57600091611358575b5015611313577f70c5f97fd0068e96984b8116fe83eefbff3b91244565bf311a3cba619b4ecbc7916080916040519182523360208301523060408301526060820152a1565b60405162461bcd60e51b815260206004820152601860248201527f5472616e73666572206f6620746f6b656e206661696c656400000000000000006044820152606490fd5b611370915060203d811161046457610455818361124c565b386112ce565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052909291906020908490604490829060009086165af192831561046b577ff4bf184b11bd224495c79981900c289537c9a3a3f5f4063cb3ac18d146a7076a9361141b575b50604080516001600160a01b039290921682526020820192909252a1565b6114329060203d811161046457610455818361124c565b50386113fd565b919082018092116104b157565b908160609103126100ff578051916040602083015192015190565b919082039182116104b157565b908160209103126100ff57516001600160a01b03811681036100ff5790565b60c00180519192909161149f57505050565b6040805163c45a015560e01b81526001600160a01b0394602093919084826004817f00000000000000000000000000000000000000000000000000000000000000008b165afa918215611662579161153293918693600092611643575b50855163e6a4390560e01b81526001600160a01b0391821660048201529216602483015290928391908290899082906044820190565b0392165afa9081156116385790859160009161161b575b50169384156115e15761155d845142611439565b93825183810181811067ffffffffffffffff82111761039e577f426f0c0a2e698e1e1dc15965aacaec6b35a143139f5ad496aff205755eefb805966115d994600192875289845287840191825289600052828852866000209351166bffffffffffffffffffffffff60a01b845416178355519101555142611439565b9051908152a2565b815162461bcd60e51b815260048101849052601360248201527214185a5c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b6116329150843d861161094057610932818361124c565b38611549565b82513d6000823e3d90fd5b61165b919250843d861161094057610932818361124c565b90386114fc565b84513d6000823e3d90fdfe64786171a92c067a2b6fc8416ccbf374042fa95c2b9922afd8ee73281533b46fa2646970667358221220cf32b483177c7dd623c6d4200888baf8f343015bc01f7e43f9a1dc736880143264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80633edf9a381461114d5780633fc8cef31461110857806346f2335e146110835780636cf5bb6314611032578063715018a614610fd957806377b76ec314610f765780637ae06e5814610a5c5780638b099b23146109ac5780638da5cb5b14610983578063c9c65396146107cd578063d58c66ab146105a1578063f2fde38b14610513578063f6f1e306146101045763f887ea400361000e57346100ff5760003660031901126100ff576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b60a03660031901126100ff576101186111a2565b608435906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116919081166024358184146104ce5784156104c75730905b6040519261016b8461122f565b8352602094858401528060408401523460608401526101c36080840191604435835260a0850197606435895260c0860152600160e086015261010085019360018060a01b031684526101bd8187611286565b85611376565b6060830151835160408501519251975193516001600160a01b0390811694929116904261012c8101106104b15760609460c4936040519a8b96879563f305d71960e01b87526004870152602486015260448501526064840152608483015261012c420160a483015260018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af191821561046b57600093600095600094610477575b506040830151858082116103b9575b50508560608401518181116102dc575b50856102d8866102bb7f0000000000000000000000000000000000000000000000000000000000000000878961148d565b604051938493846040919493926060820195825260208201520152565b0390f35b906102e691611461565b600080808084335af13d156103b4573d67ffffffffffffffff811161039e576040519061031c601f8201601f191686018361124c565b81526000843d92013e5b15610365579160008051602061166e83398151915260606102d89695936102bb95604051916000835233908301526040820152a191509192858761028a565b60405162461bcd60e51b8152600481018390526011602482015270115512081c99599d5b990819985a5b1959607a1b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b610326565b6103c291611461565b835160405163a9059cbb60e01b81523360048201526024810183905291908390839060449082906000906001600160a01b03165af191821561046b5760008051602061166e8339815191529261043e575b508451604080516001600160a01b039092168252336020830152810191909152606090a1868561027a565b61045d90843d8611610464575b610455818361124c565b81019061126e565b5088610413565b503d61044b565b6040513d6000823e3d90fd5b919450925061049e91945060603d81116104aa575b610496818361124c565b810190611446565b9491939094928661026b565b503d61048c565b634e487b7160e01b600052601160045260246000fd5b339061015e565b60405162461bcd60e51b815260206004820152601f60248201527f557365206164644c697175696469747920666f722057455448207061697273006044820152606490fd5b346100ff5760203660031901126100ff5761052c6111a2565b610534611203565b6001600160a01b0390811690811561058857600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346100ff576020806003193601126100ff576001600160a01b0390816105c56111a2565b169182600052600182526040600020838282541603610791576001015442106107535760005416330361071e576040516370a0823160e01b81523060048201528181602481865afa90811561046b576000916106f1575b5080156106b35760405163a9059cbb60e01b815233600482015260248101919091529080826044816000875af191821561046b577ffe96c81c48e39035c6e8009a9b1089e8c7a168b29219e979a16351116d080b7b92610696575b50826000526001815260006001604082208281550155604051338152a2005b6106ac90823d841161046457610455818361124c565b5083610677565b60405162461bcd60e51b81526004810183905260166024820152754e6f206c697175696469747920746f20756e6c6f636b60501b6044820152606490fd5b90508181813d8311610717575b610708818361124c565b810103126100ff57518361061c565b503d6106fe565b6064906040519062461bcd60e51b82526004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152fd5b60405162461bcd60e51b8152600481018390526016602482015275131a5c5d5a591a5d1e481cdd1a5b1b081b1bd8dad95960521b6044820152606490fd5b60405162461bcd60e51b8152600481018490526014602482015273131a5c5d5a591a5d1e481b9bdd081b1bd8dad95960621b6044820152606490fd5b346100ff5760403660031901126100ff576107e66111a2565b6107ee6111b8565b60405163c45a015560e01b8152602092916001600160a01b039184816004817f000000000000000000000000000000000000000000000000000000000000000087165afa801561046b578391600091610966575b5060405163e6a4390560e01b81526001600160a01b038681166004830152841660248201529491168585604481845afa94851561046b57600095610947575b5083851615610897575b50505060405191168152f35b6040516364e329cb60e11b81526001600160a01b038381166004830152841660248201529294509091908590829060449082906000905af190811561046b5760009161091a575b507fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c948584808497816040519616865216941692a383808061088b565b61093a9150853d8711610940575b610932818361124c565b81019061146e565b856108de565b503d610928565b61095f919550863d881161094057610932818361124c565b9386610881565b61097d9150863d881161094057610932818361124c565b86610842565b346100ff5760003660031901126100ff576000546040516001600160a01b039091168152602090f35b346100ff5760403660031901126100ff57610a0460206109ca6111a2565b6109d26111b8565b604051636eb1769f60e11b81523060048201526001600160a01b03909116602482015292839190829081906044820190565b03916001600160a01b03165afa801561046b57600090610a2a575b602090604051908152f35b506020813d8211610a54575b81610a436020938361124c565b810103126100ff5760209051610a1f565b3d9150610a36565b60e03660031901126100ff57610a706111a2565b610a786111b8565b906001600160a01b038082167f000000000000000000000000000000000000000000000000000000000000000090911614908180610f40575b610efb5760c43515610ef45730915b60405192610acd8461122f565b6001600160a01b038381168552858116602086015260443560408601526064356060860152608435608086015260a43560a086015260c43560c0860152600060e08601521661010084015215610eda575b60e08201511580610e9f575b610e7e575b81516001600160a01b03908116907f0000000000000000000000000000000000000000000000000000000000000000168103610e6a575b5060e08201511580610e2f575b610e0e575b8151602083015160408401516060850151608086015160a08701516101008801516001600160a01b03968716999690811695919492939291164261012c8101106104b15760405162e8e33760e81b8152600481019a909a5260248a015260448901526064880152608487015260a486015260c48501524261012c0160e48501526060846101048160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561046b57600093600095600093610de5575b50604081015185808211610d40575b505060e08101511580610d33575b610c72575b906102d8936102bb9261148d565b90610c81866060840151611461565b60208381015160405163a9059cbb60e01b815233600482015260248101849052929692949190859060449082906000906001600160a01b03165af1801561046b576102d8966102bb9560008051602061166e83398151915292610d14575b50602083810151604080516001600160a01b039092168252339282019290925290810191909152606090a19192509350610c64565b610d2c9060203d60201161046457610455818361124c565b508a610cdf565b5085606082015111610c5f565b610d4991611461565b815160405163a9059cbb60e01b8152336004820152602481018390529190602090839060449082906000906001600160a01b03165af191821561046b5760008051602061166e83398151915292610dc6575b508251604080516001600160a01b039092168252336020830152810191909152606090a18685610c51565b610dde9060203d60201161046457610455818361124c565b5088610d9b565b9194509450610e02915060603d81116104aa57610496818361124c565b94919390949186610c42565b60208201516060830151610e2a916001600160a01b0316611376565b610b78565b5060208201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161415610b73565b6040830151610e7891611376565b83610b66565b60208201516060830151610e9a916001600160a01b0316611286565b610b2f565b5060208201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161415610b2a565b610eef6044356001600160a01b038316611286565b610b1e565b3391610ac0565b60405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742063726561746520574554482f574554482070616972000000006044820152606490fd5b506001600160a01b038381167f000000000000000000000000000000000000000000000000000000000000000090911614610ab1565b346100ff5760403660031901126100ff57610f8f6111a2565b6020610f996111b8565b6040516370a0823160e01b81526001600160a01b0391821660048201529283916024918391165afa801561046b57600090610a2a57602090604051908152f35b346100ff5760003660031901126100ff57610ff2611203565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100ff5760203660031901126100ff576001600160a01b03806110546111a2565b1660009081526001602081815260409283902080549201548351949092166001600160a01b0316845283015290f35b346100ff576110d86020611096366111ce565b91906110a0611203565b60405163095ea7b360e01b81526001600160a01b03909116600482015260248101929092529092839190829060009082906044820190565b03926001600160a01b03165af1801561046b576110f157005b6100199060203d811161046457610455818361124c565b346100ff5760003660031901126100ff576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100ff576110d86020611160366111ce565b919061116a611203565b60405163a9059cbb60e01b81526001600160a01b03909116600482015260248101929092529092839190829060009082906044820190565b600435906001600160a01b03821682036100ff57565b602435906001600160a01b03821682036100ff57565b60609060031901126100ff576001600160a01b039060043582811681036100ff579160243590811681036100ff579060443590565b6000546001600160a01b0316330361121757565b60405163118cdaa760e01b8152336004820152602490fd5b610120810190811067ffffffffffffffff82111761039e57604052565b90601f8019910116810190811067ffffffffffffffff82111761039e57604052565b908160209103126100ff575180151581036100ff5790565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b039190911691906020816064816000875af190811561046b57600091611358575b5015611313577f70c5f97fd0068e96984b8116fe83eefbff3b91244565bf311a3cba619b4ecbc7916080916040519182523360208301523060408301526060820152a1565b60405162461bcd60e51b815260206004820152601860248201527f5472616e73666572206f6620746f6b656e206661696c656400000000000000006044820152606490fd5b611370915060203d811161046457610455818361124c565b386112ce565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052909291906020908490604490829060009086165af192831561046b577ff4bf184b11bd224495c79981900c289537c9a3a3f5f4063cb3ac18d146a7076a9361141b575b50604080516001600160a01b039290921682526020820192909252a1565b6114329060203d811161046457610455818361124c565b50386113fd565b919082018092116104b157565b908160609103126100ff578051916040602083015192015190565b919082039182116104b157565b908160209103126100ff57516001600160a01b03811681036100ff5790565b60c00180519192909161149f57505050565b6040805163c45a015560e01b81526001600160a01b0394602093919084826004817f00000000000000000000000000000000000000000000000000000000000000008b165afa918215611662579161153293918693600092611643575b50855163e6a4390560e01b81526001600160a01b0391821660048201529216602483015290928391908290899082906044820190565b0392165afa9081156116385790859160009161161b575b50169384156115e15761155d845142611439565b93825183810181811067ffffffffffffffff82111761039e577f426f0c0a2e698e1e1dc15965aacaec6b35a143139f5ad496aff205755eefb805966115d994600192875289845287840191825289600052828852866000209351166bffffffffffffffffffffffff60a01b845416178355519101555142611439565b9051908152a2565b815162461bcd60e51b815260048101849052601360248201527214185a5c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b6116329150843d861161094057610932818361124c565b38611549565b82513d6000823e3d90fd5b61165b919250843d861161094057610932818361124c565b90386114fc565b84513d6000823e3d90fdfe64786171a92c067a2b6fc8416ccbf374042fa95c2b9922afd8ee73281533b46fa2646970667358221220cf32b483177c7dd623c6d4200888baf8f343015bc01f7e43f9a1dc736880143264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1839,
        "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
        "label": "liquidityLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(LockInfo)1806_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(LockInfo)1806_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityManager.LockInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockInfo)1806_storage"
      },
      "t_struct(LockInfo)1806_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityManager.LockInfo",
        "members": [
          {
            "astId": 1803,
            "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
            "label": "pair",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1805,
            "contract": "contracts/extensions/LiquidityManager.sol:LiquidityManager",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}